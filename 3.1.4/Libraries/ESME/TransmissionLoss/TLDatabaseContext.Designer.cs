//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool.
// Code is generated on: 3/23/2010 3:33:16 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace ESME.TransmissionLoss
{

    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "transmission_loss")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class TLDataContext : Devart.Data.Linq.DataContext
    {
        private static System.Data.Linq.Mapping.MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);

        partial void InsertField(Field instance);
        partial void UpdateField(Field instance);
        partial void DeleteField(Field instance);
        partial void InsertRadial(Radial instance);
        partial void UpdateRadial(Radial instance);
        partial void DeleteRadial(Radial instance);
        #endregion

        public TLDataContext() :
        base(GetConnectionString("TLDatabaseContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName) {

            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public TLDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public TLDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public TLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public TLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Field> Fields
        {
            get
            {
                return this.GetTable<Field>();
            }
        }

        public Devart.Data.Linq.Table<Radial> Radials
        {
            get
            {
                return this.GetTable<Radial>();
            }
        }
    }

    [Table(Name = @"transmission_loss.fields")]
    public partial class Field : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _IdField;

        private bool _IsCalculated;

        private float _Latitude_degrees;

        private float _Longitude_degrees;

        private float _SourceDepth_meters;

        private float _VerticalBeamWidth_degrees;

        private float _VerticalLookAngle_degrees;

        private float _LowFrequency_Hz;

        private float _HighFrequency_Hz;

        private float _MaxCalculationDepth_meters;

        private long _Radius_meters;

        private string _DataDirectoryPath;

        private string _BinaryFileName;

        private byte[] _RangeAxisBytes;

        private byte[] _DepthAxisBytes;

        private EntitySet<Radial> _Radials;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdFieldChanging(long value);
        partial void OnIdFieldChanged();
        partial void OnIsCalculatedChanging(bool value);
        partial void OnIsCalculatedChanged();
        partial void OnLatitude_degreesChanging(float value);
        partial void OnLatitude_degreesChanged();
        partial void OnLongitude_degreesChanging(float value);
        partial void OnLongitude_degreesChanged();
        partial void OnSourceDepth_metersChanging(float value);
        partial void OnSourceDepth_metersChanged();
        partial void OnVerticalBeamWidth_degreesChanging(float value);
        partial void OnVerticalBeamWidth_degreesChanged();
        partial void OnVerticalLookAngle_degreesChanging(float value);
        partial void OnVerticalLookAngle_degreesChanged();
        partial void OnLowFrequency_HzChanging(float value);
        partial void OnLowFrequency_HzChanged();
        partial void OnHighFrequency_HzChanging(float value);
        partial void OnHighFrequency_HzChanged();
        partial void OnMaxCalculationDepth_metersChanging(float value);
        partial void OnMaxCalculationDepth_metersChanged();
        partial void OnRadius_metersChanging(long value);
        partial void OnRadius_metersChanged();
        partial void OnDataDirectoryPathChanging(string value);
        partial void OnDataDirectoryPathChanged();
        partial void OnBinaryFileNameChanging(string value);
        partial void OnBinaryFileNameChanged();
        partial void OnRangeAxisBytesChanging(byte[] value);
        partial void OnRangeAxisBytesChanged();
        partial void OnDepthAxisBytesChanging(byte[] value);
        partial void OnDepthAxisBytesChanged();
        #endregion

        public Field()
        {
            this._Radials = new EntitySet<Radial>(new Action<Radial>(this.attach_Radials), new Action<Radial>(this.detach_Radials));
            OnCreated();
        }

        [Column(Name = @"idField", Storage = "_IdField", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true, UpdateCheck = UpdateCheck.WhenChanged)]
        public long IdField
        {
            get
            {
                return this._IdField;
            }
            set
            {
                if (this._IdField != value)
                {
                    this.OnIdFieldChanging(value);
                    this.SendPropertyChanging();
                    this._IdField = value;
                    this.SendPropertyChanged("IdField");
                    this.OnIdFieldChanged();
                }
            }
        }

        [Column(Storage = "_IsCalculated", CanBeNull = false, DbType = "bit(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool IsCalculated
        {
            get
            {
                return this._IsCalculated;
            }
            set
            {
                if (this._IsCalculated != value)
                {
                    this.OnIsCalculatedChanging(value);
                    this.SendPropertyChanging();
                    this._IsCalculated = value;
                    this.SendPropertyChanged("IsCalculated");
                    this.OnIsCalculatedChanged();
                }
            }
        }

        [Column(Storage = "_Latitude_degrees", CanBeNull = false, DbType = "float NOT NULL", UpdateCheck = UpdateCheck.WhenChanged)]
        public float Latitude_degrees
        {
            get
            {
                return this._Latitude_degrees;
            }
            set
            {
                if (this._Latitude_degrees != value)
                {
                    this.OnLatitude_degreesChanging(value);
                    this.SendPropertyChanging();
                    this._Latitude_degrees = value;
                    this.SendPropertyChanged("Latitude_degrees");
                    this.OnLatitude_degreesChanged();
                }
            }
        }

        [Column(Storage = "_Longitude_degrees", CanBeNull = false, DbType = "float NOT NULL", UpdateCheck = UpdateCheck.WhenChanged)]
        public float Longitude_degrees
        {
            get
            {
                return this._Longitude_degrees;
            }
            set
            {
                if (this._Longitude_degrees != value)
                {
                    this.OnLongitude_degreesChanging(value);
                    this.SendPropertyChanging();
                    this._Longitude_degrees = value;
                    this.SendPropertyChanged("Longitude_degrees");
                    this.OnLongitude_degreesChanged();
                }
            }
        }

        [Column(Storage = "_SourceDepth_meters", CanBeNull = false, DbType = "float NOT NULL", UpdateCheck = UpdateCheck.WhenChanged)]
        public float SourceDepth_meters
        {
            get
            {
                return this._SourceDepth_meters;
            }
            set
            {
                if (this._SourceDepth_meters != value)
                {
                    this.OnSourceDepth_metersChanging(value);
                    this.SendPropertyChanging();
                    this._SourceDepth_meters = value;
                    this.SendPropertyChanged("SourceDepth_meters");
                    this.OnSourceDepth_metersChanged();
                }
            }
        }

        [Column(Storage = "_VerticalBeamWidth_degrees", CanBeNull = false, DbType = "float NOT NULL", UpdateCheck = UpdateCheck.WhenChanged)]
        public float VerticalBeamWidth_degrees
        {
            get
            {
                return this._VerticalBeamWidth_degrees;
            }
            set
            {
                if (this._VerticalBeamWidth_degrees != value)
                {
                    this.OnVerticalBeamWidth_degreesChanging(value);
                    this.SendPropertyChanging();
                    this._VerticalBeamWidth_degrees = value;
                    this.SendPropertyChanged("VerticalBeamWidth_degrees");
                    this.OnVerticalBeamWidth_degreesChanged();
                }
            }
        }

        [Column(Storage = "_VerticalLookAngle_degrees", CanBeNull = false, DbType = "float NOT NULL", UpdateCheck = UpdateCheck.WhenChanged)]
        public float VerticalLookAngle_degrees
        {
            get
            {
                return this._VerticalLookAngle_degrees;
            }
            set
            {
                if (this._VerticalLookAngle_degrees != value)
                {
                    this.OnVerticalLookAngle_degreesChanging(value);
                    this.SendPropertyChanging();
                    this._VerticalLookAngle_degrees = value;
                    this.SendPropertyChanged("VerticalLookAngle_degrees");
                    this.OnVerticalLookAngle_degreesChanged();
                }
            }
        }

        [Column(Storage = "_LowFrequency_Hz", CanBeNull = false, DbType = "float NOT NULL", UpdateCheck = UpdateCheck.WhenChanged)]
        public float LowFrequency_Hz
        {
            get
            {
                return this._LowFrequency_Hz;
            }
            set
            {
                if (this._LowFrequency_Hz != value)
                {
                    this.OnLowFrequency_HzChanging(value);
                    this.SendPropertyChanging();
                    this._LowFrequency_Hz = value;
                    this.SendPropertyChanged("LowFrequency_Hz");
                    this.OnLowFrequency_HzChanged();
                }
            }
        }

        [Column(Storage = "_HighFrequency_Hz", CanBeNull = false, DbType = "float NOT NULL", UpdateCheck = UpdateCheck.WhenChanged)]
        public float HighFrequency_Hz
        {
            get
            {
                return this._HighFrequency_Hz;
            }
            set
            {
                if (this._HighFrequency_Hz != value)
                {
                    this.OnHighFrequency_HzChanging(value);
                    this.SendPropertyChanging();
                    this._HighFrequency_Hz = value;
                    this.SendPropertyChanged("HighFrequency_Hz");
                    this.OnHighFrequency_HzChanged();
                }
            }
        }

        [Column(Storage = "_MaxCalculationDepth_meters", CanBeNull = false, DbType = "float NOT NULL", UpdateCheck = UpdateCheck.WhenChanged)]
        public float MaxCalculationDepth_meters
        {
            get
            {
                return this._MaxCalculationDepth_meters;
            }
            set
            {
                if (this._MaxCalculationDepth_meters != value)
                {
                    this.OnMaxCalculationDepth_metersChanging(value);
                    this.SendPropertyChanging();
                    this._MaxCalculationDepth_meters = value;
                    this.SendPropertyChanged("MaxCalculationDepth_meters");
                    this.OnMaxCalculationDepth_metersChanged();
                }
            }
        }

        [Column(Storage = "_Radius_meters", CanBeNull = false, DbType = "int(6) NOT NULL", UpdateCheck = UpdateCheck.WhenChanged)]
        public long Radius_meters
        {
            get
            {
                return this._Radius_meters;
            }
            set
            {
                if (this._Radius_meters != value)
                {
                    this.OnRadius_metersChanging(value);
                    this.SendPropertyChanging();
                    this._Radius_meters = value;
                    this.SendPropertyChanged("Radius_meters");
                    this.OnRadius_metersChanged();
                }
            }
        }

        [Column(Storage = "_DataDirectoryPath", CanBeNull = false, DbType = "text NOT NULL", UpdateCheck = UpdateCheck.WhenChanged)]
        public string DataDirectoryPath
        {
            get
            {
                return this._DataDirectoryPath;
            }
            set
            {
                if (this._DataDirectoryPath != value)
                {
                    this.OnDataDirectoryPathChanging(value);
                    this.SendPropertyChanging();
                    this._DataDirectoryPath = value;
                    this.SendPropertyChanged("DataDirectoryPath");
                    this.OnDataDirectoryPathChanged();
                }
            }
        }

        [Column(Storage = "_BinaryFileName", DbType = "text", UpdateCheck = UpdateCheck.Never)]
        public string BinaryFileName
        {
            get
            {
                return this._BinaryFileName;
            }
            set
            {
                if (this._BinaryFileName != value)
                {
                    this.OnBinaryFileNameChanging(value);
                    this.SendPropertyChanging();
                    this._BinaryFileName = value;
                    this.SendPropertyChanged("BinaryFileName");
                    this.OnBinaryFileNameChanged();
                }
            }
        }

        [Column(Storage = "_RangeAxisBytes", DbType = "blob", UpdateCheck = UpdateCheck.Never)]
        public byte[] RangeAxisBytes
        {
            get
            {
                return this._RangeAxisBytes;
            }
            set
            {
                if (this._RangeAxisBytes != value)
                {
                    this.OnRangeAxisBytesChanging(value);
                    this.SendPropertyChanging();
                    this._RangeAxisBytes = value;
                    this.SendPropertyChanged("RangeAxisBytes");
                    this.OnRangeAxisBytesChanged();
                }
            }
        }

        [Column(Storage = "_DepthAxisBytes", DbType = "blob", UpdateCheck = UpdateCheck.Never)]
        public byte[] DepthAxisBytes
        {
            get
            {
                return this._DepthAxisBytes;
            }
            set
            {
                if (this._DepthAxisBytes != value)
                {
                    this.OnDepthAxisBytesChanging(value);
                    this.SendPropertyChanging();
                    this._DepthAxisBytes = value;
                    this.SendPropertyChanged("DepthAxisBytes");
                    this.OnDepthAxisBytesChanged();
                }
            }
        }

        [Association(Name="Field_Radial", Storage="_Radials", OtherKey="IdField")]
        public EntitySet<Radial> Radials
        {
            get
            {
                return this._Radials;
            }
            set
            {
                this._Radials.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Radials(Radial entity)
        {
            this.SendPropertyChanging("Radials");
            entity.Field = this;
        }
    
        private void detach_Radials(Radial entity)
        {
            this.SendPropertyChanging("Radials");
            entity.Field = null;
        }
    }

    [Table(Name = @"transmission_loss.radials")]
    public partial class Radial : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _IdRadial;

        private System.Nullable<long> _IdField;

        private bool _IsCalculated;

        private System.Nullable<System.DateTime> _CalculationStarted;

        private System.Nullable<System.DateTime> _CalculationFinished;

        private float _BearingFromSource_degrees;

        private string _BellhopConfiguration;

        private string _BottomProfile;

        private EntityRef<Field> _Field;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdRadialChanging(long value);
        partial void OnIdRadialChanged();
        partial void OnIdFieldChanging(System.Nullable<long> value);
        partial void OnIdFieldChanged();
        partial void OnIsCalculatedChanging(bool value);
        partial void OnIsCalculatedChanged();
        partial void OnCalculationStartedChanging(System.Nullable<System.DateTime> value);
        partial void OnCalculationStartedChanged();
        partial void OnCalculationFinishedChanging(System.Nullable<System.DateTime> value);
        partial void OnCalculationFinishedChanged();
        partial void OnBearingFromSource_degreesChanging(float value);
        partial void OnBearingFromSource_degreesChanged();
        partial void OnBellhopConfigurationChanging(string value);
        partial void OnBellhopConfigurationChanged();
        partial void OnBottomProfileChanging(string value);
        partial void OnBottomProfileChanged();
        #endregion

        public Radial()
        {
            this._Field  = default(EntityRef<Field>);
            OnCreated();
        }

        [Column(Name = @"idRadial", Storage = "_IdRadial", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true, UpdateCheck = UpdateCheck.WhenChanged)]
        public long IdRadial
        {
            get
            {
                return this._IdRadial;
            }
            set
            {
                if (this._IdRadial != value)
                {
                    this.OnIdRadialChanging(value);
                    this.SendPropertyChanging();
                    this._IdRadial = value;
                    this.SendPropertyChanged("IdRadial");
                    this.OnIdRadialChanged();
                }
            }
        }

        [Column(Name = @"idField", Storage = "_IdField", DbType = "int(10)", UpdateCheck = UpdateCheck.WhenChanged)]
        public System.Nullable<long> IdField
        {
            get
            {
                return this._IdField;
            }
            set
            {
                if (this._IdField != value)
                {
                    if (this._Field.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdFieldChanging(value);
                    this.SendPropertyChanging();
                    this._IdField = value;
                    this.SendPropertyChanged("IdField");
                    this.OnIdFieldChanged();
                }
            }
        }

        [Column(Storage = "_IsCalculated", CanBeNull = false, DbType = "bit(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool IsCalculated
        {
            get
            {
                return this._IsCalculated;
            }
            set
            {
                if (this._IsCalculated != value)
                {
                    this.OnIsCalculatedChanging(value);
                    this.SendPropertyChanging();
                    this._IsCalculated = value;
                    this.SendPropertyChanged("IsCalculated");
                    this.OnIsCalculatedChanged();
                }
            }
        }

        [Column(Storage = "_CalculationStarted", DbType = "datetime", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> CalculationStarted
        {
            get
            {
                return this._CalculationStarted;
            }
            set
            {
                if (this._CalculationStarted != value)
                {
                    this.OnCalculationStartedChanging(value);
                    this.SendPropertyChanging();
                    this._CalculationStarted = value;
                    this.SendPropertyChanged("CalculationStarted");
                    this.OnCalculationStartedChanged();
                }
            }
        }

        [Column(Storage = "_CalculationFinished", DbType = "datetime", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> CalculationFinished
        {
            get
            {
                return this._CalculationFinished;
            }
            set
            {
                if (this._CalculationFinished != value)
                {
                    this.OnCalculationFinishedChanging(value);
                    this.SendPropertyChanging();
                    this._CalculationFinished = value;
                    this.SendPropertyChanged("CalculationFinished");
                    this.OnCalculationFinishedChanged();
                }
            }
        }

        [Column(Storage = "_BearingFromSource_degrees", CanBeNull = false, DbType = "float NOT NULL", UpdateCheck = UpdateCheck.WhenChanged)]
        public float BearingFromSource_degrees
        {
            get
            {
                return this._BearingFromSource_degrees;
            }
            set
            {
                if (this._BearingFromSource_degrees != value)
                {
                    this.OnBearingFromSource_degreesChanging(value);
                    this.SendPropertyChanging();
                    this._BearingFromSource_degrees = value;
                    this.SendPropertyChanged("BearingFromSource_degrees");
                    this.OnBearingFromSource_degreesChanged();
                }
            }
        }

        [Column(Storage = "_BellhopConfiguration", CanBeNull = false, DbType = "text NOT NULL", UpdateCheck = UpdateCheck.WhenChanged)]
        public string BellhopConfiguration
        {
            get
            {
                return this._BellhopConfiguration;
            }
            set
            {
                if (this._BellhopConfiguration != value)
                {
                    this.OnBellhopConfigurationChanging(value);
                    this.SendPropertyChanging();
                    this._BellhopConfiguration = value;
                    this.SendPropertyChanged("BellhopConfiguration");
                    this.OnBellhopConfigurationChanged();
                }
            }
        }

        [Column(Storage = "_BottomProfile", CanBeNull = false, DbType = "text NOT NULL", UpdateCheck = UpdateCheck.WhenChanged)]
        public string BottomProfile
        {
            get
            {
                return this._BottomProfile;
            }
            set
            {
                if (this._BottomProfile != value)
                {
                    this.OnBottomProfileChanging(value);
                    this.SendPropertyChanging();
                    this._BottomProfile = value;
                    this.SendPropertyChanged("BottomProfile");
                    this.OnBottomProfileChanged();
                }
            }
        }

        [Association(Name="Field_Radial", Storage="_Field", ThisKey="IdField", IsForeignKey=true)]
        public Field Field
        {
            get
            {
                return this._Field.Entity;
            }
            set
            {
                Field previousValue = this._Field.Entity;
                if ((previousValue != value) || (this._Field.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Field.Entity = null;
                        previousValue.Radials.Remove(this);
                    }
                    this._Field.Entity = value;
                    if (value != null)
                    {
                        value.Radials.Add(this);
                        this._IdField = value.IdField;
                    }
                    else
                    {
                        this._IdField = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Field");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
