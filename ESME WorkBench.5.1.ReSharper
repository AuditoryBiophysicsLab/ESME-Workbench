<Configuration>
  <CodeStyleSettings>
    <ExternalPath>C:\Projects\ESME Deliverables\ESME WorkBench.5.1.ReSharper</ExternalPath>
    <Sharing>EXTERNAL</Sharing>
  </CodeStyleSettings>
  <SharedSolutionTemplateManager>
    <LiveTemplates>
      <Template uid="f4c489cb-def7-49ad-a814-8c2d345fa4b7" shortcut="mmcd" description="" text="public const string $Message$ = &quot;$Message$Message&quot;;" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="TypeMember" minimumLanguageVersion="3.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="Message" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="3f7cd8ae-f88b-43bc-ab3e-648bdea8565b" shortcut="mms" description="" text="MediatorMessage.Send(MediatorMessage" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="3.0" />
        </Context>
        <Categories />
        <Variables />
        <CustomProperties />
      </Template>
      <Template uid="c17325a7-a73c-4d85-977b-8fd001048816" shortcut="vmc" description="" text="#region $COMMANDNAME$Command&#xD;&#xA;public SimpleCommand&lt;object, object&gt; $COMMANDNAME$Command&#xD;&#xA;{&#xD;&#xA;    get { return _$PRIVATE$ ?? (_$PRIVATE$ = new SimpleCommand&lt;object, object&gt;(delegate {return Is$COMMANDNAME$CommandEnabled; }, delegate { $COMMANDNAME$Handler(); })); }&#xD;&#xA;}&#xD;&#xA;SimpleCommand&lt;object, object&gt; _$PRIVATE$;&#xD;&#xA;&#xD;&#xA;bool Is$COMMANDNAME$CommandEnabled&#xD;&#xA;{&#xD;&#xA;	get&#xD;&#xA;	{&#xD;&#xA;		return true;&#xD;&#xA;	}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;void $COMMANDNAME$Handler()&#xD;&#xA;{&#xD;&#xA;	&#xD;&#xA;}&#xD;&#xA;#endregion" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="3.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="COMMANDNAME" expression="" initialRange="1" />
          <Variable name="PRIVATE" expression="decapitalize(COMMANDNAME)" initialRange="-1" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="ba1abbe8-a3c7-47f2-a709-17277d8b18c6" shortcut="vml" description="" text="#region public ObservableCollection&lt;$TYPE$&gt; $NAME$ { get; set; }&#xD;&#xA;&#xD;&#xA;public ObservableCollection&lt;$TYPE$&gt; $NAME$&#xD;&#xA;{&#xD;&#xA;	get { return _$PRIVATE$ ?? (_$PRIVATE$ = new ObservableCollection&lt;$TYPE$&gt;()); }&#xD;&#xA;    set&#xD;&#xA;    {&#xD;&#xA;		if (_$PRIVATE$ == value) return;&#xD;&#xA;		if (_$PRIVATE$ != null) _$PRIVATE$.CollectionChanged -= $NAME$CollectionChanged;&#xD;&#xA;		_$PRIVATE$ = value;&#xD;&#xA;		if (_$PRIVATE$ != null) _$PRIVATE$.CollectionChanged += $NAME$CollectionChanged;&#xD;&#xA;        NotifyPropertyChanged($NAME$ChangedEventArgs);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;void $NAME$CollectionChanged(object sender, NotifyCollectionChangedEventArgs e) { NotifyPropertyChanged($NAME$ChangedEventArgs); }&#xD;&#xA;static readonly PropertyChangedEventArgs $NAME$ChangedEventArgs = ObservableHelper.CreateArgs&lt;$CLASS$&gt;(x =&gt; x.$NAME$);&#xD;&#xA;ObservableCollection&lt;$TYPE$&gt; _$PRIVATE$;&#xD;&#xA;&#xD;&#xA;#endregion&#xD;&#xA;" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="TypeMember" minimumLanguageVersion="3.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="TYPE" expression="" initialRange="0" />
          <Variable name="NAME" expression="" initialRange="0" />
          <Variable name="PRIVATE" expression="decapitalize(NAME)" initialRange="-1" />
          <Variable name="CLASS" expression="typeName()" initialRange="-1" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="bfaf860c-b91d-4dd3-b13d-7c59581017bd" shortcut="vmpw" description="" text="#region public LabeledDataWrapper&lt;$TYPE$&gt; $NAME$ { get; set; }&#xD;&#xA;&#xD;&#xA;public LabeledDataWrapper&lt;$TYPE$&gt; $NAME$&#xD;&#xA;{&#xD;&#xA;	get { return _$PRIVATE$; }&#xD;&#xA;    set&#xD;&#xA;    {&#xD;&#xA;		if (_$PRIVATE$ == value) return;&#xD;&#xA;		_$PRIVATE$ = value;&#xD;&#xA;		_$PRIVATE$.ValidationRules.Add(new SimpleRule(&quot;DataValue&quot;, &quot;Parameter error message&quot;, domObj =&gt;&#xD;&#xA;		{&#xD;&#xA;            var obj = (DataWrapper&lt;$TYPE$&gt;) domObj;&#xD;&#xA;            return ((obj.DataValue &lt; -90) || (90 &lt; obj.DataValue));&#xD;&#xA;        }));&#xD;&#xA;        NotifyPropertyChanged($NAME$ChangedEventArgs);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;static readonly PropertyChangedEventArgs $NAME$ChangedEventArgs = ObservableHelper.CreateArgs&lt;$CLASS$&gt;(x =&gt; x.$NAME$);&#xD;&#xA;LabeledDataWrapper&lt;$TYPE$&gt; _$PRIVATE$;&#xD;&#xA;$NAME$ = new LabeledDataWrapper&lt;$TYPE$&gt;(this, $NAME$ChangedEventArgs)&#xD;&#xA;{&#xD;&#xA;	Label = &quot;$LABEL$&quot;,&#xD;&#xA;};&#xD;&#xA;#endregion&#xD;&#xA;" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="TypeMember" minimumLanguageVersion="3.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="TYPE" expression="" initialRange="0" />
          <Variable name="NAME" expression="" initialRange="0" />
          <Variable name="LABEL" expression="" initialRange="0" />
          <Variable name="PRIVATE" expression="decapitalize(NAME)" initialRange="-1" />
          <Variable name="CLASS" expression="typeName()" initialRange="-1" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="34f592e6-e426-4ad7-8140-b2d9a13f5529" shortcut="vmr" description="" text="#region public $TYPE$ $NAME$ { get; set; }&#xD;&#xA;&#xD;&#xA;public $TYPE$ $NAME$&#xD;&#xA;{&#xD;&#xA;	get { return _$PRIVATE$ ?? (_$PRIVATE$ = new $TYPE$()); }&#xD;&#xA;    set&#xD;&#xA;    {&#xD;&#xA;		if (_$PRIVATE$ == value) return;&#xD;&#xA;		_$PRIVATE$ = value;&#xD;&#xA;        NotifyPropertyChanged($NAME$ChangedEventArgs);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;static readonly PropertyChangedEventArgs $NAME$ChangedEventArgs = ObservableHelper.CreateArgs&lt;$CLASS$&gt;(x =&gt; x.$NAME$);&#xD;&#xA;$TYPE$ _$PRIVATE$;&#xD;&#xA;&#xD;&#xA;#endregion&#xD;&#xA;" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="TypeMember" minimumLanguageVersion="3.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="TYPE" expression="" initialRange="0" />
          <Variable name="NAME" expression="" initialRange="0" />
          <Variable name="PRIVATE" expression="decapitalize(NAME)" initialRange="-1" />
          <Variable name="CLASS" expression="typeName()" initialRange="-1" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="0aaed870-7399-4a41-966b-33f78f2bd5f2" shortcut="vmv" description="" text="#region public $TYPE$ $NAME$ { get; set; }&#xD;&#xA;&#xD;&#xA;public $TYPE$ $NAME$&#xD;&#xA;{&#xD;&#xA;	get { return _$PRIVATE$; }&#xD;&#xA;    set&#xD;&#xA;    {&#xD;&#xA;		if (_$PRIVATE$ == value) return;&#xD;&#xA;		_$PRIVATE$ = value;&#xD;&#xA;        NotifyPropertyChanged($NAME$ChangedEventArgs);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;static readonly PropertyChangedEventArgs $NAME$ChangedEventArgs = ObservableHelper.CreateArgs&lt;$CLASS$&gt;(x =&gt; x.$NAME$);&#xD;&#xA;$TYPE$ _$PRIVATE$;&#xD;&#xA;&#xD;&#xA;#endregion&#xD;&#xA;" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="TypeMember" minimumLanguageVersion="3.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="TYPE" expression="" initialRange="0" />
          <Variable name="NAME" expression="" initialRange="0" />
          <Variable name="PRIVATE" expression="decapitalize(NAME)" initialRange="-1" />
          <Variable name="CLASS" expression="typeName()" initialRange="-1" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="8b3dc9c6-1c82-4a97-a1d5-79268a161f45" shortcut="xvml" description="" text="#region public ObservableCollection&lt;$TYPE$&gt; $NAME$ { get; set; }&#xD;&#xA;[XmlElement]&#xD;&#xA;public ObservableCollection&lt;$TYPE$&gt; $NAME$&#xD;&#xA;{&#xD;&#xA;	get { return _$PRIVATE$ ?? (_$PRIVATE$ = new ObservableCollection&lt;$TYPE$&gt;()); }&#xD;&#xA;    set&#xD;&#xA;    {&#xD;&#xA;		if (_$PRIVATE$ == value) return;&#xD;&#xA;		if (_$PRIVATE$ != null) _$PRIVATE$.CollectionChanged -= $NAME$CollectionChanged;&#xD;&#xA;		_$PRIVATE$ = value;&#xD;&#xA;		if (_$PRIVATE$ != null) _$PRIVATE$.CollectionChanged += $NAME$CollectionChanged;&#xD;&#xA;        NotifyPropertyChanged($NAME$ChangedEventArgs);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;void $NAME$CollectionChanged(object sender, NotifyCollectionChangedEventArgs e) { NotifyPropertyChanged($NAME$ChangedEventArgs); }&#xD;&#xA;[XmlIgnore]&#xD;&#xA;static readonly PropertyChangedEventArgs $NAME$ChangedEventArgs = ObservableHelper.CreateArgs&lt;$CLASS$&gt;(x =&gt; x.$NAME$);&#xD;&#xA;[XmlIgnore]&#xD;&#xA;ObservableCollection&lt;$TYPE$&gt; _$PRIVATE$;&#xD;&#xA;&#xD;&#xA;#endregion&#xD;&#xA;" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="TypeMember" minimumLanguageVersion="3.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="TYPE" expression="" initialRange="0" />
          <Variable name="NAME" expression="" initialRange="0" />
          <Variable name="PRIVATE" expression="decapitalize(NAME)" initialRange="-1" />
          <Variable name="CLASS" expression="typeName()" initialRange="-1" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="f13f03ee-deb7-4ec5-8247-9dc46573cc9a" shortcut="xvmr" description="" text="#region public $TYPE$ $NAME$ { get; set; }&#xD;&#xA;&#xD;&#xA;[XmlElement]&#xD;&#xA;public $TYPE$ $NAME$&#xD;&#xA;{&#xD;&#xA;	get { return _$PRIVATE$ ?? (_$PRIVATE$ = new $TYPE$()); }&#xD;&#xA;    set&#xD;&#xA;    {&#xD;&#xA;		if (_$PRIVATE$ == value) return;&#xD;&#xA;		_$PRIVATE$ = value;&#xD;&#xA;        NotifyPropertyChanged($NAME$ChangedEventArgs);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;[XmlIgnore]&#xD;&#xA;static readonly PropertyChangedEventArgs $NAME$ChangedEventArgs = ObservableHelper.CreateArgs&lt;$CLASS$&gt;(x =&gt; x.$NAME$);&#xD;&#xA;[XmlIgnore]&#xD;&#xA;$TYPE$ _$PRIVATE$;&#xD;&#xA;&#xD;&#xA;#endregion&#xD;&#xA;" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="TypeMember" minimumLanguageVersion="3.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="TYPE" expression="" initialRange="0" />
          <Variable name="NAME" expression="" initialRange="0" />
          <Variable name="PRIVATE" expression="decapitalize(NAME)" initialRange="-1" />
          <Variable name="CLASS" expression="typeName()" initialRange="-1" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="919088d1-b7ab-48cb-ba18-fd62e8ed6bc3" shortcut="xvmv" description="" text="#region public $TYPE$ $NAME$ { get; set; }&#xD;&#xA;&#xD;&#xA;[XmlElement]&#xD;&#xA;public $TYPE$ $NAME$&#xD;&#xA;{&#xD;&#xA;	get { return _$PRIVATE$; }&#xD;&#xA;    set&#xD;&#xA;    {&#xD;&#xA;		if (_$PRIVATE$ == value) return;&#xD;&#xA;		_$PRIVATE$ = value;&#xD;&#xA;        NotifyPropertyChanged($NAME$ChangedEventArgs);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;[XmlIgnore]&#xD;&#xA;static readonly PropertyChangedEventArgs $NAME$ChangedEventArgs = ObservableHelper.CreateArgs&lt;$CLASS$&gt;(x =&gt; x.$NAME$);&#xD;&#xA;[XmlIgnore]&#xD;&#xA;$TYPE$ _$PRIVATE$;&#xD;&#xA;&#xD;&#xA;#endregion&#xD;&#xA;" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="TypeMember" minimumLanguageVersion="3.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="TYPE" expression="" initialRange="0" />
          <Variable name="NAME" expression="" initialRange="0" />
          <Variable name="PRIVATE" expression="decapitalize(NAME)" initialRange="-1" />
          <Variable name="CLASS" expression="typeName()" initialRange="-1" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="7ea3d1ab-e544-4348-b23f-e5b74f9967f7" shortcut="vtb" description="" text="&lt;Controls:ValidatingTextBox BoundField=&quot;$FIELD$&quot;/&gt;" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <XMLContext type="EVERYWHERE" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="FIELD" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="bd9fd811-86b4-4210-8363-b1ae971511c3" shortcut="vnrule" description="" text="new ValidationRule&#xD;&#xA;	{&#xD;&#xA;		PropertyName = &quot;$NAME$&quot;,&#xD;&#xA;		Description = &quot;$DESC$&quot;,&#xD;&#xA;		RuleDelegate = (o, r) =&gt; {									&#xD;&#xA;									var ruleTarget=(($CLASS$) o).$NAME$;&#xD;&#xA;									return RangeCheck(ruleTarget$text$);&#xD;&#xA;							      },&#xD;&#xA;	}," reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Expression" minimumLanguageVersion="3.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="NAME" expression="" initialRange="0" />
          <Variable name="DESC" expression="" initialRange="0" />
          <Variable name="CLASS" expression="typeName()" initialRange="-1" />
          <Variable name="text" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="7da9d839-40b1-4201-babe-91a8bdf8db2e" shortcut="vrule" description="" text="new ValidationRule&#xD;&#xA;	{&#xD;&#xA;		PropertyName = &quot;$NAME$&quot;,&#xD;&#xA;		Description = &quot;$DESC$&quot;,&#xD;&#xA;		RuleDelegate = (o, r) =&gt; {									&#xD;&#xA;									var ruleTarget=(($CLASS$) o).$NAME$;&#xD;&#xA;									return $CONDITION$;&#xD;&#xA;							      },&#xD;&#xA;	},                               " reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Expression" minimumLanguageVersion="3.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="NAME" expression="" initialRange="0" />
          <Variable name="DESC" expression="" initialRange="0" />
          <Variable name="CLASS" expression="typeName()" initialRange="-1" />
          <Variable name="CONDITION" expression="" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
    </LiveTemplates>
  </SharedSolutionTemplateManager>
</Configuration>