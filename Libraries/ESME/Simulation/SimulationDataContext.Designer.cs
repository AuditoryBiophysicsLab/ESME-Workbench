//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool.
// Code is generated on: 4/17/2010 12:32:53 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace ESME.Simulation
{

    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "DataSource")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class SimulationDataContext : Devart.Data.Linq.DataContext
    {
        private static System.Data.Linq.Mapping.MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();
        public static Devart.Data.Linq.CompiledQueryCache compiledQueryCache = Devart.Data.Linq.CompiledQueryCache.RegisterDataContext(typeof(SimulationDataContext));

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);

        partial void InsertAnimatlocation(Animatlocation instance);
        partial void UpdateAnimatlocation(Animatlocation instance);
        partial void DeleteAnimatlocation(Animatlocation instance);
        partial void InsertAnimat(Animat instance);
        partial void UpdateAnimat(Animat instance);
        partial void DeleteAnimat(Animat instance);
        partial void InsertExposure(Exposure instance);
        partial void UpdateExposure(Exposure instance);
        partial void DeleteExposure(Exposure instance);
        partial void InsertPlatformlocation(Platformlocation instance);
        partial void UpdatePlatformlocation(Platformlocation instance);
        partial void DeletePlatformlocation(Platformlocation instance);
        partial void InsertPlatform(Platform instance);
        partial void UpdatePlatform(Platform instance);
        partial void DeletePlatform(Platform instance);
        partial void InsertSimulation(Simulation instance);
        partial void UpdateSimulation(Simulation instance);
        partial void DeleteSimulation(Simulation instance);
        partial void InsertSourcelocation(Sourcelocation instance);
        partial void UpdateSourcelocation(Sourcelocation instance);
        partial void DeleteSourcelocation(Sourcelocation instance);
        partial void InsertSource(Source instance);
        partial void UpdateSource(Source instance);
        partial void DeleteSource(Source instance);
        partial void InsertSpecy(Specy instance);
        partial void UpdateSpecy(Specy instance);
        partial void DeleteSpecy(Specy instance);
        partial void InsertTime(Time instance);
        partial void UpdateTime(Time instance);
        partial void DeleteTime(Time instance);
        partial void InsertTimestep(Timestep instance);
        partial void UpdateTimestep(Timestep instance);
        partial void DeleteTimestep(Timestep instance);
        #endregion

        public SimulationDataContext() :
        base(GetConnectionString("SimulationDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName) {

            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public SimulationDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public SimulationDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public SimulationDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public SimulationDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Animatlocation> Animatlocations
        {
            get
            {
                return this.GetTable<Animatlocation>();
            }
        }

        public Devart.Data.Linq.Table<Animat> Animats
        {
            get
            {
                return this.GetTable<Animat>();
            }
        }

        public Devart.Data.Linq.Table<Exposure> Exposures
        {
            get
            {
                return this.GetTable<Exposure>();
            }
        }

        public Devart.Data.Linq.Table<Platformlocation> Platformlocations
        {
            get
            {
                return this.GetTable<Platformlocation>();
            }
        }

        public Devart.Data.Linq.Table<Platform> Platforms
        {
            get
            {
                return this.GetTable<Platform>();
            }
        }

        public Devart.Data.Linq.Table<Simulation> Simulations
        {
            get
            {
                return this.GetTable<Simulation>();
            }
        }

        public Devart.Data.Linq.Table<Sourcelocation> Sourcelocations
        {
            get
            {
                return this.GetTable<Sourcelocation>();
            }
        }

        public Devart.Data.Linq.Table<Source> Sources
        {
            get
            {
                return this.GetTable<Source>();
            }
        }

        public Devart.Data.Linq.Table<Specy> Species
        {
            get
            {
                return this.GetTable<Specy>();
            }
        }

        public Devart.Data.Linq.Table<Time> Times
        {
            get
            {
                return this.GetTable<Time>();
            }
        }

        public Devart.Data.Linq.Table<Timestep> Timesteps
        {
            get
            {
                return this.GetTable<Timestep>();
            }
        }
    }


    /// <summary>
    /// There are no comments for Animatlocation in the schema.
    /// </summary>
    [Table(Name = @"simulation_output.animatlocations")]
    public partial class Animatlocation : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _AnimatLocation_id;

        private long _Simulation_id;

        private long _Animat_id;

        private long _Timestep_id;

        private float _Latitude_deg;

        private float _Longitude_deg;

        private float _Depth_m;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAnimatLocation_idChanging(long value);
        partial void OnAnimatLocation_idChanged();
        partial void OnSimulation_idChanging(long value);
        partial void OnSimulation_idChanged();
        partial void OnAnimat_idChanging(long value);
        partial void OnAnimat_idChanged();
        partial void OnTimestep_idChanging(long value);
        partial void OnTimestep_idChanged();
        partial void OnLatitude_degChanging(float value);
        partial void OnLatitude_degChanged();
        partial void OnLongitude_degChanging(float value);
        partial void OnLongitude_degChanged();
        partial void OnDepth_mChanging(float value);
        partial void OnDepth_mChanged();
        #endregion

        public Animatlocation()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for AnimatLocation_id in the schema.
        /// </summary>
        [Column(Storage = "_AnimatLocation_id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long AnimatLocation_id
        {
            get
            {
                return this._AnimatLocation_id;
            }
            set
            {
                if (this._AnimatLocation_id != value)
                {
                    this.OnAnimatLocation_idChanging(value);
                    this.SendPropertyChanging();
                    this._AnimatLocation_id = value;
                    this.SendPropertyChanged("AnimatLocation_id");
                    this.OnAnimatLocation_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Simulation_id in the schema.
        /// </summary>
        [Column(Storage = "_Simulation_id", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Simulation_id
        {
            get
            {
                return this._Simulation_id;
            }
            set
            {
                if (this._Simulation_id != value)
                {
                    this.OnSimulation_idChanging(value);
                    this.SendPropertyChanging();
                    this._Simulation_id = value;
                    this.SendPropertyChanged("Simulation_id");
                    this.OnSimulation_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Animat_id in the schema.
        /// </summary>
        [Column(Storage = "_Animat_id", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Animat_id
        {
            get
            {
                return this._Animat_id;
            }
            set
            {
                if (this._Animat_id != value)
                {
                    this.OnAnimat_idChanging(value);
                    this.SendPropertyChanging();
                    this._Animat_id = value;
                    this.SendPropertyChanged("Animat_id");
                    this.OnAnimat_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Timestep_id in the schema.
        /// </summary>
        [Column(Storage = "_Timestep_id", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Timestep_id
        {
            get
            {
                return this._Timestep_id;
            }
            set
            {
                if (this._Timestep_id != value)
                {
                    this.OnTimestep_idChanging(value);
                    this.SendPropertyChanging();
                    this._Timestep_id = value;
                    this.SendPropertyChanged("Timestep_id");
                    this.OnTimestep_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Latitude_deg in the schema.
        /// </summary>
        [Column(Storage = "_Latitude_deg", CanBeNull = false, DbType = "float NOT NULL")]
        public float Latitude_deg
        {
            get
            {
                return this._Latitude_deg;
            }
            set
            {
                if (this._Latitude_deg != value)
                {
                    this.OnLatitude_degChanging(value);
                    this.SendPropertyChanging();
                    this._Latitude_deg = value;
                    this.SendPropertyChanged("Latitude_deg");
                    this.OnLatitude_degChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Longitude_deg in the schema.
        /// </summary>
        [Column(Storage = "_Longitude_deg", CanBeNull = false, DbType = "float NOT NULL")]
        public float Longitude_deg
        {
            get
            {
                return this._Longitude_deg;
            }
            set
            {
                if (this._Longitude_deg != value)
                {
                    this.OnLongitude_degChanging(value);
                    this.SendPropertyChanging();
                    this._Longitude_deg = value;
                    this.SendPropertyChanged("Longitude_deg");
                    this.OnLongitude_degChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Depth_m in the schema.
        /// </summary>
        [Column(Storage = "_Depth_m", CanBeNull = false, DbType = "float NOT NULL")]
        public float Depth_m
        {
            get
            {
                return this._Depth_m;
            }
            set
            {
                if (this._Depth_m != value)
                {
                    this.OnDepth_mChanging(value);
                    this.SendPropertyChanging();
                    this._Depth_m = value;
                    this.SendPropertyChanged("Depth_m");
                    this.OnDepth_mChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }


    /// <summary>
    /// There are no comments for Animat in the schema.
    /// </summary>
    [Table(Name = @"simulation_output.animats")]
    public partial class Animat : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Animat_id;

        private long _Simulation_id;

        private long _Species_id;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAnimat_idChanging(long value);
        partial void OnAnimat_idChanged();
        partial void OnSimulation_idChanging(long value);
        partial void OnSimulation_idChanged();
        partial void OnSpecies_idChanging(long value);
        partial void OnSpecies_idChanged();
        #endregion

        public Animat()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Animat_id in the schema.
        /// </summary>
        [Column(Storage = "_Animat_id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Animat_id
        {
            get
            {
                return this._Animat_id;
            }
            set
            {
                if (this._Animat_id != value)
                {
                    this.OnAnimat_idChanging(value);
                    this.SendPropertyChanging();
                    this._Animat_id = value;
                    this.SendPropertyChanged("Animat_id");
                    this.OnAnimat_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Simulation_id in the schema.
        /// </summary>
        [Column(Storage = "_Simulation_id", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Simulation_id
        {
            get
            {
                return this._Simulation_id;
            }
            set
            {
                if (this._Simulation_id != value)
                {
                    this.OnSimulation_idChanging(value);
                    this.SendPropertyChanging();
                    this._Simulation_id = value;
                    this.SendPropertyChanged("Simulation_id");
                    this.OnSimulation_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Species_id in the schema.
        /// </summary>
        [Column(Storage = "_Species_id", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Species_id
        {
            get
            {
                return this._Species_id;
            }
            set
            {
                if (this._Species_id != value)
                {
                    this.OnSpecies_idChanging(value);
                    this.SendPropertyChanging();
                    this._Species_id = value;
                    this.SendPropertyChanged("Species_id");
                    this.OnSpecies_idChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }


    /// <summary>
    /// There are no comments for Exposure in the schema.
    /// </summary>
    [Table(Name = @"simulation_output.exposures")]
    public partial class Exposure : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Exposure_id;

        private long _Simulation_id;

        private long _AnimatLocation_id;

        private long _SourceLocation_id;

        private float _ReceivedLevel_dB;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnExposure_idChanging(long value);
        partial void OnExposure_idChanged();
        partial void OnSimulation_idChanging(long value);
        partial void OnSimulation_idChanged();
        partial void OnAnimatLocation_idChanging(long value);
        partial void OnAnimatLocation_idChanged();
        partial void OnSourceLocation_idChanging(long value);
        partial void OnSourceLocation_idChanged();
        partial void OnReceivedLevel_dBChanging(float value);
        partial void OnReceivedLevel_dBChanged();
        #endregion

        public Exposure()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Exposure_id in the schema.
        /// </summary>
        [Column(Storage = "_Exposure_id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Exposure_id
        {
            get
            {
                return this._Exposure_id;
            }
            set
            {
                if (this._Exposure_id != value)
                {
                    this.OnExposure_idChanging(value);
                    this.SendPropertyChanging();
                    this._Exposure_id = value;
                    this.SendPropertyChanged("Exposure_id");
                    this.OnExposure_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Simulation_id in the schema.
        /// </summary>
        [Column(Storage = "_Simulation_id", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Simulation_id
        {
            get
            {
                return this._Simulation_id;
            }
            set
            {
                if (this._Simulation_id != value)
                {
                    this.OnSimulation_idChanging(value);
                    this.SendPropertyChanging();
                    this._Simulation_id = value;
                    this.SendPropertyChanged("Simulation_id");
                    this.OnSimulation_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AnimatLocation_id in the schema.
        /// </summary>
        [Column(Storage = "_AnimatLocation_id", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long AnimatLocation_id
        {
            get
            {
                return this._AnimatLocation_id;
            }
            set
            {
                if (this._AnimatLocation_id != value)
                {
                    this.OnAnimatLocation_idChanging(value);
                    this.SendPropertyChanging();
                    this._AnimatLocation_id = value;
                    this.SendPropertyChanged("AnimatLocation_id");
                    this.OnAnimatLocation_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SourceLocation_id in the schema.
        /// </summary>
        [Column(Storage = "_SourceLocation_id", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long SourceLocation_id
        {
            get
            {
                return this._SourceLocation_id;
            }
            set
            {
                if (this._SourceLocation_id != value)
                {
                    this.OnSourceLocation_idChanging(value);
                    this.SendPropertyChanging();
                    this._SourceLocation_id = value;
                    this.SendPropertyChanged("SourceLocation_id");
                    this.OnSourceLocation_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReceivedLevel_dB in the schema.
        /// </summary>
        [Column(Storage = "_ReceivedLevel_dB", CanBeNull = false, DbType = "float NOT NULL")]
        public float ReceivedLevel_dB
        {
            get
            {
                return this._ReceivedLevel_dB;
            }
            set
            {
                if (this._ReceivedLevel_dB != value)
                {
                    this.OnReceivedLevel_dBChanging(value);
                    this.SendPropertyChanging();
                    this._ReceivedLevel_dB = value;
                    this.SendPropertyChanged("ReceivedLevel_dB");
                    this.OnReceivedLevel_dBChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }


    /// <summary>
    /// There are no comments for Platformlocation in the schema.
    /// </summary>
    [Table(Name = @"simulation_output.platformlocations")]
    public partial class Platformlocation : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _PlatformLocation_id;

        private long _Simulation_id;

        private long _Platform_id;

        private long _Timestep_id;

        private float _Latitude_deg;

        private float _Longitude_deg;

        private float _Depth_m;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPlatformLocation_idChanging(long value);
        partial void OnPlatformLocation_idChanged();
        partial void OnSimulation_idChanging(long value);
        partial void OnSimulation_idChanged();
        partial void OnPlatform_idChanging(long value);
        partial void OnPlatform_idChanged();
        partial void OnTimestep_idChanging(long value);
        partial void OnTimestep_idChanged();
        partial void OnLatitude_degChanging(float value);
        partial void OnLatitude_degChanged();
        partial void OnLongitude_degChanging(float value);
        partial void OnLongitude_degChanged();
        partial void OnDepth_mChanging(float value);
        partial void OnDepth_mChanged();
        #endregion

        public Platformlocation()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PlatformLocation_id in the schema.
        /// </summary>
        [Column(Storage = "_PlatformLocation_id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long PlatformLocation_id
        {
            get
            {
                return this._PlatformLocation_id;
            }
            set
            {
                if (this._PlatformLocation_id != value)
                {
                    this.OnPlatformLocation_idChanging(value);
                    this.SendPropertyChanging();
                    this._PlatformLocation_id = value;
                    this.SendPropertyChanged("PlatformLocation_id");
                    this.OnPlatformLocation_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Simulation_id in the schema.
        /// </summary>
        [Column(Storage = "_Simulation_id", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Simulation_id
        {
            get
            {
                return this._Simulation_id;
            }
            set
            {
                if (this._Simulation_id != value)
                {
                    this.OnSimulation_idChanging(value);
                    this.SendPropertyChanging();
                    this._Simulation_id = value;
                    this.SendPropertyChanged("Simulation_id");
                    this.OnSimulation_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Platform_id in the schema.
        /// </summary>
        [Column(Storage = "_Platform_id", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Platform_id
        {
            get
            {
                return this._Platform_id;
            }
            set
            {
                if (this._Platform_id != value)
                {
                    this.OnPlatform_idChanging(value);
                    this.SendPropertyChanging();
                    this._Platform_id = value;
                    this.SendPropertyChanged("Platform_id");
                    this.OnPlatform_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Timestep_id in the schema.
        /// </summary>
        [Column(Storage = "_Timestep_id", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Timestep_id
        {
            get
            {
                return this._Timestep_id;
            }
            set
            {
                if (this._Timestep_id != value)
                {
                    this.OnTimestep_idChanging(value);
                    this.SendPropertyChanging();
                    this._Timestep_id = value;
                    this.SendPropertyChanged("Timestep_id");
                    this.OnTimestep_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Latitude_deg in the schema.
        /// </summary>
        [Column(Storage = "_Latitude_deg", CanBeNull = false, DbType = "float NOT NULL")]
        public float Latitude_deg
        {
            get
            {
                return this._Latitude_deg;
            }
            set
            {
                if (this._Latitude_deg != value)
                {
                    this.OnLatitude_degChanging(value);
                    this.SendPropertyChanging();
                    this._Latitude_deg = value;
                    this.SendPropertyChanged("Latitude_deg");
                    this.OnLatitude_degChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Longitude_deg in the schema.
        /// </summary>
        [Column(Storage = "_Longitude_deg", CanBeNull = false, DbType = "float NOT NULL")]
        public float Longitude_deg
        {
            get
            {
                return this._Longitude_deg;
            }
            set
            {
                if (this._Longitude_deg != value)
                {
                    this.OnLongitude_degChanging(value);
                    this.SendPropertyChanging();
                    this._Longitude_deg = value;
                    this.SendPropertyChanged("Longitude_deg");
                    this.OnLongitude_degChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Depth_m in the schema.
        /// </summary>
        [Column(Storage = "_Depth_m", CanBeNull = false, DbType = "float NOT NULL")]
        public float Depth_m
        {
            get
            {
                return this._Depth_m;
            }
            set
            {
                if (this._Depth_m != value)
                {
                    this.OnDepth_mChanging(value);
                    this.SendPropertyChanging();
                    this._Depth_m = value;
                    this.SendPropertyChanged("Depth_m");
                    this.OnDepth_mChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }


    /// <summary>
    /// There are no comments for Platform in the schema.
    /// </summary>
    [Table(Name = @"simulation_output.platforms")]
    public partial class Platform : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Platform_id;

        private long _Simulation_id;

        private string _Name;

        private string _Metadata;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPlatform_idChanging(long value);
        partial void OnPlatform_idChanged();
        partial void OnSimulation_idChanging(long value);
        partial void OnSimulation_idChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnMetadataChanging(string value);
        partial void OnMetadataChanged();
        #endregion

        public Platform()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Platform_id in the schema.
        /// </summary>
        [Column(Storage = "_Platform_id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Platform_id
        {
            get
            {
                return this._Platform_id;
            }
            set
            {
                if (this._Platform_id != value)
                {
                    this.OnPlatform_idChanging(value);
                    this.SendPropertyChanging();
                    this._Platform_id = value;
                    this.SendPropertyChanged("Platform_id");
                    this.OnPlatform_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Simulation_id in the schema.
        /// </summary>
        [Column(Storage = "_Simulation_id", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Simulation_id
        {
            get
            {
                return this._Simulation_id;
            }
            set
            {
                if (this._Simulation_id != value)
                {
                    this.OnSimulation_idChanging(value);
                    this.SendPropertyChanging();
                    this._Simulation_id = value;
                    this.SendPropertyChanged("Simulation_id");
                    this.OnSimulation_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "varchar(45) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Metadata in the schema.
        /// </summary>
        [Column(Storage = "_Metadata", CanBeNull = false, DbType = "text NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Metadata
        {
            get
            {
                return this._Metadata;
            }
            set
            {
                if (this._Metadata != value)
                {
                    this.OnMetadataChanging(value);
                    this.SendPropertyChanging();
                    this._Metadata = value;
                    this.SendPropertyChanged("Metadata");
                    this.OnMetadataChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }


    /// <summary>
    /// There are no comments for Simulation in the schema.
    /// </summary>
    [Table(Name = @"simulation_output.simulations")]
    public partial class Simulation : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Simulation_id;

        private string _Title;

        private System.DateTime _RunStarted;

        private System.DateTime _RunFinished;

        private string _RunStatus;

        private long _TimestepInterval_ms;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSimulation_idChanging(long value);
        partial void OnSimulation_idChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnRunStartedChanging(System.DateTime value);
        partial void OnRunStartedChanged();
        partial void OnRunFinishedChanging(System.DateTime value);
        partial void OnRunFinishedChanged();
        partial void OnRunStatusChanging(string value);
        partial void OnRunStatusChanged();
        partial void OnTimestepInterval_msChanging(long value);
        partial void OnTimestepInterval_msChanged();
        #endregion

        public Simulation()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Simulation_id in the schema.
        /// </summary>
        [Column(Storage = "_Simulation_id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Simulation_id
        {
            get
            {
                return this._Simulation_id;
            }
            set
            {
                if (this._Simulation_id != value)
                {
                    this.OnSimulation_idChanging(value);
                    this.SendPropertyChanging();
                    this._Simulation_id = value;
                    this.SendPropertyChanged("Simulation_id");
                    this.OnSimulation_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [Column(Storage = "_Title", CanBeNull = false, DbType = "varchar(45) NOT NULL")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RunStarted in the schema.
        /// </summary>
        [Column(Storage = "_RunStarted", CanBeNull = false, DbType = "datetime NOT NULL")]
        public System.DateTime RunStarted
        {
            get
            {
                return this._RunStarted;
            }
            set
            {
                if (this._RunStarted != value)
                {
                    this.OnRunStartedChanging(value);
                    this.SendPropertyChanging();
                    this._RunStarted = value;
                    this.SendPropertyChanged("RunStarted");
                    this.OnRunStartedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RunFinished in the schema.
        /// </summary>
        [Column(Storage = "_RunFinished", CanBeNull = false, DbType = "datetime NOT NULL")]
        public System.DateTime RunFinished
        {
            get
            {
                return this._RunFinished;
            }
            set
            {
                if (this._RunFinished != value)
                {
                    this.OnRunFinishedChanging(value);
                    this.SendPropertyChanging();
                    this._RunFinished = value;
                    this.SendPropertyChanged("RunFinished");
                    this.OnRunFinishedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RunStatus in the schema.
        /// </summary>
        [Column(Storage = "_RunStatus", CanBeNull = false, DbType = "varchar(45) NOT NULL")]
        public string RunStatus
        {
            get
            {
                return this._RunStatus;
            }
            set
            {
                if (this._RunStatus != value)
                {
                    this.OnRunStatusChanging(value);
                    this.SendPropertyChanging();
                    this._RunStatus = value;
                    this.SendPropertyChanged("RunStatus");
                    this.OnRunStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TimestepInterval_ms in the schema.
        /// </summary>
        [Column(Storage = "_TimestepInterval_ms", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long TimestepInterval_ms
        {
            get
            {
                return this._TimestepInterval_ms;
            }
            set
            {
                if (this._TimestepInterval_ms != value)
                {
                    this.OnTimestepInterval_msChanging(value);
                    this.SendPropertyChanging();
                    this._TimestepInterval_ms = value;
                    this.SendPropertyChanged("TimestepInterval_ms");
                    this.OnTimestepInterval_msChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }


    /// <summary>
    /// There are no comments for Sourcelocation in the schema.
    /// </summary>
    [Table(Name = @"simulation_output.sourcelocations")]
    public partial class Sourcelocation : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _SourceLocation_id;

        private long _Simulation_id;

        private long _PlatformLocation_id;

        private long _Source_id;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSourceLocation_idChanging(long value);
        partial void OnSourceLocation_idChanged();
        partial void OnSimulation_idChanging(long value);
        partial void OnSimulation_idChanged();
        partial void OnPlatformLocation_idChanging(long value);
        partial void OnPlatformLocation_idChanged();
        partial void OnSource_idChanging(long value);
        partial void OnSource_idChanged();
        #endregion

        public Sourcelocation()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for SourceLocation_id in the schema.
        /// </summary>
        [Column(Storage = "_SourceLocation_id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long SourceLocation_id
        {
            get
            {
                return this._SourceLocation_id;
            }
            set
            {
                if (this._SourceLocation_id != value)
                {
                    this.OnSourceLocation_idChanging(value);
                    this.SendPropertyChanging();
                    this._SourceLocation_id = value;
                    this.SendPropertyChanged("SourceLocation_id");
                    this.OnSourceLocation_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Simulation_id in the schema.
        /// </summary>
        [Column(Storage = "_Simulation_id", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Simulation_id
        {
            get
            {
                return this._Simulation_id;
            }
            set
            {
                if (this._Simulation_id != value)
                {
                    this.OnSimulation_idChanging(value);
                    this.SendPropertyChanging();
                    this._Simulation_id = value;
                    this.SendPropertyChanged("Simulation_id");
                    this.OnSimulation_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PlatformLocation_id in the schema.
        /// </summary>
        [Column(Storage = "_PlatformLocation_id", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long PlatformLocation_id
        {
            get
            {
                return this._PlatformLocation_id;
            }
            set
            {
                if (this._PlatformLocation_id != value)
                {
                    this.OnPlatformLocation_idChanging(value);
                    this.SendPropertyChanging();
                    this._PlatformLocation_id = value;
                    this.SendPropertyChanged("PlatformLocation_id");
                    this.OnPlatformLocation_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Source_id in the schema.
        /// </summary>
        [Column(Storage = "_Source_id", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Source_id
        {
            get
            {
                return this._Source_id;
            }
            set
            {
                if (this._Source_id != value)
                {
                    this.OnSource_idChanging(value);
                    this.SendPropertyChanging();
                    this._Source_id = value;
                    this.SendPropertyChanged("Source_id");
                    this.OnSource_idChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }


    /// <summary>
    /// There are no comments for Source in the schema.
    /// </summary>
    [Table(Name = @"simulation_output.sources")]
    public partial class Source : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _ActiveMode_id;

        private long _Simulation_id;

        private float _HighFreq_Hz;

        private float _LowFreq_Hz;

        private float _SourceLevel_dB;

        private string _Name;

        private float _Depth_m;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnActiveMode_idChanging(long value);
        partial void OnActiveMode_idChanged();
        partial void OnSimulation_idChanging(long value);
        partial void OnSimulation_idChanged();
        partial void OnHighFreq_HzChanging(float value);
        partial void OnHighFreq_HzChanged();
        partial void OnLowFreq_HzChanging(float value);
        partial void OnLowFreq_HzChanged();
        partial void OnSourceLevel_dBChanging(float value);
        partial void OnSourceLevel_dBChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDepth_mChanging(float value);
        partial void OnDepth_mChanged();
        #endregion

        public Source()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ActiveMode_id in the schema.
        /// </summary>
        [Column(Storage = "_ActiveMode_id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long ActiveMode_id
        {
            get
            {
                return this._ActiveMode_id;
            }
            set
            {
                if (this._ActiveMode_id != value)
                {
                    this.OnActiveMode_idChanging(value);
                    this.SendPropertyChanging();
                    this._ActiveMode_id = value;
                    this.SendPropertyChanged("ActiveMode_id");
                    this.OnActiveMode_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Simulation_id in the schema.
        /// </summary>
        [Column(Storage = "_Simulation_id", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Simulation_id
        {
            get
            {
                return this._Simulation_id;
            }
            set
            {
                if (this._Simulation_id != value)
                {
                    this.OnSimulation_idChanging(value);
                    this.SendPropertyChanging();
                    this._Simulation_id = value;
                    this.SendPropertyChanged("Simulation_id");
                    this.OnSimulation_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HighFreq_Hz in the schema.
        /// </summary>
        [Column(Storage = "_HighFreq_Hz", CanBeNull = false, DbType = "float NOT NULL")]
        public float HighFreq_Hz
        {
            get
            {
                return this._HighFreq_Hz;
            }
            set
            {
                if (this._HighFreq_Hz != value)
                {
                    this.OnHighFreq_HzChanging(value);
                    this.SendPropertyChanging();
                    this._HighFreq_Hz = value;
                    this.SendPropertyChanged("HighFreq_Hz");
                    this.OnHighFreq_HzChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LowFreq_Hz in the schema.
        /// </summary>
        [Column(Storage = "_LowFreq_Hz", CanBeNull = false, DbType = "float NOT NULL")]
        public float LowFreq_Hz
        {
            get
            {
                return this._LowFreq_Hz;
            }
            set
            {
                if (this._LowFreq_Hz != value)
                {
                    this.OnLowFreq_HzChanging(value);
                    this.SendPropertyChanging();
                    this._LowFreq_Hz = value;
                    this.SendPropertyChanged("LowFreq_Hz");
                    this.OnLowFreq_HzChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SourceLevel_dB in the schema.
        /// </summary>
        [Column(Storage = "_SourceLevel_dB", CanBeNull = false, DbType = "float NOT NULL")]
        public float SourceLevel_dB
        {
            get
            {
                return this._SourceLevel_dB;
            }
            set
            {
                if (this._SourceLevel_dB != value)
                {
                    this.OnSourceLevel_dBChanging(value);
                    this.SendPropertyChanging();
                    this._SourceLevel_dB = value;
                    this.SendPropertyChanged("SourceLevel_dB");
                    this.OnSourceLevel_dBChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "varchar(45) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Depth_m in the schema.
        /// </summary>
        [Column(Storage = "_Depth_m", CanBeNull = false, DbType = "float NOT NULL")]
        public float Depth_m
        {
            get
            {
                return this._Depth_m;
            }
            set
            {
                if (this._Depth_m != value)
                {
                    this.OnDepth_mChanging(value);
                    this.SendPropertyChanging();
                    this._Depth_m = value;
                    this.SendPropertyChanged("Depth_m");
                    this.OnDepth_mChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }


    /// <summary>
    /// There are no comments for Specy in the schema.
    /// </summary>
    [Table(Name = @"simulation_output.species")]
    public partial class Specy : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Species_id;

        private string _Name;

        private string _File;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSpecies_idChanging(long value);
        partial void OnSpecies_idChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnFileChanging(string value);
        partial void OnFileChanged();
        #endregion

        public Specy()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Species_id in the schema.
        /// </summary>
        [Column(Storage = "_Species_id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Species_id
        {
            get
            {
                return this._Species_id;
            }
            set
            {
                if (this._Species_id != value)
                {
                    this.OnSpecies_idChanging(value);
                    this.SendPropertyChanging();
                    this._Species_id = value;
                    this.SendPropertyChanged("Species_id");
                    this.OnSpecies_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "varchar(45) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for File in the schema.
        /// </summary>
        [Column(Storage = "_File", CanBeNull = false, DbType = "varchar(45) NOT NULL")]
        public string File
        {
            get
            {
                return this._File;
            }
            set
            {
                if (this._File != value)
                {
                    this.OnFileChanging(value);
                    this.SendPropertyChanging();
                    this._File = value;
                    this.SendPropertyChanged("File");
                    this.OnFileChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }


    /// <summary>
    /// There are no comments for Time in the schema.
    /// </summary>
    [Table(Name = @"simulation_output.times")]
    public partial class Time : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Timestep_id;

        private System.DateTime _SimulationTime;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTimestep_idChanging(long value);
        partial void OnTimestep_idChanged();
        partial void OnSimulationTimeChanging(System.DateTime value);
        partial void OnSimulationTimeChanged();
        #endregion

        public Time()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Timestep_id in the schema.
        /// </summary>
        [Column(Storage = "_Timestep_id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Timestep_id
        {
            get
            {
                return this._Timestep_id;
            }
            set
            {
                if (this._Timestep_id != value)
                {
                    this.OnTimestep_idChanging(value);
                    this.SendPropertyChanging();
                    this._Timestep_id = value;
                    this.SendPropertyChanged("Timestep_id");
                    this.OnTimestep_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SimulationTime in the schema.
        /// </summary>
        [Column(Storage = "_SimulationTime", CanBeNull = false, DbType = "datetime NOT NULL")]
        public System.DateTime SimulationTime
        {
            get
            {
                return this._SimulationTime;
            }
            set
            {
                if (this._SimulationTime != value)
                {
                    this.OnSimulationTimeChanging(value);
                    this.SendPropertyChanging();
                    this._SimulationTime = value;
                    this.SendPropertyChanged("SimulationTime");
                    this.OnSimulationTimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }


    /// <summary>
    /// There are no comments for Timestep in the schema.
    /// </summary>
    [Table(Name = @"simulation_output.timesteps")]
    public partial class Timestep : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Timestep_id;

        private long _Simulation_id;

        private System.DateTime _SimulationTime;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTimestep_idChanging(long value);
        partial void OnTimestep_idChanged();
        partial void OnSimulation_idChanging(long value);
        partial void OnSimulation_idChanged();
        partial void OnSimulationTimeChanging(System.DateTime value);
        partial void OnSimulationTimeChanged();
        #endregion

        public Timestep()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Timestep_id in the schema.
        /// </summary>
        [Column(Storage = "_Timestep_id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(10) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Timestep_id
        {
            get
            {
                return this._Timestep_id;
            }
            set
            {
                if (this._Timestep_id != value)
                {
                    this.OnTimestep_idChanging(value);
                    this.SendPropertyChanging();
                    this._Timestep_id = value;
                    this.SendPropertyChanged("Timestep_id");
                    this.OnTimestep_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Simulation_id in the schema.
        /// </summary>
        [Column(Storage = "_Simulation_id", CanBeNull = false, DbType = "int(10) NOT NULL")]
        public long Simulation_id
        {
            get
            {
                return this._Simulation_id;
            }
            set
            {
                if (this._Simulation_id != value)
                {
                    this.OnSimulation_idChanging(value);
                    this.SendPropertyChanging();
                    this._Simulation_id = value;
                    this.SendPropertyChanged("Simulation_id");
                    this.OnSimulation_idChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SimulationTime in the schema.
        /// </summary>
        [Column(Storage = "_SimulationTime", CanBeNull = false, DbType = "datetime NOT NULL")]
        public System.DateTime SimulationTime
        {
            get
            {
                return this._SimulationTime;
            }
            set
            {
                if (this._SimulationTime != value)
                {
                    this.OnSimulationTimeChanging(value);
                    this.SendPropertyChanging();
                    this._SimulationTime = value;
                    this.SendPropertyChanged("SimulationTime");
                    this.OnSimulationTimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
