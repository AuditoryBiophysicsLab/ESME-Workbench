//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2/23/2012 12:23:30 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace MainContext
{

    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "main")]
    [ProviderAttribute(typeof(Devart.Data.SQLite.Linq.Provider.SQLiteDataProvider))]
    public partial class MainDataContext : Devart.Data.Linq.DataContext
    {
        public static Devart.Data.Linq.CompiledQueryCache compiledQueryCache = Devart.Data.Linq.CompiledQueryCache.RegisterDataContext(typeof(MainDataContext));
        private static System.Data.Linq.Mapping.MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);

        partial void InsertEdmMetadata(EdmMetadata instance);
        partial void UpdateEdmMetadata(EdmMetadata instance);
        partial void DeleteEdmMetadata(EdmMetadata instance);
        partial void InsertProduct(Product instance);
        partial void UpdateProduct(Product instance);
        partial void DeleteProduct(Product instance);
        partial void InsertProductCategory(ProductCategory instance);
        partial void UpdateProductCategory(ProductCategory instance);
        partial void DeleteProductCategory(ProductCategory instance);
        partial void InsertOrderDetail(OrderDetail instance);
        partial void UpdateOrderDetail(OrderDetail instance);
        partial void DeleteOrderDetail(OrderDetail instance);
        partial void InsertOrder(Order instance);
        partial void UpdateOrder(Order instance);
        partial void DeleteOrder(Order instance);
        partial void InsertPersonContact(PersonContact instance);
        partial void UpdatePersonContact(PersonContact instance);
        partial void DeletePersonContact(PersonContact instance);
        partial void InsertCompany(Company instance);
        partial void UpdateCompany(Company instance);
        partial void DeleteCompany(Company instance);

        #endregion

        public MainDataContext() :
        base(GetConnectionString("MainDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public MainDataContext(System.Data.Linq.Mapping.MappingSource mappingSource) :
        base(GetConnectionString("MainDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public MainDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MainDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MainDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MainDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<EdmMetadata> EdmMetadatas
        {
            get
            {
                return this.GetTable<EdmMetadata>();
            }
        }

        public Devart.Data.Linq.Table<Product> Products
        {
            get
            {
                return this.GetTable<Product>();
            }
        }

        public Devart.Data.Linq.Table<ProductCategory> ProductCategories
        {
            get
            {
                return this.GetTable<ProductCategory>();
            }
        }

        public Devart.Data.Linq.Table<OrderDetail> OrderDetails
        {
            get
            {
                return this.GetTable<OrderDetail>();
            }
        }

        public Devart.Data.Linq.Table<Order> Orders
        {
            get
            {
                return this.GetTable<Order>();
            }
        }

        public Devart.Data.Linq.Table<PersonContact> PersonContacts
        {
            get
            {
                return this.GetTable<PersonContact>();
            }
        }

        public Devart.Data.Linq.Table<Company> Companies
        {
            get
            {
                return this.GetTable<Company>();
            }
        }
    }

    /// <summary>
    /// There are no comments for EdmMetadata in the schema.
    /// </summary>
    [Table(Name = @"""main"".EdmMetadata")]
    public partial class EdmMetadata : INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private int _Id;

        private string _ModelHash;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnModelHashChanging(string value);
        partial void OnModelHashChanged();
        #endregion

        public EdmMetadata()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModelHash in the schema.
        /// </summary>
        [Column(Storage = "_ModelHash", DbType = "VARCHAR")]
        public string ModelHash
        {
            get
            {
                return this._ModelHash;
            }
            set
            {
                if (this._ModelHash != value)
                {
                    this.OnModelHashChanging(value);
                    this.SendPropertyChanging();
                    this._ModelHash = value;
                    this.SendPropertyChanged("ModelHash");
                    this.OnModelHashChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Product in the schema.
    /// </summary>
    [Table(Name = @"""main"".Product")]
    public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private int _ProductID;

        private string _ProductName;

        private string _UnitName;

        private int _UnitScale;

        private int _InStock;

        private float _Price;

        private float _DiscontinuedPrice;

        private System.Nullable<int> _CategoryCategoryID;

        private EntityRef<ProductCategory> _ProductCategory;

        private EntitySet<OrderDetail> _OrderDetails;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnUnitNameChanging(string value);
        partial void OnUnitNameChanged();
        partial void OnUnitScaleChanging(int value);
        partial void OnUnitScaleChanged();
        partial void OnInStockChanging(int value);
        partial void OnInStockChanged();
        partial void OnPriceChanging(float value);
        partial void OnPriceChanged();
        partial void OnDiscontinuedPriceChanging(float value);
        partial void OnDiscontinuedPriceChanged();
        partial void OnCategoryCategoryIDChanging(System.Nullable<int> value);
        partial void OnCategoryCategoryIDChanged();
        #endregion

        public Product()
        {
            this._ProductCategory  = default(EntityRef<ProductCategory>);
            this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductID in the schema.
        /// </summary>
        [Column(Storage = "_ProductID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ProductID
        {
            get
            {
                return this._ProductID;
            }
            set
            {
                if (this._ProductID != value)
                {
                    this.OnProductIDChanging(value);
                    this.SendPropertyChanging();
                    this._ProductID = value;
                    this.SendPropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductName in the schema.
        /// </summary>
        [Column(Storage = "_ProductName", CanBeNull = false, DbType = "VARCHAR NOT NULL")]
        public string ProductName
        {
            get
            {
                return this._ProductName;
            }
            set
            {
                if (this._ProductName != value)
                {
                    this.OnProductNameChanging(value);
                    this.SendPropertyChanging();
                    this._ProductName = value;
                    this.SendPropertyChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitName in the schema.
        /// </summary>
        [Column(Storage = "_UnitName", DbType = "VARCHAR")]
        public string UnitName
        {
            get
            {
                return this._UnitName;
            }
            set
            {
                if (this._UnitName != value)
                {
                    this.OnUnitNameChanging(value);
                    this.SendPropertyChanging();
                    this._UnitName = value;
                    this.SendPropertyChanged("UnitName");
                    this.OnUnitNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitScale in the schema.
        /// </summary>
        [Column(Storage = "_UnitScale", CanBeNull = false, DbType = "INTEGER NOT NULL")]
        public int UnitScale
        {
            get
            {
                return this._UnitScale;
            }
            set
            {
                if (this._UnitScale != value)
                {
                    this.OnUnitScaleChanging(value);
                    this.SendPropertyChanging();
                    this._UnitScale = value;
                    this.SendPropertyChanged("UnitScale");
                    this.OnUnitScaleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InStock in the schema.
        /// </summary>
        [Column(Storage = "_InStock", CanBeNull = false, DbType = "INTEGER NOT NULL")]
        public int InStock
        {
            get
            {
                return this._InStock;
            }
            set
            {
                if (this._InStock != value)
                {
                    this.OnInStockChanging(value);
                    this.SendPropertyChanging();
                    this._InStock = value;
                    this.SendPropertyChanged("InStock");
                    this.OnInStockChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Storage = "_Price", CanBeNull = false, DbType = "REAL NOT NULL")]
        public float Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DiscontinuedPrice in the schema.
        /// </summary>
        [Column(Storage = "_DiscontinuedPrice", CanBeNull = false, DbType = "REAL NOT NULL")]
        public float DiscontinuedPrice
        {
            get
            {
                return this._DiscontinuedPrice;
            }
            set
            {
                if (this._DiscontinuedPrice != value)
                {
                    this.OnDiscontinuedPriceChanging(value);
                    this.SendPropertyChanging();
                    this._DiscontinuedPrice = value;
                    this.SendPropertyChanged("DiscontinuedPrice");
                    this.OnDiscontinuedPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryCategoryID in the schema.
        /// </summary>
        [Column(Name = @"Category_CategoryID", Storage = "_CategoryCategoryID", DbType = "INTEGER")]
        public System.Nullable<int> CategoryCategoryID
        {
            get
            {
                return this._CategoryCategoryID;
            }
            set
            {
                if (this._CategoryCategoryID != value)
                {
                    if (this._ProductCategory.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCategoryCategoryIDChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryCategoryID = value;
                    this.SendPropertyChanged("CategoryCategoryID");
                    this.OnCategoryCategoryIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductCategory in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductCategory_Product", Storage="_ProductCategory", ThisKey="CategoryCategoryID", IsForeignKey=true)]
        public ProductCategory ProductCategory
        {
            get
            {
                return this._ProductCategory.Entity;
            }
            set
            {
                ProductCategory previousValue = this._ProductCategory.Entity;
                if ((previousValue != value) || (this._ProductCategory.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._ProductCategory.Entity = null;
                        previousValue.Products.Remove(this);
                    }
                    this._ProductCategory.Entity = value;
                    if (value != null)
                    {
                        this._CategoryCategoryID = value.CategoryID;
                        value.Products.Add(this);
                    }
                    else
                    {
                        this._CategoryCategoryID = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("ProductCategory");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_OrderDetail", Storage="_OrderDetails", OtherKey="ProductID", DeleteRule="CASCADE")]
        public EntitySet<OrderDetail> OrderDetails
        {
            get
            {
                return this._OrderDetails;
            }
            set
            {
                this._OrderDetails.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_OrderDetails(OrderDetail entity)
        {
            this.SendPropertyChanging("OrderDetails");
            entity.Product = this;
        }
    
        private void detach_OrderDetails(OrderDetail entity)
        {
            this.SendPropertyChanging("OrderDetails");
            entity.Product = null;
        }
    }

    /// <summary>
    /// There are no comments for ProductCategory in the schema.
    /// </summary>
    [Table(Name = @"""main"".ProductCategory")]
    public partial class ProductCategory : INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private int _CategoryID;

        private string _CategoryName;

        private System.Nullable<int> _ParentCategoryCategoryID;

        private EntitySet<Product> _Products;

        private EntitySet<ProductCategory> _ProductCategories_ParentCategoryCategoryID;

        private EntityRef<ProductCategory> _ProductCategory_ParentCategoryCategoryID;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryIDChanging(int value);
        partial void OnCategoryIDChanged();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();
        partial void OnParentCategoryCategoryIDChanging(System.Nullable<int> value);
        partial void OnParentCategoryCategoryIDChanged();
        #endregion

        public ProductCategory()
        {
            this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
            this._ProductCategories_ParentCategoryCategoryID = new EntitySet<ProductCategory>(new Action<ProductCategory>(this.attach_ProductCategories_ParentCategoryCategoryID), new Action<ProductCategory>(this.detach_ProductCategories_ParentCategoryCategoryID));
            this._ProductCategory_ParentCategoryCategoryID  = default(EntityRef<ProductCategory>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CategoryID in the schema.
        /// </summary>
        [Column(Storage = "_CategoryID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CategoryID
        {
            get
            {
                return this._CategoryID;
            }
            set
            {
                if (this._CategoryID != value)
                {
                    this.OnCategoryIDChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryID = value;
                    this.SendPropertyChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryName in the schema.
        /// </summary>
        [Column(Storage = "_CategoryName", CanBeNull = false, DbType = "VARCHAR NOT NULL")]
        public string CategoryName
        {
            get
            {
                return this._CategoryName;
            }
            set
            {
                if (this._CategoryName != value)
                {
                    this.OnCategoryNameChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryName = value;
                    this.SendPropertyChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ParentCategoryCategoryID in the schema.
        /// </summary>
        [Column(Name = @"ParentCategory_CategoryID", Storage = "_ParentCategoryCategoryID", DbType = "INTEGER")]
        public System.Nullable<int> ParentCategoryCategoryID
        {
            get
            {
                return this._ParentCategoryCategoryID;
            }
            set
            {
                if (this._ParentCategoryCategoryID != value)
                {
                    if (this._ProductCategory_ParentCategoryCategoryID.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnParentCategoryCategoryIDChanging(value);
                    this.SendPropertyChanging();
                    this._ParentCategoryCategoryID = value;
                    this.SendPropertyChanged("ParentCategoryCategoryID");
                    this.OnParentCategoryCategoryIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Products in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductCategory_Product", Storage="_Products", OtherKey="CategoryCategoryID")]
        public EntitySet<Product> Products
        {
            get
            {
                return this._Products;
            }
            set
            {
                this._Products.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for ProductCategories_ParentCategoryCategoryID in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductCategory_ProductCategory", Storage="_ProductCategories_ParentCategoryCategoryID", OtherKey="ParentCategoryCategoryID")]
        public EntitySet<ProductCategory> ProductCategories_ParentCategoryCategoryID
        {
            get
            {
                return this._ProductCategories_ParentCategoryCategoryID;
            }
            set
            {
                this._ProductCategories_ParentCategoryCategoryID.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for ProductCategory_ParentCategoryCategoryID in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductCategory_ProductCategory", Storage="_ProductCategory_ParentCategoryCategoryID", ThisKey="ParentCategoryCategoryID", IsForeignKey=true)]
        public ProductCategory ProductCategory_ParentCategoryCategoryID
        {
            get
            {
                return this._ProductCategory_ParentCategoryCategoryID.Entity;
            }
            set
            {
                ProductCategory previousValue = this._ProductCategory_ParentCategoryCategoryID.Entity;
                if ((previousValue != value) || (this._ProductCategory_ParentCategoryCategoryID.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._ProductCategory_ParentCategoryCategoryID.Entity = null;
                        previousValue.ProductCategories_ParentCategoryCategoryID.Remove(this);
                    }
                    this._ProductCategory_ParentCategoryCategoryID.Entity = value;
                    if (value != null)
                    {
                        this._ParentCategoryCategoryID = value.CategoryID;
                        value.ProductCategories_ParentCategoryCategoryID.Add(this);
                    }
                    else
                    {
                        this._ParentCategoryCategoryID = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("ProductCategory_ParentCategoryCategoryID");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.ProductCategory = this;
        }
    
        private void detach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.ProductCategory = null;
        }

        private void attach_ProductCategories_ParentCategoryCategoryID(ProductCategory entity)
        {
            this.SendPropertyChanging("ProductCategories_ParentCategoryCategoryID");
            entity.ProductCategory_ParentCategoryCategoryID = this;
        }
    
        private void detach_ProductCategories_ParentCategoryCategoryID(ProductCategory entity)
        {
            this.SendPropertyChanging("ProductCategories_ParentCategoryCategoryID");
            entity.ProductCategory_ParentCategoryCategoryID = null;
        }
    }

    /// <summary>
    /// There are no comments for OrderDetail in the schema.
    /// </summary>
    [Table(Name = @"""main"".""Order Details""")]
    public partial class OrderDetail : INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private int _OrderID;

        private int _ProductID;

        private float _Price;

        private float _Quantity;

        private EntityRef<Order> _Order;

        private EntityRef<Product> _Product;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnOrderIDChanging(int value);
        partial void OnOrderIDChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnPriceChanging(float value);
        partial void OnPriceChanged();
        partial void OnQuantityChanging(float value);
        partial void OnQuantityChanged();
        #endregion

        public OrderDetail()
        {
            this._Order  = default(EntityRef<Order>);
            this._Product  = default(EntityRef<Product>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrderID in the schema.
        /// </summary>
        [Column(Storage = "_OrderID", CanBeNull = false, DbType = "INTEGER NOT NULL", IsPrimaryKey = true)]
        public int OrderID
        {
            get
            {
                return this._OrderID;
            }
            set
            {
                if (this._OrderID != value)
                {
                    if (this._Order.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOrderIDChanging(value);
                    this.SendPropertyChanging();
                    this._OrderID = value;
                    this.SendPropertyChanged("OrderID");
                    this.OnOrderIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductID in the schema.
        /// </summary>
        [Column(Storage = "_ProductID", CanBeNull = false, DbType = "INTEGER NOT NULL", IsPrimaryKey = true)]
        public int ProductID
        {
            get
            {
                return this._ProductID;
            }
            set
            {
                if (this._ProductID != value)
                {
                    if (this._Product.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIDChanging(value);
                    this.SendPropertyChanging();
                    this._ProductID = value;
                    this.SendPropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Storage = "_Price", CanBeNull = false, DbType = "REAL NOT NULL")]
        public float Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Storage = "_Quantity", CanBeNull = false, DbType = "REAL NOT NULL")]
        public float Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Order in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Order_OrderDetail", Storage="_Order", ThisKey="OrderID", IsForeignKey=true)]
        public Order Order
        {
            get
            {
                return this._Order.Entity;
            }
            set
            {
                Order previousValue = this._Order.Entity;
                if ((previousValue != value) || (this._Order.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Order.Entity = null;
                        previousValue.OrderDetails.Remove(this);
                    }
                    this._Order.Entity = value;
                    if (value != null)
                    {
                        this._OrderID = value.OrderID;
                        value.OrderDetails.Add(this);
                    }
                    else
                    {
                        this._OrderID = default(int);
                    }
                    this.SendPropertyChanged("Order");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Product in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_OrderDetail", Storage="_Product", ThisKey="ProductID", IsForeignKey=true)]
        public Product Product
        {
            get
            {
                return this._Product.Entity;
            }
            set
            {
                Product previousValue = this._Product.Entity;
                if ((previousValue != value) || (this._Product.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Product.Entity = null;
                        previousValue.OrderDetails.Remove(this);
                    }
                    this._Product.Entity = value;
                    if (value != null)
                    {
                        this._ProductID = value.ProductID;
                        value.OrderDetails.Add(this);
                    }
                    else
                    {
                        this._ProductID = default(int);
                    }
                    this.SendPropertyChanged("Product");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Order in the schema.
    /// </summary>
    [Table(Name = @"""main"".Orders")]
    public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private int _OrderID;

        private System.DateTime _OrderDate;

        private float _Freight;

        private System.Nullable<System.DateTime> _ShipDate;

        private float _Discount;

        private System.Nullable<int> _PersonContactContactID;

        private System.Nullable<int> _CompanyCompanyID;

        private System.Nullable<int> _CompanyCompanyID1;

        private System.Nullable<int> _CompanyCompanyID2;

        private System.Nullable<int> _ShipCompanyCompanyID;

        private EntitySet<OrderDetail> _OrderDetails;

        private EntityRef<Company> _Company_ShipCompanyCompanyID;

        private EntityRef<Company> _Company_CompanyCompanyID2;

        private EntityRef<Company> _Company_CompanyCompanyID1;

        private EntityRef<Company> _Company_CompanyCompanyID;

        private EntityRef<PersonContact> _PersonContact;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnOrderIDChanging(int value);
        partial void OnOrderIDChanged();
        partial void OnOrderDateChanging(System.DateTime value);
        partial void OnOrderDateChanged();
        partial void OnFreightChanging(float value);
        partial void OnFreightChanged();
        partial void OnShipDateChanging(System.Nullable<System.DateTime> value);
        partial void OnShipDateChanged();
        partial void OnDiscountChanging(float value);
        partial void OnDiscountChanged();
        partial void OnPersonContactContactIDChanging(System.Nullable<int> value);
        partial void OnPersonContactContactIDChanged();
        partial void OnCompanyCompanyIDChanging(System.Nullable<int> value);
        partial void OnCompanyCompanyIDChanged();
        partial void OnCompanyCompanyID1Changing(System.Nullable<int> value);
        partial void OnCompanyCompanyID1Changed();
        partial void OnCompanyCompanyID2Changing(System.Nullable<int> value);
        partial void OnCompanyCompanyID2Changed();
        partial void OnShipCompanyCompanyIDChanging(System.Nullable<int> value);
        partial void OnShipCompanyCompanyIDChanged();
        #endregion

        public Order()
        {
            this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
            this._Company_ShipCompanyCompanyID  = default(EntityRef<Company>);
            this._Company_CompanyCompanyID2  = default(EntityRef<Company>);
            this._Company_CompanyCompanyID1  = default(EntityRef<Company>);
            this._Company_CompanyCompanyID  = default(EntityRef<Company>);
            this._PersonContact  = default(EntityRef<PersonContact>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrderID in the schema.
        /// </summary>
        [Column(Storage = "_OrderID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int OrderID
        {
            get
            {
                return this._OrderID;
            }
            set
            {
                if (this._OrderID != value)
                {
                    this.OnOrderIDChanging(value);
                    this.SendPropertyChanging();
                    this._OrderID = value;
                    this.SendPropertyChanged("OrderID");
                    this.OnOrderIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderDate in the schema.
        /// </summary>
        [Column(Storage = "_OrderDate", CanBeNull = false, DbType = "DATETIME NOT NULL")]
        public System.DateTime OrderDate
        {
            get
            {
                return this._OrderDate;
            }
            set
            {
                if (this._OrderDate != value)
                {
                    this.OnOrderDateChanging(value);
                    this.SendPropertyChanging();
                    this._OrderDate = value;
                    this.SendPropertyChanged("OrderDate");
                    this.OnOrderDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Freight in the schema.
        /// </summary>
        [Column(Storage = "_Freight", CanBeNull = false, DbType = "REAL NOT NULL")]
        public float Freight
        {
            get
            {
                return this._Freight;
            }
            set
            {
                if (this._Freight != value)
                {
                    this.OnFreightChanging(value);
                    this.SendPropertyChanging();
                    this._Freight = value;
                    this.SendPropertyChanged("Freight");
                    this.OnFreightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShipDate in the schema.
        /// </summary>
        [Column(Storage = "_ShipDate", DbType = "DATETIME")]
        public System.Nullable<System.DateTime> ShipDate
        {
            get
            {
                return this._ShipDate;
            }
            set
            {
                if (this._ShipDate != value)
                {
                    this.OnShipDateChanging(value);
                    this.SendPropertyChanging();
                    this._ShipDate = value;
                    this.SendPropertyChanged("ShipDate");
                    this.OnShipDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Discount in the schema.
        /// </summary>
        [Column(Storage = "_Discount", CanBeNull = false, DbType = "REAL NOT NULL")]
        public float Discount
        {
            get
            {
                return this._Discount;
            }
            set
            {
                if (this._Discount != value)
                {
                    this.OnDiscountChanging(value);
                    this.SendPropertyChanging();
                    this._Discount = value;
                    this.SendPropertyChanged("Discount");
                    this.OnDiscountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PersonContactContactID in the schema.
        /// </summary>
        [Column(Name = @"PersonContact_ContactID", Storage = "_PersonContactContactID", DbType = "INTEGER")]
        public System.Nullable<int> PersonContactContactID
        {
            get
            {
                return this._PersonContactContactID;
            }
            set
            {
                if (this._PersonContactContactID != value)
                {
                    if (this._PersonContact.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPersonContactContactIDChanging(value);
                    this.SendPropertyChanging();
                    this._PersonContactContactID = value;
                    this.SendPropertyChanged("PersonContactContactID");
                    this.OnPersonContactContactIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyCompanyID in the schema.
        /// </summary>
        [Column(Name = @"Company_CompanyID", Storage = "_CompanyCompanyID", DbType = "INTEGER")]
        public System.Nullable<int> CompanyCompanyID
        {
            get
            {
                return this._CompanyCompanyID;
            }
            set
            {
                if (this._CompanyCompanyID != value)
                {
                    if (this._Company_CompanyCompanyID.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCompanyCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._CompanyCompanyID = value;
                    this.SendPropertyChanged("CompanyCompanyID");
                    this.OnCompanyCompanyIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyCompanyID1 in the schema.
        /// </summary>
        [Column(Name = @"Company_CompanyID1", Storage = "_CompanyCompanyID1", DbType = "INTEGER")]
        public System.Nullable<int> CompanyCompanyID1
        {
            get
            {
                return this._CompanyCompanyID1;
            }
            set
            {
                if (this._CompanyCompanyID1 != value)
                {
                    if (this._Company_CompanyCompanyID1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCompanyCompanyID1Changing(value);
                    this.SendPropertyChanging();
                    this._CompanyCompanyID1 = value;
                    this.SendPropertyChanged("CompanyCompanyID1");
                    this.OnCompanyCompanyID1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyCompanyID2 in the schema.
        /// </summary>
        [Column(Name = @"Company_CompanyID2", Storage = "_CompanyCompanyID2", DbType = "INTEGER")]
        public System.Nullable<int> CompanyCompanyID2
        {
            get
            {
                return this._CompanyCompanyID2;
            }
            set
            {
                if (this._CompanyCompanyID2 != value)
                {
                    if (this._Company_CompanyCompanyID2.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCompanyCompanyID2Changing(value);
                    this.SendPropertyChanging();
                    this._CompanyCompanyID2 = value;
                    this.SendPropertyChanged("CompanyCompanyID2");
                    this.OnCompanyCompanyID2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShipCompanyCompanyID in the schema.
        /// </summary>
        [Column(Name = @"ShipCompany_CompanyID", Storage = "_ShipCompanyCompanyID", DbType = "INTEGER")]
        public System.Nullable<int> ShipCompanyCompanyID
        {
            get
            {
                return this._ShipCompanyCompanyID;
            }
            set
            {
                if (this._ShipCompanyCompanyID != value)
                {
                    if (this._Company_ShipCompanyCompanyID.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnShipCompanyCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._ShipCompanyCompanyID = value;
                    this.SendPropertyChanged("ShipCompanyCompanyID");
                    this.OnShipCompanyCompanyIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Order_OrderDetail", Storage="_OrderDetails", OtherKey="OrderID", DeleteRule="CASCADE")]
        public EntitySet<OrderDetail> OrderDetails
        {
            get
            {
                return this._OrderDetails;
            }
            set
            {
                this._OrderDetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Company_ShipCompanyCompanyID in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_CompanyID_Order_ShipCompanyCompanyID", Storage="_Company_ShipCompanyCompanyID", ThisKey="ShipCompanyCompanyID", IsForeignKey=true)]
        public Company Company_ShipCompanyCompanyID
        {
            get
            {
                return this._Company_ShipCompanyCompanyID.Entity;
            }
            set
            {
                Company previousValue = this._Company_ShipCompanyCompanyID.Entity;
                if ((previousValue != value) || (this._Company_ShipCompanyCompanyID.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Company_ShipCompanyCompanyID.Entity = null;
                        previousValue.Orders_ShipCompanyCompanyID.Remove(this);
                    }
                    this._Company_ShipCompanyCompanyID.Entity = value;
                    if (value != null)
                    {
                        this._ShipCompanyCompanyID = value.CompanyID;
                        value.Orders_ShipCompanyCompanyID.Add(this);
                    }
                    else
                    {
                        this._ShipCompanyCompanyID = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Company_ShipCompanyCompanyID");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company_CompanyCompanyID2 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_CompanyID_Order_CompanyCompanyID2", Storage="_Company_CompanyCompanyID2", ThisKey="CompanyCompanyID2", IsForeignKey=true)]
        public Company Company_CompanyCompanyID2
        {
            get
            {
                return this._Company_CompanyCompanyID2.Entity;
            }
            set
            {
                Company previousValue = this._Company_CompanyCompanyID2.Entity;
                if ((previousValue != value) || (this._Company_CompanyCompanyID2.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Company_CompanyCompanyID2.Entity = null;
                        previousValue.Orders_CompanyCompanyID2.Remove(this);
                    }
                    this._Company_CompanyCompanyID2.Entity = value;
                    if (value != null)
                    {
                        this._CompanyCompanyID2 = value.CompanyID;
                        value.Orders_CompanyCompanyID2.Add(this);
                    }
                    else
                    {
                        this._CompanyCompanyID2 = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Company_CompanyCompanyID2");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company_CompanyCompanyID1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_CompanyID_Order_CompanyCompanyID1", Storage="_Company_CompanyCompanyID1", ThisKey="CompanyCompanyID1", IsForeignKey=true)]
        public Company Company_CompanyCompanyID1
        {
            get
            {
                return this._Company_CompanyCompanyID1.Entity;
            }
            set
            {
                Company previousValue = this._Company_CompanyCompanyID1.Entity;
                if ((previousValue != value) || (this._Company_CompanyCompanyID1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Company_CompanyCompanyID1.Entity = null;
                        previousValue.Orders_CompanyCompanyID1.Remove(this);
                    }
                    this._Company_CompanyCompanyID1.Entity = value;
                    if (value != null)
                    {
                        this._CompanyCompanyID1 = value.CompanyID;
                        value.Orders_CompanyCompanyID1.Add(this);
                    }
                    else
                    {
                        this._CompanyCompanyID1 = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Company_CompanyCompanyID1");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company_CompanyCompanyID in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_CompanyID_Order_CompanyCompanyID", Storage="_Company_CompanyCompanyID", ThisKey="CompanyCompanyID", IsForeignKey=true)]
        public Company Company_CompanyCompanyID
        {
            get
            {
                return this._Company_CompanyCompanyID.Entity;
            }
            set
            {
                Company previousValue = this._Company_CompanyCompanyID.Entity;
                if ((previousValue != value) || (this._Company_CompanyCompanyID.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Company_CompanyCompanyID.Entity = null;
                        previousValue.Orders_CompanyCompanyID.Remove(this);
                    }
                    this._Company_CompanyCompanyID.Entity = value;
                    if (value != null)
                    {
                        this._CompanyCompanyID = value.CompanyID;
                        value.Orders_CompanyCompanyID.Add(this);
                    }
                    else
                    {
                        this._CompanyCompanyID = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Company_CompanyCompanyID");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PersonContact in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PersonContact_Order", Storage="_PersonContact", ThisKey="PersonContactContactID", IsForeignKey=true)]
        public PersonContact PersonContact
        {
            get
            {
                return this._PersonContact.Entity;
            }
            set
            {
                PersonContact previousValue = this._PersonContact.Entity;
                if ((previousValue != value) || (this._PersonContact.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._PersonContact.Entity = null;
                        previousValue.Orders.Remove(this);
                    }
                    this._PersonContact.Entity = value;
                    if (value != null)
                    {
                        this._PersonContactContactID = value.ContactID;
                        value.Orders.Add(this);
                    }
                    else
                    {
                        this._PersonContactContactID = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("PersonContact");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_OrderDetails(OrderDetail entity)
        {
            this.SendPropertyChanging("OrderDetails");
            entity.Order = this;
        }
    
        private void detach_OrderDetails(OrderDetail entity)
        {
            this.SendPropertyChanging("OrderDetails");
            entity.Order = null;
        }
    }

    /// <summary>
    /// There are no comments for PersonContact in the schema.
    /// </summary>
    [Table(Name = @"""main"".""Person Contact""")]
    public partial class PersonContact : INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private int _ContactID;

        private string _Title;

        private string _FirstName;

        private string _MiddleName;

        private string _LastName;

        private string _HomePhone;

        private string _MobilePhone;

        private string _AddressAddressTitle;

        private string _AddressAddress;

        private string _AddressCity;

        private string _AddressRegion;

        private string _AddressPostalCode;

        private string _AddressCountry;

        private string _AddressPhone;

        private string _AddressFax;

        private System.Nullable<int> _CompanyCompanyID;

        private System.Nullable<int> _CompanyCompanyID1;

        private EntitySet<Order> _Orders;

        private EntityRef<Company> _Company_CompanyCompanyID1;

        private EntityRef<Company> _Company_CompanyCompanyID;

        private EntitySet<Company> _Companies_PersonContactContactID;

        private EntitySet<Company> _Companies_PrimaryContactContactID;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnContactIDChanging(int value);
        partial void OnContactIDChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnMiddleNameChanging(string value);
        partial void OnMiddleNameChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnHomePhoneChanging(string value);
        partial void OnHomePhoneChanged();
        partial void OnMobilePhoneChanging(string value);
        partial void OnMobilePhoneChanged();
        partial void OnAddressAddressTitleChanging(string value);
        partial void OnAddressAddressTitleChanged();
        partial void OnAddressAddressChanging(string value);
        partial void OnAddressAddressChanged();
        partial void OnAddressCityChanging(string value);
        partial void OnAddressCityChanged();
        partial void OnAddressRegionChanging(string value);
        partial void OnAddressRegionChanged();
        partial void OnAddressPostalCodeChanging(string value);
        partial void OnAddressPostalCodeChanged();
        partial void OnAddressCountryChanging(string value);
        partial void OnAddressCountryChanged();
        partial void OnAddressPhoneChanging(string value);
        partial void OnAddressPhoneChanged();
        partial void OnAddressFaxChanging(string value);
        partial void OnAddressFaxChanged();
        partial void OnCompanyCompanyIDChanging(System.Nullable<int> value);
        partial void OnCompanyCompanyIDChanged();
        partial void OnCompanyCompanyID1Changing(System.Nullable<int> value);
        partial void OnCompanyCompanyID1Changed();
        #endregion

        public PersonContact()
        {
            this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
            this._Company_CompanyCompanyID1  = default(EntityRef<Company>);
            this._Company_CompanyCompanyID  = default(EntityRef<Company>);
            this._Companies_PersonContactContactID = new EntitySet<Company>(new Action<Company>(this.attach_Companies_PersonContactContactID), new Action<Company>(this.detach_Companies_PersonContactContactID));
            this._Companies_PrimaryContactContactID = new EntitySet<Company>(new Action<Company>(this.attach_Companies_PrimaryContactContactID), new Action<Company>(this.detach_Companies_PrimaryContactContactID));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ContactID in the schema.
        /// </summary>
        [Column(Storage = "_ContactID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ContactID
        {
            get
            {
                return this._ContactID;
            }
            set
            {
                if (this._ContactID != value)
                {
                    this.OnContactIDChanging(value);
                    this.SendPropertyChanging();
                    this._ContactID = value;
                    this.SendPropertyChanged("ContactID");
                    this.OnContactIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [Column(Storage = "_Title", DbType = "VARCHAR")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FirstName in the schema.
        /// </summary>
        [Column(Storage = "_FirstName", DbType = "VARCHAR")]
        public string FirstName
        {
            get
            {
                return this._FirstName;
            }
            set
            {
                if (this._FirstName != value)
                {
                    this.OnFirstNameChanging(value);
                    this.SendPropertyChanging();
                    this._FirstName = value;
                    this.SendPropertyChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MiddleName in the schema.
        /// </summary>
        [Column(Storage = "_MiddleName", DbType = "VARCHAR")]
        public string MiddleName
        {
            get
            {
                return this._MiddleName;
            }
            set
            {
                if (this._MiddleName != value)
                {
                    this.OnMiddleNameChanging(value);
                    this.SendPropertyChanging();
                    this._MiddleName = value;
                    this.SendPropertyChanged("MiddleName");
                    this.OnMiddleNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastName in the schema.
        /// </summary>
        [Column(Storage = "_LastName", DbType = "VARCHAR")]
        public string LastName
        {
            get
            {
                return this._LastName;
            }
            set
            {
                if (this._LastName != value)
                {
                    this.OnLastNameChanging(value);
                    this.SendPropertyChanging();
                    this._LastName = value;
                    this.SendPropertyChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HomePhone in the schema.
        /// </summary>
        [Column(Storage = "_HomePhone", DbType = "VARCHAR")]
        public string HomePhone
        {
            get
            {
                return this._HomePhone;
            }
            set
            {
                if (this._HomePhone != value)
                {
                    this.OnHomePhoneChanging(value);
                    this.SendPropertyChanging();
                    this._HomePhone = value;
                    this.SendPropertyChanged("HomePhone");
                    this.OnHomePhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MobilePhone in the schema.
        /// </summary>
        [Column(Storage = "_MobilePhone", DbType = "VARCHAR")]
        public string MobilePhone
        {
            get
            {
                return this._MobilePhone;
            }
            set
            {
                if (this._MobilePhone != value)
                {
                    this.OnMobilePhoneChanging(value);
                    this.SendPropertyChanging();
                    this._MobilePhone = value;
                    this.SendPropertyChanged("MobilePhone");
                    this.OnMobilePhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressAddressTitle in the schema.
        /// </summary>
        [Column(Name = @"Address_AddressTitle", Storage = "_AddressAddressTitle", DbType = "VARCHAR")]
        public string AddressAddressTitle
        {
            get
            {
                return this._AddressAddressTitle;
            }
            set
            {
                if (this._AddressAddressTitle != value)
                {
                    this.OnAddressAddressTitleChanging(value);
                    this.SendPropertyChanging();
                    this._AddressAddressTitle = value;
                    this.SendPropertyChanged("AddressAddressTitle");
                    this.OnAddressAddressTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressAddress in the schema.
        /// </summary>
        [Column(Name = @"Address_Address", Storage = "_AddressAddress", DbType = "VARCHAR")]
        public string AddressAddress
        {
            get
            {
                return this._AddressAddress;
            }
            set
            {
                if (this._AddressAddress != value)
                {
                    this.OnAddressAddressChanging(value);
                    this.SendPropertyChanging();
                    this._AddressAddress = value;
                    this.SendPropertyChanged("AddressAddress");
                    this.OnAddressAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressCity in the schema.
        /// </summary>
        [Column(Name = @"Address_City", Storage = "_AddressCity", DbType = "VARCHAR")]
        public string AddressCity
        {
            get
            {
                return this._AddressCity;
            }
            set
            {
                if (this._AddressCity != value)
                {
                    this.OnAddressCityChanging(value);
                    this.SendPropertyChanging();
                    this._AddressCity = value;
                    this.SendPropertyChanged("AddressCity");
                    this.OnAddressCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressRegion in the schema.
        /// </summary>
        [Column(Name = @"Address_Region", Storage = "_AddressRegion", DbType = "VARCHAR")]
        public string AddressRegion
        {
            get
            {
                return this._AddressRegion;
            }
            set
            {
                if (this._AddressRegion != value)
                {
                    this.OnAddressRegionChanging(value);
                    this.SendPropertyChanging();
                    this._AddressRegion = value;
                    this.SendPropertyChanged("AddressRegion");
                    this.OnAddressRegionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressPostalCode in the schema.
        /// </summary>
        [Column(Name = @"Address_PostalCode", Storage = "_AddressPostalCode", DbType = "VARCHAR")]
        public string AddressPostalCode
        {
            get
            {
                return this._AddressPostalCode;
            }
            set
            {
                if (this._AddressPostalCode != value)
                {
                    this.OnAddressPostalCodeChanging(value);
                    this.SendPropertyChanging();
                    this._AddressPostalCode = value;
                    this.SendPropertyChanged("AddressPostalCode");
                    this.OnAddressPostalCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressCountry in the schema.
        /// </summary>
        [Column(Name = @"Address_Country", Storage = "_AddressCountry", DbType = "VARCHAR")]
        public string AddressCountry
        {
            get
            {
                return this._AddressCountry;
            }
            set
            {
                if (this._AddressCountry != value)
                {
                    this.OnAddressCountryChanging(value);
                    this.SendPropertyChanging();
                    this._AddressCountry = value;
                    this.SendPropertyChanged("AddressCountry");
                    this.OnAddressCountryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressPhone in the schema.
        /// </summary>
        [Column(Name = @"Address_Phone", Storage = "_AddressPhone", DbType = "VARCHAR")]
        public string AddressPhone
        {
            get
            {
                return this._AddressPhone;
            }
            set
            {
                if (this._AddressPhone != value)
                {
                    this.OnAddressPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._AddressPhone = value;
                    this.SendPropertyChanged("AddressPhone");
                    this.OnAddressPhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressFax in the schema.
        /// </summary>
        [Column(Name = @"Address_Fax", Storage = "_AddressFax", DbType = "VARCHAR")]
        public string AddressFax
        {
            get
            {
                return this._AddressFax;
            }
            set
            {
                if (this._AddressFax != value)
                {
                    this.OnAddressFaxChanging(value);
                    this.SendPropertyChanging();
                    this._AddressFax = value;
                    this.SendPropertyChanged("AddressFax");
                    this.OnAddressFaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyCompanyID in the schema.
        /// </summary>
        [Column(Name = @"Company_CompanyID", Storage = "_CompanyCompanyID", DbType = "INTEGER")]
        public System.Nullable<int> CompanyCompanyID
        {
            get
            {
                return this._CompanyCompanyID;
            }
            set
            {
                if (this._CompanyCompanyID != value)
                {
                    if (this._Company_CompanyCompanyID.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCompanyCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._CompanyCompanyID = value;
                    this.SendPropertyChanged("CompanyCompanyID");
                    this.OnCompanyCompanyIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyCompanyID1 in the schema.
        /// </summary>
        [Column(Name = @"Company_CompanyID1", Storage = "_CompanyCompanyID1", DbType = "INTEGER")]
        public System.Nullable<int> CompanyCompanyID1
        {
            get
            {
                return this._CompanyCompanyID1;
            }
            set
            {
                if (this._CompanyCompanyID1 != value)
                {
                    if (this._Company_CompanyCompanyID1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCompanyCompanyID1Changing(value);
                    this.SendPropertyChanging();
                    this._CompanyCompanyID1 = value;
                    this.SendPropertyChanged("CompanyCompanyID1");
                    this.OnCompanyCompanyID1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Orders in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PersonContact_Order", Storage="_Orders", OtherKey="PersonContactContactID")]
        public EntitySet<Order> Orders
        {
            get
            {
                return this._Orders;
            }
            set
            {
                this._Orders.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Company_CompanyCompanyID1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_CompanyID_PersonContact_CompanyCompanyID1", Storage="_Company_CompanyCompanyID1", ThisKey="CompanyCompanyID1", IsForeignKey=true)]
        public Company Company_CompanyCompanyID1
        {
            get
            {
                return this._Company_CompanyCompanyID1.Entity;
            }
            set
            {
                Company previousValue = this._Company_CompanyCompanyID1.Entity;
                if ((previousValue != value) || (this._Company_CompanyCompanyID1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Company_CompanyCompanyID1.Entity = null;
                        previousValue.PersonContacts_CompanyCompanyID1.Remove(this);
                    }
                    this._Company_CompanyCompanyID1.Entity = value;
                    if (value != null)
                    {
                        this._CompanyCompanyID1 = value.CompanyID;
                        value.PersonContacts_CompanyCompanyID1.Add(this);
                    }
                    else
                    {
                        this._CompanyCompanyID1 = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Company_CompanyCompanyID1");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company_CompanyCompanyID in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_CompanyID_PersonContact_CompanyCompanyID", Storage="_Company_CompanyCompanyID", ThisKey="CompanyCompanyID", IsForeignKey=true)]
        public Company Company_CompanyCompanyID
        {
            get
            {
                return this._Company_CompanyCompanyID.Entity;
            }
            set
            {
                Company previousValue = this._Company_CompanyCompanyID.Entity;
                if ((previousValue != value) || (this._Company_CompanyCompanyID.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Company_CompanyCompanyID.Entity = null;
                        previousValue.PersonContacts_CompanyCompanyID.Remove(this);
                    }
                    this._Company_CompanyCompanyID.Entity = value;
                    if (value != null)
                    {
                        this._CompanyCompanyID = value.CompanyID;
                        value.PersonContacts_CompanyCompanyID.Add(this);
                    }
                    else
                    {
                        this._CompanyCompanyID = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Company_CompanyCompanyID");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Companies_PersonContactContactID in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PersonContact_ContactID_Company_PersonContactContactID", Storage="_Companies_PersonContactContactID", OtherKey="PersonContactContactID")]
        public EntitySet<Company> Companies_PersonContactContactID
        {
            get
            {
                return this._Companies_PersonContactContactID;
            }
            set
            {
                this._Companies_PersonContactContactID.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Companies_PrimaryContactContactID in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PersonContact_ContactID_Company_PrimaryContactContactID", Storage="_Companies_PrimaryContactContactID", OtherKey="PrimaryContactContactID")]
        public EntitySet<Company> Companies_PrimaryContactContactID
        {
            get
            {
                return this._Companies_PrimaryContactContactID;
            }
            set
            {
                this._Companies_PrimaryContactContactID.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Orders(Order entity)
        {
            this.SendPropertyChanging("Orders");
            entity.PersonContact = this;
        }
    
        private void detach_Orders(Order entity)
        {
            this.SendPropertyChanging("Orders");
            entity.PersonContact = null;
        }

        private void attach_Companies_PersonContactContactID(Company entity)
        {
            this.SendPropertyChanging("Companies_PersonContactContactID");
            entity.PersonContact_PersonContactContactID = this;
        }
    
        private void detach_Companies_PersonContactContactID(Company entity)
        {
            this.SendPropertyChanging("Companies_PersonContactContactID");
            entity.PersonContact_PersonContactContactID = null;
        }

        private void attach_Companies_PrimaryContactContactID(Company entity)
        {
            this.SendPropertyChanging("Companies_PrimaryContactContactID");
            entity.PersonContact_PrimaryContactContactID = this;
        }
    
        private void detach_Companies_PrimaryContactContactID(Company entity)
        {
            this.SendPropertyChanging("Companies_PrimaryContactContactID");
            entity.PersonContact_PrimaryContactContactID = null;
        }
    }

    /// <summary>
    /// There are no comments for Company in the schema.
    /// </summary>
    [Table(Name = @"""main"".Company")]
    public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private int _CompanyID;

        private string _CompanyName;

        private string _Web;

        private string _Email;

        private string _AddressAddressTitle;

        private string _AddressAddress;

        private string _AddressCity;

        private string _AddressRegion;

        private string _AddressPostalCode;

        private string _AddressCountry;

        private string _AddressPhone;

        private string _AddressFax;

        private System.Nullable<int> _PrimaryContactContactID;

        private System.Nullable<int> _PersonContactContactID;

        private EntitySet<Order> _Orders_ShipCompanyCompanyID;

        private EntitySet<Order> _Orders_CompanyCompanyID2;

        private EntitySet<Order> _Orders_CompanyCompanyID1;

        private EntitySet<Order> _Orders_CompanyCompanyID;

        private EntitySet<PersonContact> _PersonContacts_CompanyCompanyID1;

        private EntitySet<PersonContact> _PersonContacts_CompanyCompanyID;

        private EntityRef<PersonContact> _PersonContact_PersonContactContactID;

        private EntityRef<PersonContact> _PersonContact_PrimaryContactContactID;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCompanyIDChanging(int value);
        partial void OnCompanyIDChanged();
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
        partial void OnWebChanging(string value);
        partial void OnWebChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnAddressAddressTitleChanging(string value);
        partial void OnAddressAddressTitleChanged();
        partial void OnAddressAddressChanging(string value);
        partial void OnAddressAddressChanged();
        partial void OnAddressCityChanging(string value);
        partial void OnAddressCityChanged();
        partial void OnAddressRegionChanging(string value);
        partial void OnAddressRegionChanged();
        partial void OnAddressPostalCodeChanging(string value);
        partial void OnAddressPostalCodeChanged();
        partial void OnAddressCountryChanging(string value);
        partial void OnAddressCountryChanged();
        partial void OnAddressPhoneChanging(string value);
        partial void OnAddressPhoneChanged();
        partial void OnAddressFaxChanging(string value);
        partial void OnAddressFaxChanged();
        partial void OnPrimaryContactContactIDChanging(System.Nullable<int> value);
        partial void OnPrimaryContactContactIDChanged();
        partial void OnPersonContactContactIDChanging(System.Nullable<int> value);
        partial void OnPersonContactContactIDChanged();
        #endregion

        public Company()
        {
            this._Orders_ShipCompanyCompanyID = new EntitySet<Order>(new Action<Order>(this.attach_Orders_ShipCompanyCompanyID), new Action<Order>(this.detach_Orders_ShipCompanyCompanyID));
            this._Orders_CompanyCompanyID2 = new EntitySet<Order>(new Action<Order>(this.attach_Orders_CompanyCompanyID2), new Action<Order>(this.detach_Orders_CompanyCompanyID2));
            this._Orders_CompanyCompanyID1 = new EntitySet<Order>(new Action<Order>(this.attach_Orders_CompanyCompanyID1), new Action<Order>(this.detach_Orders_CompanyCompanyID1));
            this._Orders_CompanyCompanyID = new EntitySet<Order>(new Action<Order>(this.attach_Orders_CompanyCompanyID), new Action<Order>(this.detach_Orders_CompanyCompanyID));
            this._PersonContacts_CompanyCompanyID1 = new EntitySet<PersonContact>(new Action<PersonContact>(this.attach_PersonContacts_CompanyCompanyID1), new Action<PersonContact>(this.detach_PersonContacts_CompanyCompanyID1));
            this._PersonContacts_CompanyCompanyID = new EntitySet<PersonContact>(new Action<PersonContact>(this.attach_PersonContacts_CompanyCompanyID), new Action<PersonContact>(this.detach_PersonContacts_CompanyCompanyID));
            this._PersonContact_PersonContactContactID  = default(EntityRef<PersonContact>);
            this._PersonContact_PrimaryContactContactID  = default(EntityRef<PersonContact>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CompanyID in the schema.
        /// </summary>
        [Column(Storage = "_CompanyID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CompanyID
        {
            get
            {
                return this._CompanyID;
            }
            set
            {
                if (this._CompanyID != value)
                {
                    this.OnCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._CompanyID = value;
                    this.SendPropertyChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompanyName in the schema.
        /// </summary>
        [Column(Storage = "_CompanyName", CanBeNull = false, DbType = "VARCHAR NOT NULL")]
        public string CompanyName
        {
            get
            {
                return this._CompanyName;
            }
            set
            {
                if (this._CompanyName != value)
                {
                    this.OnCompanyNameChanging(value);
                    this.SendPropertyChanging();
                    this._CompanyName = value;
                    this.SendPropertyChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Web in the schema.
        /// </summary>
        [Column(Storage = "_Web", DbType = "VARCHAR")]
        public string Web
        {
            get
            {
                return this._Web;
            }
            set
            {
                if (this._Web != value)
                {
                    this.OnWebChanging(value);
                    this.SendPropertyChanging();
                    this._Web = value;
                    this.SendPropertyChanged("Web");
                    this.OnWebChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Storage = "_Email", DbType = "VARCHAR")]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressAddressTitle in the schema.
        /// </summary>
        [Column(Name = @"Address_AddressTitle", Storage = "_AddressAddressTitle", DbType = "VARCHAR")]
        public string AddressAddressTitle
        {
            get
            {
                return this._AddressAddressTitle;
            }
            set
            {
                if (this._AddressAddressTitle != value)
                {
                    this.OnAddressAddressTitleChanging(value);
                    this.SendPropertyChanging();
                    this._AddressAddressTitle = value;
                    this.SendPropertyChanged("AddressAddressTitle");
                    this.OnAddressAddressTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressAddress in the schema.
        /// </summary>
        [Column(Name = @"Address_Address", Storage = "_AddressAddress", DbType = "VARCHAR")]
        public string AddressAddress
        {
            get
            {
                return this._AddressAddress;
            }
            set
            {
                if (this._AddressAddress != value)
                {
                    this.OnAddressAddressChanging(value);
                    this.SendPropertyChanging();
                    this._AddressAddress = value;
                    this.SendPropertyChanged("AddressAddress");
                    this.OnAddressAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressCity in the schema.
        /// </summary>
        [Column(Name = @"Address_City", Storage = "_AddressCity", DbType = "VARCHAR")]
        public string AddressCity
        {
            get
            {
                return this._AddressCity;
            }
            set
            {
                if (this._AddressCity != value)
                {
                    this.OnAddressCityChanging(value);
                    this.SendPropertyChanging();
                    this._AddressCity = value;
                    this.SendPropertyChanged("AddressCity");
                    this.OnAddressCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressRegion in the schema.
        /// </summary>
        [Column(Name = @"Address_Region", Storage = "_AddressRegion", DbType = "VARCHAR")]
        public string AddressRegion
        {
            get
            {
                return this._AddressRegion;
            }
            set
            {
                if (this._AddressRegion != value)
                {
                    this.OnAddressRegionChanging(value);
                    this.SendPropertyChanging();
                    this._AddressRegion = value;
                    this.SendPropertyChanged("AddressRegion");
                    this.OnAddressRegionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressPostalCode in the schema.
        /// </summary>
        [Column(Name = @"Address_PostalCode", Storage = "_AddressPostalCode", DbType = "VARCHAR")]
        public string AddressPostalCode
        {
            get
            {
                return this._AddressPostalCode;
            }
            set
            {
                if (this._AddressPostalCode != value)
                {
                    this.OnAddressPostalCodeChanging(value);
                    this.SendPropertyChanging();
                    this._AddressPostalCode = value;
                    this.SendPropertyChanged("AddressPostalCode");
                    this.OnAddressPostalCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressCountry in the schema.
        /// </summary>
        [Column(Name = @"Address_Country", Storage = "_AddressCountry", DbType = "VARCHAR")]
        public string AddressCountry
        {
            get
            {
                return this._AddressCountry;
            }
            set
            {
                if (this._AddressCountry != value)
                {
                    this.OnAddressCountryChanging(value);
                    this.SendPropertyChanging();
                    this._AddressCountry = value;
                    this.SendPropertyChanged("AddressCountry");
                    this.OnAddressCountryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressPhone in the schema.
        /// </summary>
        [Column(Name = @"Address_Phone", Storage = "_AddressPhone", DbType = "VARCHAR")]
        public string AddressPhone
        {
            get
            {
                return this._AddressPhone;
            }
            set
            {
                if (this._AddressPhone != value)
                {
                    this.OnAddressPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._AddressPhone = value;
                    this.SendPropertyChanged("AddressPhone");
                    this.OnAddressPhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressFax in the schema.
        /// </summary>
        [Column(Name = @"Address_Fax", Storage = "_AddressFax", DbType = "VARCHAR")]
        public string AddressFax
        {
            get
            {
                return this._AddressFax;
            }
            set
            {
                if (this._AddressFax != value)
                {
                    this.OnAddressFaxChanging(value);
                    this.SendPropertyChanging();
                    this._AddressFax = value;
                    this.SendPropertyChanged("AddressFax");
                    this.OnAddressFaxChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PrimaryContactContactID in the schema.
        /// </summary>
        [Column(Name = @"PrimaryContact_ContactID", Storage = "_PrimaryContactContactID", DbType = "INTEGER")]
        public System.Nullable<int> PrimaryContactContactID
        {
            get
            {
                return this._PrimaryContactContactID;
            }
            set
            {
                if (this._PrimaryContactContactID != value)
                {
                    if (this._PersonContact_PrimaryContactContactID.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPrimaryContactContactIDChanging(value);
                    this.SendPropertyChanging();
                    this._PrimaryContactContactID = value;
                    this.SendPropertyChanged("PrimaryContactContactID");
                    this.OnPrimaryContactContactIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PersonContactContactID in the schema.
        /// </summary>
        [Column(Name = @"PersonContact_ContactID", Storage = "_PersonContactContactID", DbType = "INTEGER")]
        public System.Nullable<int> PersonContactContactID
        {
            get
            {
                return this._PersonContactContactID;
            }
            set
            {
                if (this._PersonContactContactID != value)
                {
                    if (this._PersonContact_PersonContactContactID.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPersonContactContactIDChanging(value);
                    this.SendPropertyChanging();
                    this._PersonContactContactID = value;
                    this.SendPropertyChanged("PersonContactContactID");
                    this.OnPersonContactContactIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Orders_ShipCompanyCompanyID in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_CompanyID_Order_ShipCompanyCompanyID", Storage="_Orders_ShipCompanyCompanyID", OtherKey="ShipCompanyCompanyID")]
        public EntitySet<Order> Orders_ShipCompanyCompanyID
        {
            get
            {
                return this._Orders_ShipCompanyCompanyID;
            }
            set
            {
                this._Orders_ShipCompanyCompanyID.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Orders_CompanyCompanyID2 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_CompanyID_Order_CompanyCompanyID2", Storage="_Orders_CompanyCompanyID2", OtherKey="CompanyCompanyID2")]
        public EntitySet<Order> Orders_CompanyCompanyID2
        {
            get
            {
                return this._Orders_CompanyCompanyID2;
            }
            set
            {
                this._Orders_CompanyCompanyID2.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Orders_CompanyCompanyID1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_CompanyID_Order_CompanyCompanyID1", Storage="_Orders_CompanyCompanyID1", OtherKey="CompanyCompanyID1")]
        public EntitySet<Order> Orders_CompanyCompanyID1
        {
            get
            {
                return this._Orders_CompanyCompanyID1;
            }
            set
            {
                this._Orders_CompanyCompanyID1.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Orders_CompanyCompanyID in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_CompanyID_Order_CompanyCompanyID", Storage="_Orders_CompanyCompanyID", OtherKey="CompanyCompanyID")]
        public EntitySet<Order> Orders_CompanyCompanyID
        {
            get
            {
                return this._Orders_CompanyCompanyID;
            }
            set
            {
                this._Orders_CompanyCompanyID.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for PersonContacts_CompanyCompanyID1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_CompanyID_PersonContact_CompanyCompanyID1", Storage="_PersonContacts_CompanyCompanyID1", OtherKey="CompanyCompanyID1")]
        public EntitySet<PersonContact> PersonContacts_CompanyCompanyID1
        {
            get
            {
                return this._PersonContacts_CompanyCompanyID1;
            }
            set
            {
                this._PersonContacts_CompanyCompanyID1.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for PersonContacts_CompanyCompanyID in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Company_CompanyID_PersonContact_CompanyCompanyID", Storage="_PersonContacts_CompanyCompanyID", OtherKey="CompanyCompanyID")]
        public EntitySet<PersonContact> PersonContacts_CompanyCompanyID
        {
            get
            {
                return this._PersonContacts_CompanyCompanyID;
            }
            set
            {
                this._PersonContacts_CompanyCompanyID.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for PersonContact_PersonContactContactID in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PersonContact_ContactID_Company_PersonContactContactID", Storage="_PersonContact_PersonContactContactID", ThisKey="PersonContactContactID", IsForeignKey=true)]
        public PersonContact PersonContact_PersonContactContactID
        {
            get
            {
                return this._PersonContact_PersonContactContactID.Entity;
            }
            set
            {
                PersonContact previousValue = this._PersonContact_PersonContactContactID.Entity;
                if ((previousValue != value) || (this._PersonContact_PersonContactContactID.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._PersonContact_PersonContactContactID.Entity = null;
                        previousValue.Companies_PersonContactContactID.Remove(this);
                    }
                    this._PersonContact_PersonContactContactID.Entity = value;
                    if (value != null)
                    {
                        this._PersonContactContactID = value.ContactID;
                        value.Companies_PersonContactContactID.Add(this);
                    }
                    else
                    {
                        this._PersonContactContactID = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("PersonContact_PersonContactContactID");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PersonContact_PrimaryContactContactID in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PersonContact_ContactID_Company_PrimaryContactContactID", Storage="_PersonContact_PrimaryContactContactID", ThisKey="PrimaryContactContactID", IsForeignKey=true)]
        public PersonContact PersonContact_PrimaryContactContactID
        {
            get
            {
                return this._PersonContact_PrimaryContactContactID.Entity;
            }
            set
            {
                PersonContact previousValue = this._PersonContact_PrimaryContactContactID.Entity;
                if ((previousValue != value) || (this._PersonContact_PrimaryContactContactID.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._PersonContact_PrimaryContactContactID.Entity = null;
                        previousValue.Companies_PrimaryContactContactID.Remove(this);
                    }
                    this._PersonContact_PrimaryContactContactID.Entity = value;
                    if (value != null)
                    {
                        this._PrimaryContactContactID = value.ContactID;
                        value.Companies_PrimaryContactContactID.Add(this);
                    }
                    else
                    {
                        this._PrimaryContactContactID = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("PersonContact_PrimaryContactContactID");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Orders_ShipCompanyCompanyID(Order entity)
        {
            this.SendPropertyChanging("Orders_ShipCompanyCompanyID");
            entity.Company_ShipCompanyCompanyID = this;
        }
    
        private void detach_Orders_ShipCompanyCompanyID(Order entity)
        {
            this.SendPropertyChanging("Orders_ShipCompanyCompanyID");
            entity.Company_ShipCompanyCompanyID = null;
        }

        private void attach_Orders_CompanyCompanyID2(Order entity)
        {
            this.SendPropertyChanging("Orders_CompanyCompanyID2");
            entity.Company_CompanyCompanyID2 = this;
        }
    
        private void detach_Orders_CompanyCompanyID2(Order entity)
        {
            this.SendPropertyChanging("Orders_CompanyCompanyID2");
            entity.Company_CompanyCompanyID2 = null;
        }

        private void attach_Orders_CompanyCompanyID1(Order entity)
        {
            this.SendPropertyChanging("Orders_CompanyCompanyID1");
            entity.Company_CompanyCompanyID1 = this;
        }
    
        private void detach_Orders_CompanyCompanyID1(Order entity)
        {
            this.SendPropertyChanging("Orders_CompanyCompanyID1");
            entity.Company_CompanyCompanyID1 = null;
        }

        private void attach_Orders_CompanyCompanyID(Order entity)
        {
            this.SendPropertyChanging("Orders_CompanyCompanyID");
            entity.Company_CompanyCompanyID = this;
        }
    
        private void detach_Orders_CompanyCompanyID(Order entity)
        {
            this.SendPropertyChanging("Orders_CompanyCompanyID");
            entity.Company_CompanyCompanyID = null;
        }

        private void attach_PersonContacts_CompanyCompanyID1(PersonContact entity)
        {
            this.SendPropertyChanging("PersonContacts_CompanyCompanyID1");
            entity.Company_CompanyCompanyID1 = this;
        }
    
        private void detach_PersonContacts_CompanyCompanyID1(PersonContact entity)
        {
            this.SendPropertyChanging("PersonContacts_CompanyCompanyID1");
            entity.Company_CompanyCompanyID1 = null;
        }

        private void attach_PersonContacts_CompanyCompanyID(PersonContact entity)
        {
            this.SendPropertyChanging("PersonContacts_CompanyCompanyID");
            entity.Company_CompanyCompanyID = this;
        }
    
        private void detach_PersonContacts_CompanyCompanyID(PersonContact entity)
        {
            this.SendPropertyChanging("PersonContacts_CompanyCompanyID");
            entity.Company_CompanyCompanyID = null;
        }
    }
}
