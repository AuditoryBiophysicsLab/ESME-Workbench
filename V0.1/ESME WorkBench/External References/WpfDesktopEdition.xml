<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WpfDesktopEdition</name>
    </assembly>
    <members>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.LockLayerMode">
            <summary>
            This enum represents the lock mode while drawing layers.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.LockLayerMode.Default">
            <summary>
            This value indicates the layers will be locked while drawing.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.LockLayerMode.Lock">
            <summary>
            This value indicates the layers will be locked while drawing.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.LockLayerMode.DoNotLock">
            <summary>
            This value indicates the layers will be cloned before drawing; 
            and use the cloned layer to draw without locking.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.DoubleOutOfRange">
            <summary>
              Looks up a localized string similar to The input double value is out of range..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.DrawModeIsInvalid">
            <summary>
              Looks up a localized string similar to The DrawMode is invalid, please set the DrawMode with a proper value..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.EnumerationIsInvalid">
            <summary>
              Looks up a localized string similar to Enum is out of range..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.EpsgProjectionNameInvalid">
            <summary>
              Looks up a localized string similar to The projection name needs have &quot;EPSG:&quot; as prefix..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.EvaluationExpired">
            <summary>
              Looks up a localized string similar to The evaluation has expired. .
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.EvaluationNotInstalled">
            <summary>
              Looks up a localized string similar to The evaluation edition has not been installed..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.EvaluationWatermark">
            <summary>
              Looks up a localized string similar to Eval {0} days.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.GeocanvasIsNotInDrawing">
            <summary>
              Looks up a localized string similar to The GeoCanvas is currently not drawing.  Please call the BeginDraw method before calling this method..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.MapUnitIsInvalid">
            <summary>
              Looks up a localized string similar to The map unit is invalid, please set the MapUnit with a proper value..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.MouseCoordinateTypeIsInValid">
            <summary>
              Looks up a localized string similar to The mouse coordinate type is invalid, please set the MapCoordinateType with a proper value..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.OverlayDrawTypeIsInvalid">
            <summary>
              Looks up a localized string similar to The OverlayDrawType is invalid, please set the OverlayDrawType with a proper value..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.OverlayIsNotInMap">
            <summary>
              Looks up a localized string similar to Overlay is not added in the map right now, please add it into the Map.Overlays collection first..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.PanDirectionIsInvalid">
            <summary>
              Looks up a localized string similar to The pan direction is invalid, please set the PanDirection with a proper value..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.ParameterIsEmpty">
            <summary>
              Looks up a localized string similar to The parameter you supplied may not be empty..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.ParameterIsNull">
            <summary>
              Looks up a localized string similar to The parameter you supplied may not be null..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.ParametersCannotBeBothNull">
            <summary>
              Looks up a localized string similar to Parameters cannot be both null..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.RefreshModeIsInvalid">
            <summary>
              Looks up a localized string similar to The refresh mode is invalid..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.ScaleIsOutOfRange">
            <summary>
              Looks up a localized string similar to The specified scale is out of range..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.SizeIsNotValid">
            <summary>
              Looks up a localized string similar to The Size&apos;s width and height should be greater than zero..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.String">
            <summary>
              Looks up a localized string similar to Please contact thinkGeo for.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.String1">
            <summary>
              Looks up a localized string similar to purchasing option or an.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.String2">
            <summary>
              Looks up a localized string similar to extension to the trial.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.TextWrappingIsInvalid">
            <summary>
              Looks up a localized string similar to The text wrapping setting is invalid, please set the TextWrapping with a proper value..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.TheValueShouldBeGreaterOrEqualToZero">
            <summary>
              Looks up a localized string similar to The value should be greater or equal to zero..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.TheValueShouldBeGreaterThanZero">
            <summary>
              Looks up a localized string similar to The value should be greater than zero..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.TheValueShouldNotBeNaN">
            <summary>
              Looks up a localized string similar to The value should not be NaN, please set it with a proper value..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.TileTypeIsInvalid">
            <summary>
              Looks up a localized string similar to The TileType is invalid, please set the TileType with a proper value..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.TrackModeIsInvalid">
            <summary>
              Looks up a localized string similar to The track mode setting is invalid, please set the TrackMode with a proper value..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.Unlicensed">
            <summary>
              Looks up a localized string similar to Unlicensed.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.UnlicensedForRuntime">
            <summary>
              Looks up a localized string similar to Unlicensed For Runtime.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExceptionMessage.ZoomLevelIdIsInvalid">
            <summary>
              Looks up a localized string similar to The value should be greater than zero, less than ZoomLevelScales.Count..
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureDraggingEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.FeatureDragging">FeatureDragging.</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureDraggingEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of FeatureDraggingEditInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureDraggingEditInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Feature,System.Boolean,ThinkGeo.MapSuite.Core.PointShape,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            Constructor of FeatureDraggingEditInteractiveOverlayEventArgs class.
            </summary>
            <param name="draggingFeature">This parameter specified the target feature to be dragged.</param>
            <param name="cancel">This parameter specified the cancel property.</param>
            <param name="sourceControlPoint">This parameter specified the source control point to be dragged.</param>
            <param name="targetControlPoint">This parameter specified the target control point to be dragged.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureDraggingEditInteractiveOverlayEventArgs.DraggingFeature">
            <summary>
            Gets or sets the Feature to be dragged.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureDraggingEditInteractiveOverlayEventArgs.SourceControlPoint">
            <summary>
            Gets or sets the source control point to drag.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureDraggingEditInteractiveOverlayEventArgs.TargetControlPoint">
            <summary>
            Gets or sets the target control point to drag.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureDraggingEditInteractiveOverlayEventArgs.Cancel">
            <summary>
            Gets or sets the action to be canceled or not.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.TrackEndedTrackInteractiveOverlayEventArgs">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackEndedTrackInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of TrackEndedTrackInteractiveOverlayEventArgs class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackEndedTrackInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.BaseShape)">
            <summary>
            Constructor of TrackEndedTrackInteractiveOverlayEventArgs class.
            </summary>
            <param name="trackShape">This parameter specified the tracked shape.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.TrackEndedTrackInteractiveOverlayEventArgs.TrackShape">
            <summary>
            Gets or sets the tracked shape.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.TrackEndedTrackInteractiveOverlayEventArgs.Cancel">
            <summary>
            Gets or sets the action to be canceled or not.
            This property has no use any more, please use the it in the TrackInteractiveOverlay.TrackEnding event.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.Tile">
            <summary>
            This class represents the base class of tile which is the element to form tile overlay.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Tile.#ctor">
            <summary>
            Constructor of Tile class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Tile.OnApplyTemplate">
            <summary>
            Applies tile template.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Tile.Draw(ThinkGeo.MapSuite.Core.GeoCanvas)">
            <summary>
            This method draws the image for tile.
            </summary>
            <remarks>
            This method is the concrete wrapper for the virtual method DrawCore.
            This method draws the representation for the overlay based on the extent you provided.
            </remarks>
            <param name="geoCanvas">This parameter is the canvas object to draw on.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Tile.DrawCore(ThinkGeo.MapSuite.Core.GeoCanvas)">
            <summary>
            This method draws the image for the tile.
            </summary>
            <remarks>
            When implementing this abstract method, consider if the IsAsync property.
            If yes, draw it in background thread;
            If no, draw it directly with the properties we provid.
            </remarks>
            <param name="geoCanvas">This parameter is the canvas object to draw on.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Tile.DrawException(ThinkGeo.MapSuite.Core.GeoCanvas,System.Exception)">
            <summary>
            This method draws the exception message when the drawing process is crashed.
            </summary>
            <remarks>
            This method is the concrete wrapper for the abstract method DrawExceptionCore. 
            </remarks>
            <param name="geoCanvas">This parameter is the canvas object to draw on.</param>
            <param name="exception">This parameter is the real exception in during drawing process.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Tile.DrawExceptionCore(ThinkGeo.MapSuite.Core.GeoCanvas,System.Exception)">
            <summary>
            This method draws the exception message when the drawing process is crashed.
            </summary>
            <param name="canvas">This parameter is the canvas object to draw on.</param>
            <param name="exception">This parameter is the real exception in during drawing process.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Tile.OnOpened(System.EventArgs)">
            <summary>
            This method executs when the Opened event raised.
            </summary>
            <param name="args">This parameter maitains the arguments for the Opened event.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Tile.OnDrawing(ThinkGeo.MapSuite.WpfDesktopEdition.DrawingTileEventArgs)">
            <summary>
            This method raises before the tile is drawing.
            </summary>
            <param name="args">An event argument for the Drawing event in Tile class.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Tile.OnDrawn(ThinkGeo.MapSuite.WpfDesktopEdition.DrawnTileEventArgs)">
            <summary>
            This method raises after the tile is drawn.
            </summary>
            <param name="args">An event argument for the Drawn event in the Tile class.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Tile.Dispose">
            <summary>
            This method implements the IDispose method. 
            This method is the concrete wrapper for the abstract method DisposeCore.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Tile.Finalize">
            <summary>
            Finalizer of this tile object.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Tile.Dispose(System.Boolean)">
            <summary>
            This method disposes all the unmanaged resource in the tile.
            </summary>
            <remarks>
            When implementing this method, consider the stop the background threading when drawing asynchronously.
            </remarks>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.Tile.Opened">
            <summary>This is an event raises after this tile is opened.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.Tile.Drawing">
            <summary>This is an event raises before the tile is drawing.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.Tile.Drawn">
            <summary>This is an event raises after the tile is drawn.</summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Tile.ImageSource">
            <summary>
            This property gets the image source for displaying a tile. 
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Tile.TargetExtent">
            <summary>
            Gets or sets an extent that uses for drawing.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Tile.RowIndex">
            <summary>
            Gets or sets tile's row index in tile overlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Tile.ColumnIndex">
            <summary>
            Gets or sets tile's column index in tile overlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Tile.ZoomLevelIndex">
            <summary>
            Gets or sets current level index in the ZoomLevelSet.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Tile.TileCache">
            <summary>
            This proerty gets and sets the tile cache.
            To set this property to enable the cache feature for tile.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Tile.IsOpened">
            <summary>
            Gets or sets if this tile image is opened.
            Set this property to true to raise Opened event.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Tile.IsAsync">
            <summary>
            Gets or sets if this tile is drawing synchronously or asynchronously.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Tile.DrawingExceptionMode">
            <summary>
            Gets or sets how to specify the exception in current drawing process.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerDraggingSimpleMarkerOverlayEventArgs">
            <summary>
            This class represents the MarkerDragging event argument for SimpleMarkerOverlay.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerDraggingSimpleMarkerOverlayEventArgs.#ctor">
            <summary>
            Constructor of MarkerDraggingSimpleMarkerOverlayEventArgs class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerDraggingSimpleMarkerOverlayEventArgs.#ctor(ThinkGeo.MapSuite.WpfDesktopEdition.Marker,ThinkGeo.MapSuite.Core.PointShape,ThinkGeo.MapSuite.Core.ScreenPointF)">
            <summary>
            Constructor of MarkerDraggingSimpleMarkerOverlayEventArgs class.
            </summary>
            <param name="draggingMarker">This parameter indicates the marker which is being dragged.</param>
            <param name="worldCoordinate">This parameter indicates current mouse position in world coordinate.</param>
            <param name="screenCoordinate">This parameter indicates current mouse position in screen coordinate.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerDraggingSimpleMarkerOverlayEventArgs.DraggingMarker">
            <summary>
            Gets or sets the marker which is being dragged.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerDraggingSimpleMarkerOverlayEventArgs.WorldCoordinate">
            <summary>
            This proerpty gets and sets current mouse position in world coordinate.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerDraggingSimpleMarkerOverlayEventArgs.ScreenCoordinate">
            <summary>
            Gets or sets current mouse position in screen coordinate.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlayDrawType">
            <summary>
            This enumeration specifies the mode to draw the InterativeOverlay
            when doing interactive actions with InterativeOverlay.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlayDrawType.Default">
            <summary>
            Default value of the enumation, the same as DoNotDraw.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlayDrawType.Draw">
            <summary>
            This enumeration item means that InterativeOverlay will still be drawn.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlayDrawType.DoNotDraw">
            <summary>
            This enumeration item means that InterativeOverlay will still not be drawn.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerDraggedSimpleMarkerOverlayEventArgs">
            <summary>
            This class represents the event arguments for the MarkerDragged event for SimpleMarkerOverlay.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerDraggedSimpleMarkerOverlayEventArgs.#ctor">
            <summary>
            This is the constructor of MarkerDraggedSimpleMarkerOverlayEventArgs class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerDraggedSimpleMarkerOverlayEventArgs.#ctor(ThinkGeo.MapSuite.WpfDesktopEdition.Marker,ThinkGeo.MapSuite.Core.PointShape,ThinkGeo.MapSuite.Core.ScreenPointF)">
            <summary>
            Constructor of the MarkerDraggedSimpleMarkerOverlayEventArgs class.
            </summary>
            <param name="draggingMarker">This parameter indicates the marker which is dragged.</param>
            <param name="worldCoordinate">This parameter indicates current mouse position in world coordinate.</param>
            <param name="screenCoordinate">This parameter indicates current mouse position in screen coordinate.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerDraggedSimpleMarkerOverlayEventArgs.DraggingMarker">
            <summary>
            Gets or sets the marker which is dragged.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerDraggedSimpleMarkerOverlayEventArgs.WorldCoordinate">
            <summary>
            This proerpty gets and sets current mouse position in world coordinate.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerDraggedSimpleMarkerOverlayEventArgs.ScreenCoordinate">
            <summary>
            Gets or sets current mouse position in screen coordinate.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MapRightClickDragMode">
            <summary>
            This enumeration specifies the behavior that occurs when you right-click-and-drag on the MapControl.
            The default value is ZoomOutWithKey.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MapRightClickDragMode.Default">
            <summary>
            Default value (ZoomOutWithKey) of the enumeration.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MapRightClickDragMode.ZoomOutWithKey">
            <summary>
            This enumeration item means that the map will ZoomOut when a right-click-and-drag operation occurs.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MapRightClickDragMode.Disabled">
            <summary>
            This enumeration items means that the ZoomOut functionality for right-clicking-and-dragging will be disabled.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingTileTileOverlayEventArgs">
            <summary>
            This class represents an event argument for DrawingTile event in TileOverlay class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingTileTileOverlayEventArgs.#ctor">
            <summary>
            This is the constructor of DrawingTileTileOverlayEventArgs class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingTileTileOverlayEventArgs.#ctor(ThinkGeo.MapSuite.WpfDesktopEdition.Tile,ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            This is the constructor of DrawingTileTileOverlayEventArgs class.
            </summary>
            <param name="drawingTile">This parameter indicates a tile for drawing.</param>
            <param name="worldExtent">This parameter indicates an extent to draw on the tile.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingTileTileOverlayEventArgs.DrawingTile">
            <summary>
            This property gets and sets a tile for drawing.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingTileTileOverlayEventArgs.WorldExtent">
            <summary>
            This property gets and sets an extent to draw on the tile.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.DragMode">
            <summary>
            This enumeration specifies how the map markers can be dragged.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.DragMode.None">
            <summary>
            Specifies that the markers cannot be dragged.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.DragMode.Drag">
            <summary>
            Specifies that the markers can be dragged.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.DragMode.CopyWithShiftKey">
            <summary>
            Specifies that the markers can be dragged to copy with shift key.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddingEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.VertexAdding">VertexAdding.</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddingEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of VertexAddingEditInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddingEditInteractiveOverlayEventArgs.#ctor(System.Boolean,ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.Vertex)">
            <summary>
            Constructor of VertexAddingEditInteractiveOverlayEventArgs class.
            </summary>
            <param name="cancel">This parameter specified the cancel property.</param>
            <param name="affectedVertexFeature">This parameter specified the affectedVertex feature property.</param>
            <param name="addingVertex">This parameter specified the target vertex to be added.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddingEditInteractiveOverlayEventArgs.AffectedVertexFeature">
            <summary>
            Gets or sets the Feature to be used to move vertex.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddingEditInteractiveOverlayEventArgs.AddingVertex">
            <summary>
            Gets or sets the vertex to be added.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddingEditInteractiveOverlayEventArgs.Cancel">
            <summary>
            Gets or sets the action to be canceled or not.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureRotatingEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.FeatureRotating">FeatureRotating.</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureRotatingEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of FeatureRotatingEditInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureRotatingEditInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Feature,System.Boolean,ThinkGeo.MapSuite.Core.PointShape,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            Constructor of FeatureRotatingEditInteractiveOverlayEventArgs class.
            </summary>
            <param name="rotatingFeature">This parameter specified the target feature to be rotated.</param>
            <param name="cancel">This parameter specified the cancel property.</param>
            <param name="sourceControlPoint">This parameter specified the source control point to be roated.</param>
            <param name="targetControlPoint">This parameter specified the target control point to be roated.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureRotatingEditInteractiveOverlayEventArgs.RotatingFeature">
            <summary>
            Gets or sets the Feature to be roated.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureRotatingEditInteractiveOverlayEventArgs.SourceControlPoint">
            <summary>
            Gets or sets the source control point to roate.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureRotatingEditInteractiveOverlayEventArgs.TargetControlPoint">
            <summary>
            Gets or sets the target control point to roate.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureRotatingEditInteractiveOverlayEventArgs.Cancel">
            <summary>
            Gets or sets the action to be canceled or not.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.UriTile.Uri">
            <summary>
            This property indicates the requesting uri for the tile image source.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.UriTile.WebProxy">
            <summary>
            This property gets or sets the proxy used for requesting a Web Response.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Properties.Resources.EvaluationExpired">
            <summary>
              Looks up a localized string similar to The evaluation has expired.  Please contact ThinkGeo for purchasing option or an extension to the trial..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Properties.Resources.EvaluationNotInstall">
            <summary>
              Looks up a localized string similar to The evaluation edition has not been installed..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Properties.Resources.Unlicensed">
            <summary>
              Looks up a localized string similar to Unlicensed..
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.ProcessOtherOverlaysMode">
            <summary>
            This enumeration specifies the mode to process other overlays
            when doing interactive actions with InterativeOverlay.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.ProcessOtherOverlaysMode.Default">
            <summary>
            Default value of the enumation, the same as ProcessOtherOverlays.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.ProcessOtherOverlaysMode.ProcessOtherOverlays">
            <summary>
            This enumeration item means that other overlays will still be excuted.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.ProcessOtherOverlaysMode.DoNotProcessOtherOverlays">
            <summary>
            This enumeration item means that other overlays will be ignored.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseWheelInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MapMouseWheel">MapMouseWheel</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseWheelInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of MapMouseWheelInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseWheelInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>
            Constructor of MapMouseWheelInteractiveOverlayEventArgs class.
            </summary>
            <param name="interactionArguments">This parameter specified the interaction auguments to construct the class.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseWheelInteractiveOverlayEventArgs.InteractionArguments">
            <summary>
            This property gets the interaction auguments for the event args.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MapLeftClickDragMode">
            <summary>
            This enumeration specifies the behavior that occurs when you left-click-and-drag on the MapControl.
            The default value is ZoomInWithKey.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MapLeftClickDragMode.Default">
            <summary>
            Default value(ZoomInWithKey) of enumeration.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MapLeftClickDragMode.ZoomInWithKey">
            <summary>
            This enumeration item means that the map will ZoomIn when a left-click-and-drag operation occurs.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MapLeftClickDragMode.Disabled">
            <summary>
            This enumeration item means that the ZoomIn functionality for left-clicking-and-dragging will be disabled.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MapKeyUpInteractiveOverlayEventArgs">
            <summary>
            Represents the event arguments for MapKeyUp event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapKeyUpInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of MapKeyUpInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you must set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapKeyUpInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.WpfDesktopEdition.KeyEventInteractionArguments)">
            <summary>
            Constructor of MapKeyUpInteractiveOverlayEventArgs class.
            </summary>
            <param name="interactionArguments">This parameter specified the interaction arguments to construct the class.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapKeyUpInteractiveOverlayEventArgs.InteractionArguments">
            <summary>
            This property gets the interaction arguments for the event args.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MapDoubleRightClickMode">
            <summary>
            This enumeration specifies the behavior that occurs when double-right-clicking on the MapControl.
            The default value is ZoomOut.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MapDoubleRightClickMode.Default">
            <summary>
            Default value (ZoomOut) of the enumeration.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MapDoubleRightClickMode.ZoomOut">
            <summary>
            This enumeration item means that the map will ZoomOut when a double-right-click occurs.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MapDoubleRightClickMode.Disabled">
            <summary>
            This enumeration item means that the ZoomOut functionality for double-right-clicks will be disabled.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.GoogleMapsOverlay">
            <summary>
            This class represents the GoogleMapsOverlay which requests images from Google's
            image server by its StaticAPI.
            </summary>
            <remarks>
            This class represents the GoogleMapsOverlay which requests images from Google's
            image server by its StaticAPI. See <a href="http://code.google.com/apis/maps/signup.html">http://code.google.com/apis/maps/signup.html</a>
            for detail.
            </remarks>
            <requirements>A license key is required; or else Google's image server has usage limits.</requirements>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay">
            <summary>
            Represents an overlay that maintains tiles.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay">
            <summary>
            This class is the base class of all overlays in this overlay system.
            </summary>
            <remarks>
            	<para>The <strong>Overlay</strong> has the similar concept as the layer. Different
                types of overlays stack over each other to form a map. An overlay object is
                responsible for getting the configuration infomation from the user.</para>
            	<para>Usually an overlay represents an image with transparent background that is
                laid upon other overlay such as <strong>LayerOverlay</strong>,
                <strong>WmsOverlay</strong>. While the <strong>MarkerOverlay</strong> will not be
                rendered as an image, it is actually represents a control that holds
                bunch of marker images on the map.</para>
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.#ctor">
            <summary>
            Constructor of the Overlay class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.Initialize(ThinkGeo.MapSuite.WpfDesktopEdition.MapArguments)">
            <summary>
            This method initializes overlay object.
            </summary>
            <remarks>
            This is a wrapper method for the virtual method InitializeCore.
            </remarks>
            <param name="mapArguments">This parameter maintains current map information for calculating mechanism.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.InitializeCore(ThinkGeo.MapSuite.WpfDesktopEdition.MapArguments)">
            <summary>
            This method initializes overlay object.
            </summary>
            <remarks>
            When implementing this method, consider initializing the overlay canvas such as setting its z-index,
            setting current map reference to the CurrentMap property.
            </remarks>
            <param name="mapArguments">This parameter maintains current map information for calculating mechanism.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.Refresh">
            <summary>
            This method refreshes all the content in the OverlayCanvas.
            For example, LayerOverlay with multiple tiles; 
            when the style of one layer is changed, 
            call Refresh to refresh all the tiles to accept new styles.
            </summary>
            <remarks>
            The difference from Draw() method is that Refresh() method refreshs all the elements while Draw() does not.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.RefreshCore">
            <summary>
            This method refreshes all the content in the OverlayCanvas.
            For example, LayerOverlay with multiple tiles; 
            when the style of one layer is changed, 
            call Refresh to refresh all the tiles to accept new styles.
            </summary>
            <remarks>
            The difference from Draw() method is that Refresh() method refreshs all the elements while Draw() does not.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.Draw(ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            This method draws the overlay with the provided extent in world coordinate.
            </summary>
            <param name="targetExtent">This parameter indicates an extent in world coordinate for drawing the overlay.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.Draw(ThinkGeo.MapSuite.Core.RectangleShape,ThinkGeo.MapSuite.WpfDesktopEdition.RefreshType)">
            <summary>
            This method draws the overlay with the provided extent in world coordinate.
            </summary>
            <param name="targetExtent">This parameter indicates an extent in world coordinate for drawing the overlay.</param>
            <param name="refreshType">
            This parameter indicates whether the elements of this overlay needs to be refreshed.
            For example, TileOverlay is formed by tiles. 
            When panning the map around, the existing tile doesn't need to be redraw, 
            the only thing we need to do is modifying the position of these tiles. 
            On another hand, when click to change the style of the overlay, 
            we need to redraw the tile images to change the appearance. So we need refresh mode.
            </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.DrawCore(ThinkGeo.MapSuite.Core.RectangleShape,ThinkGeo.MapSuite.WpfDesktopEdition.RefreshType)">
            <summary>
            This method draws the overlay with the provided extent in world coordinate.
            </summary>
            <param name="targetExtent">This parameter indicates an extent in world coordinate for drawing the overlay.</param>
            <param name="refreshType">
            This parameter indicates whether the elements of this overlay needs to be refreshed.
            
            For example, TileOverlay is formed by tiles. 
            When panning or zooming the map, the existing tile doesn't need to be redraw, 
            because the styles are the same as the previous states. 
            the only thing we need to do is modifying the position of these tiles. 
            On another hand, when click to change the style of the overlay, 
            we need to redraw the tile images to change the appearance. So we need refresh mode.
            </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.PanTo(ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            This method pans the overlay to the provided world extent.
            </summary>
            <remarks>
            Some overlay doesn't need to continously drawing all the tile. 
            For example, MarkerOverlay is formed by markers. 
            When mouse down to pan, the markers don't need to redraw, we can only change its position. 
            When mouse up to end panning, we can redraw the overlay for better performance.
            </remarks>
            <param name="targetExtent">This parameter is the target world extent for panning.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.PanToCore(ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            This method pans the overlay to the provided world extent.
            </summary>
            <remarks>
            Some overlay doesn't need to continously drawing all the tile. 
            For example, MarkerOverlay is formed by markers. 
            When mouse down to pan, the markers don't need to redraw, we can only change its position. 
            When mouse up to end panning, we can redraw the overlay for better performance.
            </remarks>
            <param name="targetExtent">This parameter is the target world extent for panning.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.Cancel">
            <summary>
            This method cancel the drawing process in asynchronouse drawing.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.CancelCore">
            <summary>
            This method cancel the drawing process in asynchronouse drawing.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.OnDrawing(ThinkGeo.MapSuite.WpfDesktopEdition.DrawingOverlayEventArgs)">
            <summary>
            This method raises before the overlay is drawing.
            </summary>
            <param name="e">This parameter is the event argument for Drawing event.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.OnDrawn(ThinkGeo.MapSuite.WpfDesktopEdition.DrawnOverlayEventArgs)">
            <summary>
            This method raises after the overlay is drawn.
            </summary>
            <param name="e">This parameter is the event argument for Drawn event.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.GetBoundingBox">
            <summary>
            This method gets a bounding box of the Overlay.
            </summary>
            <returns>A RectangleShape indicating the bounding box of this overlay</returns>
            <remarks>
            This method is the concrete wrapper for the abstract method GetBoundingBoxCore.
            This method returns the bounding box of the Overlay.<br/>
            	<br/>
            As this is a concrete public method that wraps a Core method, we reserve the right
            to add events and other logic to pre- or post-process data returned by the Core version
            of the method. In this way, we leave our framework open on our end, but also allow you
            the developer to extend our logic to suit your needs. If you have questions about this,
            please contact our support team as we would be happy to work with you on extending our
            framework.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.GetBoundingBoxCore">
            <summary>This method returns the bounding box of the Overlay.</summary>
            <returns>This method returns the bounding box of the Overlay.</returns>
            <remarks>This method returns the bounding box of the Overlay.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.SaveState">
            <summary>
            This method saves overlay state to a byte array.
            </summary>
            <returns>A byte array indicates current overlay state.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.SaveStateCore">
            <summary>
            This method saves overlay state to a byte array.
            </summary>
            <returns>A byte array indicates current overlay state.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.LoadState(System.Byte[])">
            <summary>
            This method restore the overlay state back from the specified state.
            </summary>
            <param name="state">This parameter indicates the state for restore the overlay.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.LoadStateCore(System.Byte[])">
            <summary>
            This method restore the overlay state back from the specified state.
            </summary>
            <param name="state">This parameter indicates the state for restore the overlay.</param>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.Drawing">
            <summary>
            This event raises before the overlay is drawing.
            </summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.Drawn">
            <summary>
            This event raises after the overlay is drawn.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.Name">
            <summary>
            Gets or sets the name of this overaly.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.MapArguments">
            <summary>
            Gets or sets current map information which will be used for calculating mechanism.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.OverlayCanvas">
            <summary>
            Gets or sets the actual canvas which maintains all the visual elements on the overlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.PreviousExtent">
            <summary>
            Gets or sets the previous exent of the overlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.DrawingExceptionMode">
            <summary>
            This property gets and sets the DrawingExceptionMode used when an exception occurs during drawing.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.IsVisible">
            <summary>
            Gets or sets if this overlay is visible.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.IsOverlayInitialized">
            <summary>
            Gets or sets if the overlay canvas is initialized.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Overlay.IsEmpty">
            <summary>
            This property gets if this overlay is empty or not.
            </summary>
            <remarks>
            This property enhances the performance of the overlay while drawing. 
            If is true, we will skip drawing this overlay and continue drawing the next overlay.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.#ctor">
            <summary>
            Constructor of TileOverlay class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.DrawCore(ThinkGeo.MapSuite.Core.RectangleShape,ThinkGeo.MapSuite.WpfDesktopEdition.RefreshType)">
            <summary>
            Draws current overlay with provided world extent.
            </summary>
            <param name="targetExtent">A world extent for drawing.</param>
            <param name="refreshType"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.RefreshCore">
            <summary>
            Refreshes tiles on the overlay.
            
            When calling this mehtod, all the tiles including map tiles and stretched tiles will be cleared.
            And reform with new tiles.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.OnDrawTilesProgressChanged(ThinkGeo.MapSuite.WpfDesktopEdition.DrawTilesProgressChangedTileOverlayEventArgs)">
            <summary>
            Occurs when Tiles' download progress is changed.
            </summary>
            <param name="args">Event arguments for DownloadProgress event.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.OnDrawingTile(ThinkGeo.MapSuite.WpfDesktopEdition.DrawingTileTileOverlayEventArgs)">
            <summary>
            This method raises before a tile is drawing.
            </summary>
            <param name="args">This is an event argument for DrawingTile event.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.OnDrawnTile(ThinkGeo.MapSuite.WpfDesktopEdition.DrawnTileTileOverlayEventArgs)">
            <summary>
            This method raises after a tile is drawn.
            </summary>
            <param name="args">This is an event argument for DrawnTile event.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.GetTileCore">
            <summary>
            Chooses a tile object to form the TileOverlay.
            
            When overriding this method, consider the initialize parameters setting on the tile.
            </summary>
            <returns>A tile object to form the TileOverlay.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.SaveStateCore">
            <summary>
            This method saves overlay state to a byte array.
            </summary>
            <returns>A byte array indicates current overlay state.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.LoadStateCore(System.Byte[])">
            <summary>
            This method restore the overlay state back from the specified state.
            </summary>
            <param name="state">This parameter indicates the state for restore the overlay.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.DrawTileCore(ThinkGeo.MapSuite.WpfDesktopEdition.Tile,ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            Redraws a specified tile with the provided world extent.
            </summary>
            <param name="tile"></param>
            <param name="targetExtent"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.PanToCore(ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            Pans current overlay to the provided world extent.
            </summary>
            <remarks>
            This method occurs when panning the map only. It doesn't redraw the overlay. 
            If we keep drawing the tiles, first of all, it's not necessary; also causes performance issue.
            
            When overriding this method, consider changing the offset of the tiles only without redrawing them.
            </remarks>
            <param name="targetExtent"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.CancelCore">
            <summary>
            Cancels current drawing process. And remove all the tiles including tiles and stretched tiles.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.InitializeCore(ThinkGeo.MapSuite.WpfDesktopEdition.MapArguments)">
            <summary>
            This method initializes overlay object.
            </summary>
            <remarks>
            When implementing this method, consider initializing the overlay canvas such as setting its z-index,
            setting current map reference to the CurrentMap property.
            </remarks>
            <param name="mapArguments">This parameter maintains current map information for calculating mechanism.</param>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.DrawTilesProgressChanged">
            <summary>This event raises when download progress is changed.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.DrawingTile">
            <summary>This event raises before the tile is drawing.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.DrawnTile">
            <summary>This event raises after the tile is drawn.</summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.TileType">
            <summary>
            Gets and sets the overlay is formed by multiple tiles or single tile.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.TileWidth">
            <summary>
            Gets and sets the width of the tile.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.TileHeight">
            <summary>
            Gets and sets the height of the tile.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.TransitionEffect">
            <summary>
            Gets and sets the transition effect of the overlay when zooming.
            
            After zooming, the existing tiles stretch and leave in current viewport. 
            Set to None when its background is transparent.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.TileCache">
            <summary>
            Gets and sets a tile cache object for saving the tiles.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.ImageFormat">
            <summary>
            Gets and sets drawing format for the tiles.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.JpegQuality">
            <summary>
            Gets or sets the image quality when the TileImageFormat is Jpeg;
            otherwise this property has no effects. Its default value is 80.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.TileBuffer">
            <summary>
            This property gets and sets the number of extra rows and colums of tiles on each side which will surround the minimum grid tiles to cover the map.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.DrawingCanvas">
            <summary>
            Gets current drawing canvas which holds actual tile controls.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.TileOverlay.StretchCanvas">
            <summary>
            Gets current stretch canvas which holds stretched tile controls during the stretch transition.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.GoogleMapsOverlay.#ctor">
            <summary>Constructor of GoogleMapsOverlay class.</summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.GoogleMapsOverlay.#ctor(System.String,System.String)">
            <summary>
            Constructor of GoogleMapsOverlay class.
            </summary>
            <param name="clientId">The clientId for the GoogleMapsOverlay.</param>
            <param name="privateKey">The privateKey for the GoogleMapsOverlay.</param>
            <remarks>This constructor initializes a new layer and assgin a license key.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.GoogleMapsOverlay.#ctor(System.String,System.String,System.String)">
            <param name="cacheDirectory">The cacheDirectory for the GoogleMapsOverlay.</param>
            <param name="clientId">The clientId for the GoogleMapsOverlay.</param>
            <param name="privateKey">The privateKey for the GoogleMapsOverlay.</param>
            <remarks>This constructor initializes a new layer and assgin a license key.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.GoogleMapsOverlay.GetTileCore">
            <summary>
            This method gets a specific tile object to form an overlay.
            </summary>
            <returns>A Tile object to form an overlay.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.GoogleMapsOverlay.DrawTileCore(ThinkGeo.MapSuite.WpfDesktopEdition.Tile,ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            This method redraws a tile by an extent and geography unit.
            </summary>
            <param name="tile">A tile which needs to be redrawn.</param>
            <param name="targetExtent">An extent to be redrawn.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.GoogleMapsOverlay.GetPictureFormatString">
            <summary>
            This method gets a string that represents the picture format from Google Maps.
            </summary>
            <returns>Returns a string representing the picture format from GoogleMaps.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.GoogleMapsOverlay.GetBoundingBoxCore">
            <summary>
            This method gets an entire boundingbox for Google world map extent.
            </summary>
            <returns>Returns a RectangleShape indicating the extent of the Google world map.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.GoogleMapsOverlay.SaveStateCore">
            <summary>
            This method saves overlay state to a byte array.
            </summary>
            <returns>A byte array indicates current overlay state.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.GoogleMapsOverlay.LoadStateCore(System.Byte[])">
            <summary>
            This method restore the overlay state back from the specified state.
            </summary>
            <param name="state">This parameter indicates the state for restore the overlay.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.GoogleMapsOverlay.ClientId">
            <summary>
            This property gets and sets the clientId for the GoogleMapsOverlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.GoogleMapsOverlay.PrivateKey">
            <summary>
            This property gets and sets the privateKey for the GoogleMapsOverlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.GoogleMapsOverlay.CacheDirectory">
            <summary>
            Gets or sets the tile cache directory.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.GoogleMapsOverlay.MapType">
            <summary>
            Gets or sets the map types available from Google Maps.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.GoogleMapsOverlay.PictureFormat">
            <summary>
            Gets or sets the picture format that is returned from the Google service.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.GoogleMapsOverlay.WebProxy">
            <summary>
            This property gets or sets the proxy used for requesting a Web Response.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MapTools">
            <summary>
            Contains the different map tools as properties and acts as an entrance for
            setting these map controls.
            </summary>
            <remarks>
            This class is designed to be easy to use. It contains all the available
            tools of the map. You can find and set those map tools easily by using this
            class.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapTools.#ctor">
            <summary>
            Constructor of MapTools class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapTools.#ctor(ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap)">
            <summary>
            Constructor of MapTools class.
            </summary>
            <param name="wpfMap">A WpfMap object that all map tools in this object is based on.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapTools.Refresh">
            <summary>
            Refreshes all the map tools objects maintaining in the MapTools object.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapTools.Logo">
            <summary>
            Gets a shortcut of LogoMapTool object.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapTools.MouseCoordinate">
            <summary>
            Gets a shortcut of MouseCoordinate object.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapTools.PanZoomBar">
            <summary>
            Gets a shortcut of PanZoomBar object.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.Popup">
            <summary>
            This class represents a popup control for placing on the map.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.Popup.PositionProperty">
            <summary>
            This is a dependency property for the Position property.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Popup.#ctor">
            <summary>
            This is constructor of Popup class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Popup.#ctor(System.Double,System.Double)">
            <summary>
            This is constructor of Popup class.
            </summary>
            <param name="longitude">This is longitude of the popup.</param>
            <param name="latitude">This is latitude of the popup.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Popup.#ctor(ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            This is constructor of Popup class.
            </summary>
            <param name="position">This parameter indicates the position of the popup.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Popup.#ctor(System.Windows.Point)">
            <summary>
            This is constructor of Popup class.
            </summary>
            <param name="position">This parameter indicates the position of the popup.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Popup.Draw(ThinkGeo.MapSuite.Core.RectangleShape,System.Double,System.Double)">
            <summary>
            This method draws current popup on the PopupOverlay.
            </summary>
            <param name="targetExtent">This parameter indicates the extent that to place the popup.</param>
            <param name="drawingScreenWidth">This parameter indicates the screen width of the map.</param>
            <param name="drawingScreenHeight">This parameter indicates the screen height of the map.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Popup.DrawCore">
            <summary>
            This method draws popup on the PopupOverlay.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Popup.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call System.Windows.FrameworkElement.ApplyTemplate().
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Popup.OnPositionChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            This method raises when the Position property is changed.
            </summary>
            <param name="eventArgs"></param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Popup.Position">
            <summary>
            This property gets and sets the position of the popup.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerOverlay">
            <summary>
            This class represents an overlay which maintaining markers.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerOverlay.#ctor">
            <summary>
            Constructor of the marker overlay.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerOverlay.GetMarkersToDraw(ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            This method gets a marker collection for drawing on the overlay.
            </summary>
            <remarks>This is a wrapper method for the abstract method GetDrawingMarkersCore.</remarks>
            <param name="targetExtent">This parameter is the extent in world coordinate for requesting markers.</param>
            <returns>An marker collection for drawing.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerOverlay.GetMarkersToDrawCore(ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            This abstract method gets a collection of marker for drawing on the overlay.
            </summary>
            <remarks>
            When implementing this method, 
            consider requesting points in the provided world extent,
            then create marker controls from these points.
            </remarks>
            <param name="targetExtent">This parameter is the extent in world coordinate for creating markers.</param>
            <returns>A collection of markers which are used for placing on the overlay.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerOverlay.DrawCore(ThinkGeo.MapSuite.Core.RectangleShape,ThinkGeo.MapSuite.WpfDesktopEdition.RefreshType)">
            <summary>
            This method creates markers in the provided world extent and places on the overlay. 
            </summary>
            <param name="targetExtent">This parameter is the extent in world coordinate for filtering markers.</param>
            <param name="refreshType">This parameter indicates if the elements in the overlay needs to be refreshed.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerOverlay.PanToCore(ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            This method pans all the markers to the new world extent.
            </summary>
            <param name="targetExtent">This parameter is the target extent in world coordinate for panning.</param>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.DrawnTileTileOverlayEventArgs">
            <summary>
            This class represents an event argument for drawn tile in the TileOverlay class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawnTileTileOverlayEventArgs.#ctor">
            <summary>
            This is constructor of DrawnTileTileOverlayEventArgs class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawnTileTileOverlayEventArgs.#ctor(ThinkGeo.MapSuite.WpfDesktopEdition.Tile,ThinkGeo.MapSuite.Core.RectangleShape,System.Object)">
            <summary>
            This is constructor of DrawnTileTileOverlayEventArgs class.
            </summary>
            <param name="drawnTile">This parameter indicates a Tile object that is drawn.</param>
            <param name="worldExtent">This parameter indicates an world extent for drawn.</param>
            <param name="nativeImage">This parameter indicates a native image to drawn on.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.DrawnTileTileOverlayEventArgs.DrawnTile">
            <summary>
            This property gets and sets a Tile object that is drawn.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.DrawnTileTileOverlayEventArgs.WorldExtent">
            <summary>
            This property gets and sets an world extent for drawn.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.DrawnTileTileOverlayEventArgs.NativeImage">
            <summary>
            This property gets and sets a native image to drawn on.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.Marker">
            <summary>
            Represents a marker control on the map.
            </summary>
            <remarks>
            Marker control maintains a content control on the map. 
            Any Wpf control is allowed to set as its content.
            </remarks>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.Marker.PositionProperty">
            <summary>
            A dependency property of Position of Marker control.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.Marker.ImageSourceProperty">
            <summary>
            A dependency property of ImageSource of Marker control.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Marker.#ctor">
            <summary>
            Constructor of Marker class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Marker.#ctor(System.Double,System.Double)">
            <summary>
            Constructor of Marker class.
            </summary>
            <param name="worldX">X world coordinate of marker.</param>
            <param name="worldY">Y world coordinate of marker.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Marker.#ctor(ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            Constructor of Marker class.
            </summary>
            <param name="position">Marker position in world coordinate.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Marker.CloneDeep">
            <summary>
            Deeply clones a marker object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Marker.Draw(ThinkGeo.MapSuite.Core.RectangleShape,System.Double,System.Double)">
            <summary>
            Draws the marker by the provided extent, screen width and height.
            </summary>
            <param name="targetExtent">A world extent that the marker is placed on the map.</param>
            <param name="drawingScreenWidth">Current map screen width.</param>
            <param name="drawingScreenHeight">Current map screen height.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Marker.DrawCore">
            <summary>
            Draws the marker by the provided extent, screen width and height.
            </summary>
            <remarks>
            When implementing this method, change marker's left and top in screen coordinate.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Marker.OnApplyTemplate">
            <summary>
            Applys marker template.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Marker.OnPositionChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises when the position property is changed.
            </summary>
            <param name="eventArgs">Maintains arguments for PositionChanged event.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Marker.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures current size.
            </summary>
            <param name="constraint">Constraint size of marker</param>
            <returns>New size of marker after measuring.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Marker.Refresh">
            <summary>
            Refreshes marker.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Marker.RefreshCore">
            <summary>
            Refreshes marker.
            </summary>
            <remarks>
            When overriding, convert marker's world position to screen position and change its left and top.
            </remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Marker.Position">
            <summary>
            World Position of marker. It's a wrapper of the PositionProperty.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Marker.ImageSource">
            <summary>
            Image source of marker. It's a wrapper of the ImageSourceProperty.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Marker.XScreenOffset">
            <summary>
            Gets and sets screen offset x of marker image.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Marker.YScreenOffset">
            <summary>
            Gets and sets screen offset y of marker image.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.OverlayDrawingWpfMapEventArgs">
            <summary>
            This is the event arguments for the OverlayDrawn event on the MapEngine class. It
            is raised before any of the overlays are drawn.
            </summary>
            <remarks>
            This is the event arguments for the OverlayDrawing event on the MapEngine class. It
            is raised before any of the overlays are drawn. This event allows you to cancel, manipulate the
            Layer, or draw something with the canvas before the Layer draws.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.OverlayDrawingWpfMapEventArgs.#ctor">
            <summary>
            Constructor of OverlayDrawingWpfMapEventArgs class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.OverlayDrawingWpfMapEventArgs.#ctor(ThinkGeo.MapSuite.WpfDesktopEdition.Overlay,ThinkGeo.MapSuite.Core.RectangleShape,System.Boolean)">
            <summary>Constructor of OverlayDrawingWpfMapEventArgs class.</summary>
            <overloads>
            This constructor allows you to set the overlay to be drawn, the world extent and
            the image you are drawing on.
            </overloads>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="overlay">This parameter is the overlay that will be drawn.</param>
            <param name="targetExtent">This parameter is the canvas that will are drawing on.</param>
            <param name="cancel">This parameter specifies whether or not we will cancel drawing of the overlay.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.OverlayDrawingWpfMapEventArgs.Overlay">
            <summary>Gets or sets the overlay you will be drawing.</summary>
            <value>This property gets the overlay you will be drawing.</value>
            <remarks>None</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.OverlayDrawingWpfMapEventArgs.Cancel">
            <summary>
            Gets or sets whether the action will be canceled or not.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.OverlayDrawingWpfMapEventArgs.TargetExtent">
            <summary>
            Gets or sets the extent for drawing this overlay.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MouseCoordinateType">
            <summary>
            This enumeration determines the MousePostion Type that appears when the pointer is moving on the map.
            </summary>
            <remarks>
            Map.MousePosition.MousePostionType property uses this enumeration to determine which position type to appears
            when the pointer is moving around the map.
            </remarks>
            <example>
            	<para>The code example below demonstrates how to set the MousePositionType of a MousePosition control on the map.</para>
            	<code lang="CS" title="C#">
            Map.MapTools.MouseCoordinate.MouseCoordinateType = MouseCoordinateType.LongitudeLatitude
            </code>
            	<code lang="VB" title="Visual Basic">
            Map.MapTools.MouseCoordinate.MouseCoordinateType = MouseCoordinateType.LongitudeLatitude
            </code>
            </example>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MouseCoordinateType.Default">
            <summary>Default mouse position type, format: "longitude, latitude".</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MouseCoordinateType.LongitudeLatitude">
            <summary>Default mouse position type, format: "longitude, latitude".</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MouseCoordinateType.LatitudeLongitude">
            <summary>Default mouse position type, format: "latitude, longitude".</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MouseCoordinateType.DegreesMinutesSeconds">
            <summary>Appear degrees, minutes, seconds, format: "Degressº Minutes'' Seconds'".</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MouseCoordinateType.Custom">
            <summary>
            Customize format of mouse coordinates.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MouseCoordinateMapTool">
            <summary>
            Represents the coordinates of the mouse pointer, displayed in the lower right
            corner of the map.
            </summary>
            <remarks>
            The <strong>MouseCoordinateMapTool</strong> control represents the coordinates where
            the mouse pointer currently is. The default coordinate string is in the format "longitude,
            latitude".  
            You can also choose to display coordinates in DMS (degrees, minutes, seconds) or customize to.
            </remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MapTool">
            <summary>
            This class represents the base class of map controls.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapTool.#ctor">
            <summary>
            Constructor of MapTool class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapTool.#ctor(System.Boolean)">
            <summary>Constructor of MapTool class.</summary>
            <overloads>Initialize an instance of the MapTool class.</overloads>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapTool.Initialize(ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap)">
            <summary>
            This method initializes map tool.
            </summary>
            <param name="wpfMap"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapTool.InitializeCore(ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap)">
            <summary>
            This method initializes map tool.
            </summary>
            <remarks>
            When overriding this method, consider adding map tool onto the map.ToolsGrid panel.
            </remarks>
            <param name="wpfMap"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapTool.EnabledChangedCore(System.Boolean)">
            <summary>
            Occcurs when the Enabled property changes
            </summary>
            <param name="newValue">Indicates whether the visibility of MapTool is set as Visibility.Visible</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapTool.CurrentMap">
            <summary>
            Gets or sets current map that the mapTool will be drawn on
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MouseCoordinateMapTool.CoordinateTextProperty">
            <summary>
            This is a DependencyProperty for CoordinateText property.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MouseCoordinateMapTool.#ctor">
            <summary>
            Constructor of MouseCoordinateMapTool class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MouseCoordinateMapTool.OnApplyTemplate">
            <summary>
            Applys the template of MouseCoordinateMapTool.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MouseCoordinateMapTool.EnabledChangedCore(System.Boolean)">
            <summary>
            Occurs when changing IsEnable property.
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MouseCoordinateMapTool.OnCustomFormatted(ThinkGeo.MapSuite.WpfDesktopEdition.CustomFormattedMouseCoordinateMapToolEventArgs)">
            <summary>
            Occurs when choosing custom mouse coordinate type.
            </summary>
            <param name="args">Arguments for CustomFormattedMouseCoordinateMapToolEventArgs event.</param>
            <returns>A string value indicates the new custom format result of coordinate.</returns>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.MouseCoordinateMapTool.CustomFormatted">
            <summary>
            Raises when customizing the mouse coordinate.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MouseCoordinateMapTool.MouseCoordinateType">
            <summary>
            Gets and sets a type of mouse coordinate. 
            </summary>
            <remarks>
            When choosing Custom, 
            implement CustomizeMouseCoordinateFormat event to customize the appearance of the coordinates.
            </remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MouseCoordinateMapTool.CoordinateText">
            <summary>
            This property gets and sets current output coordinate string.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap">
            <summary>This class represents the map control.</summary>
            <remarks>
            The map class inherits from the control, so it can be dragged onto the
            page or be created and added to a page via code like the popular control itself. You also
            need to configure the properties of the map. The most important step is adding
            overlays, which generate images and stack them over each other to form a map image. The map
            control has many methods and events through which you can interact with the map.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.#ctor">
            <summary>Constructor of WPF MapControl.</summary>
            <remarks>Initilizes some class modular variables and hooks up events.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.OnApplyTemplate">
            <summary>
            Applys current map template.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.Refresh">
            <summary>
            Refreshes current map control.
            </summary>
            <remarks>
            Refreshes all the existing overlays and map tools.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.Refresh(ThinkGeo.MapSuite.WpfDesktopEdition.Overlay)">
            <summary>
            Refreshes a specified overlay.
            </summary>
            <param name="redrawOverlay">An overlay which needs to be refreshed.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.Refresh(System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.WpfDesktopEdition.Overlay})">
            <summary>
            Refreshes a specified overlay collection.
            </summary>
            <param name="redrawOverlays">A collection of overlay to be refreshed.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.GetSnappedExtent(ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            Gets a snapped extent from a specified extent.
            </summary>
            <remarks>
            The specified extent may not be the exact extent to be displayed in the pre-defined zoom level list. 
            To display properly, the source extent needs to be snapped first.
            </remarks>
            <param name="extent">An extent to be snapped.</param>
            <returns>An extent that is snapped from the provided extent.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.GetSnappedZoomLevelIndex(ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            Gets the snapped zoom level index from the provided world extent.
            </summary>
            <param name="targetExtent">A world extent to be snapped.</param>
            <returns>A snapped zoom level index in the zoom levels sychnonized by the SyncZoomLevelScales method.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.GetSnappedZoomLevelIndex(System.Double)">
            <summary>
            Gets the snapped zoom level index from the provided scale.
            </summary>
            <param name="scale">A scale to be snapped.</param>
            <returns>A snapped zoom level index in scale list sychnonized by the SyncZoomLevelScales method.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ZoomIn">
            <summary>
            Zooms the map in for one level
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ZoomIn(System.Int32)">
            <summary>
            Zooms the map in by the provided percentage.
            </summary>
            <param name="percentage">A scale to zoom the map in.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ZoomIntoCenter(System.Int32,ThinkGeo.MapSuite.Core.Feature)">
            <summary>
            Zooms the map in by the provided percentage and locates the map to the center of the provided feature.
            </summary>
            <param name="percentage">A scale to zoom the map in.</param>
            <param name="centerFeature">A new center feature of current map.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ZoomIntoCenter(System.Int32,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            Zooms the map in by the provided percentage and locates to the center of the provided feature.
            </summary>
            <param name="percentage">A scale to zoom the map in.</param>
            <param name="worldPoint">A new center of current map.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ZoomIntoCenter(System.Int32,ThinkGeo.MapSuite.Core.ScreenPointF)">
            <summary>
            Zooms the map in by the provided percentage and locates to the provided screen point.
            </summary>
            <param name="percentage">A scale to zoom the map in.</param>
            <param name="screenPoint">A new screen center to locate the map.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ZoomIntoCenter(System.Int32,System.Single,System.Single)">
            <summary>
            Zooms the map in by the provided percentage and locates to the provided screen x and y.
            </summary>
            <param name="percentage">A scale to zoom the map in.</param>
            <param name="screenX">Screen x to locate the map.</param>
            <param name="screenY">Screen y to locate the map.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ZoomOut">
            <summary>
            Zooms the map out for one level.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ZoomOut(System.Int32)">
            <summary>
            Zooms the map out by the provided percentage.
            </summary>
            <param name="percentage">A scale to zoom the map out.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ZoomOutToCenter(System.Int32,ThinkGeo.MapSuite.Core.Feature)">
            <summary>
            Zooms the map out by the provided percentage and locates map to the center of the provided feature.
            </summary>
            <param name="percentage">A scale to zoom the map out.</param>
            <param name="centerFeature">A new center feature of current map.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ZoomOutToCenter(System.Int32,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            Zooms the map out by the provided percentage and locates to the center of the provided feature.
            </summary>
            <param name="percentage">A scale to zoom the map out.</param>
            <param name="worldPoint">A new center of current map.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ZoomOutToCenter(System.Int32,ThinkGeo.MapSuite.Core.ScreenPointF)">
            <summary>
            Zooms the map out by the provided percentage and locates to the provided screen point.
            </summary>
            <param name="percentage">A scale to zoom the map out.</param>
            <param name="screenPoint">A new screen center to locate the map.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ZoomOutToCenter(System.Int32,System.Single,System.Single)">
            <summary>
            Zooms the map out by the provided percentage and locates to the provided screen x and y.
            </summary>
            <param name="percentage">A scale to zoom the map out.</param>
            <param name="screenX">Screen x to locate the map.</param>
            <param name="screenY">Screen y to locate the map.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ZoomToScale(System.Double)">
            <summary>
            Zooms the map to a provided scale.
            </summary>
            <param name="targetScale">Target scale to zoom the map.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ZoomToScale(System.Double,ThinkGeo.MapSuite.Core.ScreenPointF)">
            <summary>
            Zooms the map to a provided scale and locates the map by the provided screen offset.
            </summary>
            <param name="targetScale">Target scale to zoom the map.</param>
            <param name="offsetScreenPoint">An screen offset to locate the map.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ZoomToScale(System.Double,System.Single,System.Single)">
            <summary>
            Zooms the map to a provided scale and locates the map by the provided screen offset.
            </summary>
            <param name="targetScale">Target scale to zoom the map.</param>
            <param name="offsetScreenX">An screen offset x to locate the map.</param>
            <param name="offsetScreenY">An screen offset y to locate the map.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.FindFeatureLayer(System.String)">
            <summary>
            Finds a FeatureLayer by the specified key.
            </summary>
            <param name="key">A key of a FeatureLayer which is defined when adding the layer into the LayerOverlay.</param>
            <returns>A FeatureLayer which is paired with the specified key in the map overlays.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.FindRasterLayer(System.String)">
            <summary>
            Finds a RasterLayer by the specified key.
            </summary>
            <param name="key">A key of a RasterLayer which is defined when adding the layer into the LayerOverlay.</param>
            <returns>A RasterLayer which is paired with the specified key in the map overlays.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ToWorldCoordinate(System.Double,System.Double)">
            <summary>
            Converts the provided screen points to world points.
            </summary>
            <param name="screenX">Screen x to be converted.</param>
            <param name="screenY">Screen y to be converted.</param>
            <returns>A world point that is converted from the provided parameters.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ToWorldCoordinate(ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            Converts the provided screen points to world points.
            </summary>
            <param name="screenCoordinate">Screen point to be converted.</param>
            <returns>A world point that is converted from the provided parameters.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ToWorldCoordinate(System.Windows.Point)">
            <summary>
            Converts the provided screen points to world points.
            </summary>
            <param name="screenCoordinate">Screen point to be converted.</param>
            <returns>A world point that is converted from the provided parameters.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ToScreenCoordinate(System.Double,System.Double)">
            <summary>
            Converts the provided world points to screen points.
            </summary>
            <param name="worldX">World x to be converted.</param>
            <param name="worldY">World y to be converted.</param>
            <returns>A screen coordinate that is converted.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ToScreenCoordinate(ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            Converts the provided world points to screen points.
            </summary>
            <param name="worldCoordinate">World point to be converted.</param>
            <returns>A screen coordinate that is converted.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ToScreenCoordinate(System.Windows.Point)">
            <summary>
            Converts the provided world points to screen points.
            </summary>
            <param name="worldCoordinate">World point to be converted.</param>
            <returns>A screen coordinate that is converted.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.Pan(System.Single,System.Int32)">
            <summary>This function will pan the currentExtent based on an angle and percentage.</summary>
            <overloads>This overload allows you to pass in an angle and a percentage by which you want to
            pan.</overloads>
            <returns>None.</returns>
            <remarks>This method will change the current extent by panning according to the angle and percentage specified.</remarks>
            <param name="degree">This parameter is the degree (angle) in which you want to pan.</param>
            <param name="percentage">This parameter is the percentage by which you want to pan.</param>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">
            This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WpfMap.
            </exception>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.Pan(ThinkGeo.MapSuite.Core.PanDirection,System.Int32)">
            <summary>This function will pan the currentExtent based on a direction and percentage.</summary>
            <overloads>This overload allows you to pass a degree and percentage.</overloads>
            <returns>None.</returns>
            <remarks>This method will change the current extent by panning according to the direction and percentage specified.</remarks>
            <param name="panDirection">This parameter is the direction in which you want to pan.</param>
            <param name="percentage">This parameter is the percentage by which you want to pan.</param>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WpfMap.</exception>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.Pan(System.Double,System.Double)">
            <summary>
            Pans the map by the provided screen offset.
            </summary>
            <param name="offsetScreenX">Screen offset X to be paned.</param>
            <param name="offsetScreenY">Screen offset Y to be paned.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.CenterAt(ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            Locates the map center to the specified world point.
            </summary>
            <param name="worldPoint">A world point to locate the map.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.CenterAt(ThinkGeo.MapSuite.Core.ScreenPointF)">
            <summary>
            Locates the map center to the specified screen point.
            </summary>
            <param name="screenPoint">A screen point to locate the map.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.CenterAt(ThinkGeo.MapSuite.Core.Feature)">
            <summary>
            Locates the map center to the center of the specified feature.
            </summary>
            <param name="centerFeature">A feature to locates the map center.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.CenterAt(System.Single,System.Single)">
            <summary>
            Locates the map center to the center of the specified feature.
            </summary>
            <param name="screenX">Screen x to locate the map center.</param>
            <param name="screenY">Screen y to locate the map center.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.GetVersion">
            <summary>
            This static method will be useful when you want to report a bug in a specified
            version of Map Suite. You can use it to tell ThinkGeo support which version you are trying to
            use.
            </summary>
            <returns>
            A string representing the version of the MapSuiteCore and Map Suite Desktop product that you are now
            using.
            </returns>
            <example>
            	<code lang="CS" title="C# sample" description="This code shows how to use this API to get the version of the Map Suite product you are using now.">
            string version = WpfMap.GetVersion();
            </code>
            	<code lang="VB" title="VB sample" description="This code shows how to use this API to get the version of the Map Suite product you are using now.">
            Dim version As String = WpfMap.GetVersion()
            </code>
            </example>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ToggleMapExtents">
            <summary>
            Toggles the map between current extent and previous extent.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ZoomToPreviousExtent">
            <summary>
            Zooms the map to the previous extent.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.SaveState">
            <summary>
            This method saves map state to a byte array.
            </summary>
            <returns>A byte array indicates current map state.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.SaveStateCore">
            <summary>
            This method saves map state to a byte array.
            </summary>
            <returns>A byte array indicates current map state.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.LoadState(System.Byte[])">
            <summary>
            This method restore map state back from the specified state.
            </summary>
            <param name="state">This parameter indicates the state for restore the map.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.LoadStateCore(System.Byte[])">
            <summary>
            This method restore map state back from the specified state.
            </summary>
            <param name="state">This parameter indicates the state for restore the map.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.Dispose">
            <summary>
            Disposes unmanaged objects in map.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.Finalize">
            <summary>
            Finalize method of WpfMap class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.Dispose(System.Boolean)">
            <summary>
            Disposes unmanaged objects in map.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.Draw(ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            Draws the map by the provided extent.
            </summary>
            <param name="targetExtent">An extent that to draw current map.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.Draw(ThinkGeo.MapSuite.Core.RectangleShape,ThinkGeo.MapSuite.WpfDesktopEdition.RefreshType)">
            <summary>
            Draws the map by the provided extent.
            </summary>
            <param name="targetExtent">An extent that to draw current map.</param>
            <param name="refreshType">Indicates whether the map needs to be refreshed.
            For example, a style of layer is changed, the overlay needs to be refreshed. 
            When panning, the overlay only changes its position, refresh is not needed.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.OnMapClick(ThinkGeo.MapSuite.WpfDesktopEdition.MapClickWpfMapEventArgs)">
            <summary>
            Occurs when clicking on the map.
            </summary>
            <param name="e">Event argument for MapClick event.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.OnMapDoubleClick(ThinkGeo.MapSuite.WpfDesktopEdition.MapClickWpfMapEventArgs)">
            <summary>
            Occurs when double clicking on the map.
            </summary>
            <param name="e">Event argument for MapDoubleClick event.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.OnCurrentExtentChanging(ThinkGeo.MapSuite.WpfDesktopEdition.CurrentExtentChangingWpfMapEventArgs)">
            <summary>
            Occurs when map's current extent is changing.
            </summary>
            <param name="e">Event argument for CurrentExtentChanging event.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.OnCurrentExtentChanged(ThinkGeo.MapSuite.WpfDesktopEdition.CurrentExtentChangedWpfMapEventArgs)">
            <summary>
            Occurs when map's current extent is changed.
            </summary>
            <param name="e">Event argument for CurrentExtentChanged event.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.OnCurrentScaleChanging(ThinkGeo.MapSuite.WpfDesktopEdition.CurrentScaleChangingWpfMapEventArgs)">
            <summary>
            Occurs when map's current scale is changing.
            </summary>
            <param name="e">Event argument for CurrentScaleChanging event.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.OnCurrentScaleChanged(ThinkGeo.MapSuite.WpfDesktopEdition.CurrentScaleChangedWpfMapEventArgs)">
            <summary>
            Occurs when map's current scale is changed.
            </summary>
            <param name="e">Event argument for CurrentScaleChanged event.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.OnOverlayDrawing(ThinkGeo.MapSuite.WpfDesktopEdition.OverlayDrawingWpfMapEventArgs)">
            <summary>
            Occurs when an overlay is drawing.
            </summary>
            <param name="e">Event argument for OverlayDrawing event.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.OnOverlayDrawn(ThinkGeo.MapSuite.WpfDesktopEdition.OverlayDrawnWpfMapEventArgs)">
            <summary>
            Occurs when an overlay is drawn.
            </summary>
            <param name="e">Event argument for OverlayDrawn event.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.OnOverlaysDrawing(ThinkGeo.MapSuite.WpfDesktopEdition.OverlaysDrawingWpfMapEventArgs)">
            <summary>
            Occurs when all overlays are drawing.
            </summary>
            <param name="e">Event argument for OverlaysDrawing event.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.OnOverlaysDrawn(ThinkGeo.MapSuite.WpfDesktopEdition.OverlaysDrawnWpfMapEventArgs)">
            <summary>
            Occurs when overlays are drawn.
            </summary>
            <param name="e">Event argument for OverlaysDrawn event.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.BackgroundOverlay">
            <summary>Gets or sets the background overlay.</summary>
            <example>
            	<code lang="CS" title="C# Sample" description="This code shows how to use the backgroundOverlay.">
            wpfMap1.BackgroundOverlay.BackgroundBrush = new GeoSolidBrush(GeoColor.GeographicColors.ShallowOcean);
            </code>
            	<code lang="VB" title="VB Sample" description="This code shows how to use the backgroundOverlay.">
            wpfMap1.BackgroundOverlay.BackgroundBrush = New GeoSolidBrush(GeoColor.GeographicColors.ShallowOcean)
            </code>
            </example>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.TrackOverlay">
            <summary>Gets or sets the track overlay in the MapControl.</summary>
            <example>
            	<code lang="CS" title="C# Sample" description="This code shows how to change the TrackMode of the MapControl to Track an ellipse out.">
             wpfMap1.TrackOverlay.TrackMode = TrackMode.Ellipse;
            </code>
            	<code lang="VB" title="VB Sample" description="This code shows how to change the TrackMode of the MapControl to Track an ellipse out.">
             wpfMap1.TrackOverlay.TrackMode = TrackMode.Ellipse
            </code>
            </example>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ExtentOverlay">
            <summary>Gets or sets the extent overlay in the MapControl.</summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.EditOverlay">
            <summary>Gets or sets the edit overlay in the MapControl.</summary>
            <example>
            	<code lang="CS" title="C# Sample" description="This code shows you one way to delete the single last shape in the EditShapsLayer contained in EditOverlay.">
            	case "btnTrackDelete":
            	        int lastIndex = wpfMap1.EditOverlay.EditShapesLayer.InternalFeatures.Count - 1;
            	        if (lastIndex >= 0)
            	        {
            	            wpfMap1.EditOverlay.EditShapesLayer.InternalFeatures.RemoveAt(lastIndex);
            	            wpfMap1.EditOverlay.CalculateAllControlPoints();
            	        }
            	        wpfMap1.Refresh(wpfMap1.EditOverlay);
            	        break;
                </code>
            	<code lang="VB" title="VB Sample" description="This code shows you one way to delete the single last shape in the EditShapsLayer contained in EditOverlay.">
                Case "btnTrackDelete"
                        Dim lastIndex As Integer = wpfMap1.EditOverlay.EditShapesLayer.InternalFeatures.Count - 1
                        If (lastIndex >= 0) Then
                            wpfMap1.EditOverlay.EditShapesLayer.InternalFeatures.RemoveAt(lastIndex)
                            wpfMap1.EditOverlay.CalculateAllControlPoints()
                        End If
                        wpfMap1.Refresh(wpfMap1.EditOverlay)
                        Exit Select
                </code>
            </example>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.AdornmentOverlay">
            <summary>Gets or sets the adornment overlay in the MapControl.</summary>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WpfMap.</exception>
            <example>
            	<code lang="CS" title="C# Sample" description="This code shows how to add a ScaleLine adornmentlayer to the MapControl.">
            ScaleLineAdornmentLayer scaleLineAdornmentLayer = new ScaleLineAdornmentLayer();
            wpfMap1.AdornmentOverlay.Layers.Add("ScaleLineAdornmentLayer", scaleLineAdornmentLayer);
            </code>
            	<code lang="VB" title="VB Sample" description="This code shows how to add a ScaleLine adornmentlayer to the MapControl.">
            Dim scaleLineAdornmentLayer As New ScaleLineAdornmentLayer()
            wpfMap1.AdornmentOverlay.Layers.Add("ScaleLineAdornmentLayer", scaleLineAdornmentLayer)
            </code>
            </example>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.MapUnit">
            <summary>Gets or sets the map unit used by the MapControl.</summary>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WpfMap.</exception>
            <example>
            	<code lang="CS" title="C# Sample" description="This code shows how to set the MapUnit.">
             wpfMap1.MapUnit = GeographyUnit.Meter;
            </code>
            	<code lang="VB" title="VB Sample" description="This code shows how to set the MapUnit.">
             wpfMap1.MapUnit = GeographyUnit.Meter 
            </code>
            </example>
            <remarks>The MapUnit reflects the data unit.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.CurrentExtent">
            <summary>
            Gets or sets the current extent of the MapControl.
            </summary>
            <remarks>The current extent stands for the extent of current position, this is 
            very important metrics to caculate the scale.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.Overlays">
            <summary>This property gets the collection of Overlays in the MapControl.</summary>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WpfMap.</exception>
            <example>
            	<code lang="CS" title="C# Sample" description="This code shows how to add an overlay to the Overlays collection.">
             LayerOverlay staticOverlay = new LayerOverlay();
             staticOverlay.Layers.Add("WorldLayer", worldLayer);
             wpfMap1.Overlays.Add("WorldOverlay", staticOverlay);
            </code>
            	<code lang="VB" title="VB Sample" description="This code shows how to add an overlay to the Overlays collection.">
             Dim staticOverlay As New LayerOverlay()
             staticOverlay.Layers.Add("WorldLayer", worldLayer)
             wpfMap1.Overlays.Add(staticOverlay)
            </code>
            </example>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.InteractiveOverlays">
            <summary>This property gets the collection of InteractiveOverlays in the MapControl.</summary>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WpfMap.</exception>
            <remarks>This property is used when you want to change the default behavior of the InteractiveOverlay or add your own
            customized InteractiveOverlay.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.MaxExtent">
            <summary>
            This property gets the map extent of the map control.
            </summary>
            <remarks>
            Affected by MapUnit. For example,
            DecimalDegree: MaxExtent = new RectangleShape(-180, 180, 180, -180)
            Meter: MaxExtent = new RectangleShape(-20001365, 20001365, 20001365, -20001365)
            Feet: MaxExtent = new RectangleShape(-65621310, 65621310, 65621310, -65621310)
            </remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.OverlayCanvas">
            <summary>
            Gets a canvas control to maintain current overlays in the DOM tree.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.EventCanvas">
            <summary>
            Gets a canvas control to hook all the events of the map.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ToolsGrid">
            <summary>
            Gets a grid control to hold all the map tools.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.MapTools">
            <summary>
            Gets a object for simply using MapTools.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.CurrentScale">
            <summary>
            Gets or sets current viewport scale.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.CurrentResolution">
            <summary>
            Gets or sets current resolution.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.ZoomLevelScales">
            <summary>
            Gets a collection that holds a scale list for navigation.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.MapResizeMode">
            <summary>
            Gets a strategy for changing extent when resizes map control.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.MaximumScale">
            <summary>
            This property gets and sets a maximum scale when navigating the map. 
            
            When you keep zooming out, and the target scale is bigger than the maximum scale,
            the zooming operation will be stopped.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.MinimumScale">
            <summary>
            This property gets and sets a minimum scale when navigating the map. 
            
            When you keep zooming in, and the target scale is smaller than the minimum scale,
            the zooming operation will be stopped.
            </summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.MapClick">
            <summary>
            Occurs when clicking on the map.
            </summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.MapDoubleClick">
            <summary>
            Occurs when double click on the map.
            </summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.CurrentExtentChanging">
            <summary>
            Occurs before map's extent is changing.
            </summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.CurrentExtentChanged">
            <summary>
            Occurs after map's extent is changed.
            </summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.CurrentScaleChanging">
            <summary>
            Occurs before map's current scale is changing.
            </summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.CurrentScaleChanged">
            <summary>
            Occurs after map's current scale is changed.
            </summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.OverlayDrawing">
            <summary>
            Occurs before an overlay is drawing.
            </summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.OverlayDrawn">
            <summary>
            Occurs after an overlay is drawn.
            </summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.OverlaysDrawing">
            <summary>
            Occurs before all overlays are drawing.
            </summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.OverlaysDrawn">
            <summary>
            Occurs after all overlays are drawn.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.TransitionEffect">
            <summary>
            This enumeration specifies the type of transition effect to use
            when the map is panned or zoomed.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.TransitionEffect.None">
            <summary>
            Specifies that no transition effect is used.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.TransitionEffect.Stretch">
            <summary>
            Specifies that existing tiles are resized on zoom to provide a visual
            effect of the zoom having taken place immediately.  As the new tiles 
            become available, they are drawn over top of the resized tiles.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.BackgroundOverlay">
            <summary>
            This class inherits from the Overlay abstract class. The specified overlay 
            specifies the background information of the MapControl.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.BackgroundOverlay.#ctor">
            <summary>Constructor of BackgroundOverlay class.</summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.BackgroundOverlay.DrawCore(ThinkGeo.MapSuite.Core.RectangleShape,ThinkGeo.MapSuite.WpfDesktopEdition.RefreshType)">
            <summary>
            This method override the DrawCore logic of the Overlay class.
            </summary>
            <param name="targetExtent">This parameter specifies the extent for drawing this overlay.</param>
            <param name="refreshType">This parameter specifies whether this overlay need to be clear and refresh or not.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.BackgroundOverlay.SaveStateCore">
            <summary>
            This method saves overlay state to a byte array.
            </summary>
            <returns>A byte array indicates current overlay state.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.BackgroundOverlay.LoadStateCore(System.Byte[])">
            <summary>
            This method restore the overlay state back from the specified state.
            </summary>
            <param name="state">This parameter indicates the state for restore the overlay.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.BackgroundOverlay.BackgroundBrush">
            <summary>
            Gets or sets the background brush for the MapControl.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.OverlaysDrawnWpfMapEventArgs">
            <summary>
            This is the event arguments for the OverlaysDrawn event on the MapEngine class. It
            is raised after the overlays are drawn.
            </summary>
            <remarks>
            This is the event arguments for the OverlaysDrawn event on the MapEngine class. It
            is raised after the overlays are drawn. This event allows you draw something
            with the canvas after the Layer draws.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.OverlaysDrawnWpfMapEventArgs.#ctor">
            <summary>Constructor of OverlaysDrawnWpfMapEventArgs class.</summary>
            <overloads>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </overloads>
            <returns>None</returns>
            <remarks>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.OverlaysDrawnWpfMapEventArgs.#ctor(System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.WpfDesktopEdition.Overlay},ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>Constructor of OverlaysDrawnWpfMapEventArgs class.</summary>
            <overloads>
            This constructor allows you to set the overlays drawn, the world extent and
            the image you have drawn on.
            </overloads>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="overlays">This parameter is the overlays that have been drawn.</param>
            <param name="worldExtent">This parameter is the wold extent that has been drawn.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.OverlaysDrawnWpfMapEventArgs.WorldExtent">
            <summary>Gets or sets the world extent that has been drawn.</summary>
            <value>This property gets the world extent that has been drawn.</value>
            <remarks>None</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.OverlaysDrawnWpfMapEventArgs.Overlays">
            <summary>This property gets the overlays you have drawn.</summary>
            <value>This property gets the overlays you have drawn.</value>
            <remarks>None</remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoImage">
            <summary>
            This class represents an GeoImage object for WPF.
            
            It maintains an Uri and Stream for the image source.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoImage.#ctor">
            <summary>
            This is constructor of WpfGeoImage class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoImage.#ctor(System.IO.Stream)">
            <summary>
            Constructor of WpfGeoImage class.
            </summary>
            <param name="sourceStream">A Stream indicates the source of the Wpf image.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoImage.#ctor(System.IO.Stream,System.Double,System.Double)">
            <summary>
            Constructor of WpfGeoImage class.
            </summary>
            <param name="sourceStream">A Stream indicates the source of the Wpf image.</param>
            <param name="width">Width of the WpfGeoImage in screen coordinate.</param>
            <param name="height">Height of the WpfGeoImage in screen coordinate.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoImage.#ctor(System.Uri,System.Double,System.Double)">
            <summary>
            Constructor of WpfGeoImage class.
            </summary>
            <param name="imageUri">
            An Uri of the image source. Internet uri and related uri are both supported.
            </param>
            <param name="width">Width of the WpfGeoImage in screen coordinate.</param>
            <param name="height">Height of the WpfGeoImage in screen coordinate.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoImage.#ctor(System.Uri)">
            <summary>
            Constructor of WpfGeoImage class.
            </summary>
            <param name="imageUri">
            An Uri of the image source. Internet uri and related uri are both supported.
            </param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoImage.ImageUri">
            <summary>
            Image source uri which can be internet uri or a related uri in the resource.
            
            If SourceStream and ImageUri are both setted, SourceStream has higher priority.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoImage.WidthInPixel">
            <summary>
            Width of the WpfGeoImage in screen coordinate.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoImage.HeightInPixel">
            <summary>
            Height of the WpfGeoImage in screen coordinate.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoImage.SourceStream">
            <summary>
            Stream source of the GeoImage. 
            
            If SourceStream and ImageUri are both setted, SourceStream has higher priority.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddedEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.VertexAdded">VertexAdded.</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddedEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of VertexAddedEditInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddedEditInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.Vertex)">
            <summary>
            Constructor of VertexAddedEditInteractiveOverlayEventArgs class.
            </summary>
            <param name="affectedVertexFeature">This parameter specified the affectedVertex feature property.</param>
            <param name="addedVertex">This parameter specified the target vertex added.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddedEditInteractiveOverlayEventArgs.AffectedVertexFeature">
            <summary>
            Gets or sets the Feature to be used to remove vertex.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddedEditInteractiveOverlayEventArgs.AddedVertex">
            <summary>
            Gets or sets the vertex added.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseMoveInteractiveOverlayEventArgs">
            <summary>
            Represents the event arguments for MapMouseMove event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseMoveInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of MapMouseMoveInteractiveOverlayEventArgs class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseMoveInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>
            Constructor of MapMouseMoveInteractiveOverlayEventArgs class.
            </summary>
            <param name="interactionArguments">Contains event arguments for interacting with map object.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseMoveInteractiveOverlayEventArgs.InteractionArguments">
            <summary>
            Gets and sets the event arguments for interacting with map object.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.DrawTilesProgressChangedTileOverlayEventArgs">
            <summary>
            This method is the event args for download progress when requesting images in TileOverlay.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawTilesProgressChangedTileOverlayEventArgs.#ctor">
            <summary>
            Constructor of DrawTilesProgressChangedTileOverlayEventArgs class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawTilesProgressChangedTileOverlayEventArgs.#ctor(System.Int32)">
            <summary>
            Constructor of DrawTilesProgressChangedTileOverlayEventArgs class.
            </summary>
            <param name="drawTilesProgress">An integar value indicates the download progress which is from 0 to 100.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.DrawTilesProgressChangedTileOverlayEventArgs.DrawTilesProgress">
            <summary>
            This property indicates the draw progress for TileOverlay whose range is from 0 to 100.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseWheelMode">
            <summary>
            This enumeration specifies the behavior that occurs when the mouse wheel is scrolled.
            The default value is Zooming.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseWheelMode.Default">
            <summary>
            Default value (Zooming) of the enumeration.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseWheelMode.Zooming">
            <summary>
            This enumeration item means that the map will ZoomIn or ZoomOut when the mouse wheel is scrolled up or down, respectively.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseWheelMode.Disabled">
            <summary>
            This enumeration item means that the mouse wheel will be disabled and will have no effect on the MapControl.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MapKeyDownInteractiveOverlayEventArgs">
            <summary>
            Represents the event arguments for MapKeyDown event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapKeyDownInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of MapKeyDownInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you must set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapKeyDownInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.WpfDesktopEdition.KeyEventInteractionArguments)">
            <summary>
            Constructor of MapKeyDownInteractiveOverlayEventArgs class.
            </summary>
            <param name="interactionArguments">This parameter specified the interaction arguments to construct the class.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapKeyDownInteractiveOverlayEventArgs.InteractionArguments">
            <summary>
            This property gets the interaction arguments for the event args.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MapArguments">
            <summary>
            Contains important properties and methods of current map object.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapArguments.#ctor">
            <summary>
            Constructor of MapArguments.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapArguments.ToWorldCoordinate(ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            Converts a point from screen coordinate to world coordinate.
            </summary>
            <param name="screenCoordinate">A point in screen coordinate to be converted.</param>
            <returns>A point in world coordinate.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapArguments.ToScreenCoordinate(ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            Converts a point from world coordinate to screen coordinate.
            </summary>
            <param name="worldCoordinate">A point in world coordinate to be converted.</param>
            <returns>A point in screen coordinate.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapArguments.GetSnappedZoomLevelIndex(ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            Gets a snapped zoom level index from the provided extent.
            </summary>
            <remarks>
            The extent will automatically snapped a closest scale from the ZoomLevelScale list, 
            and create an extent back with the map's screen width and height.
            </remarks>
            <param name="extent">An extent to be snapped.</param>
            <returns>An integar value that indicates the snapped zoom level index.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapArguments.GetSnappedZoomLevelIndex(System.Double)">
            <summary>
            Gets a snapped zoom level index from the provided scale.
            </summary>
            <remarks>
            The scale will automatically snapped a closest scale from the ZoomLevelScale list, 
            and create an extent back with the map's screen width and height.
            </remarks>
            <param name="scale">A scale to be snapped.</param>
            <returns>An integar value that indicates the snapped zoom level index.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapArguments.GetSnappedExtent(ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            Gets a snapped extent from the provided extent.
            </summary>
            <param name="extent">An extent to be snapped.</param>
            <returns>A RectangleShape object that indicates the extent which is snapped.</returns>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapArguments.MapUnit">
            <summary><para>Gets or sets the <strong>GeographyUnit</strong> for the map.</para></summary>
            <value>
            The <strong>GeographyUnit</strong> object that indicates which geography unit the
            map is currently using.
            </value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapArguments.ActualWidth">
            <summary>
            Gets or sets the width of current map object in screen coordinate.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapArguments.ActualHeight">
            <summary>
            Gets or sets the height of current map object in screen coordinate.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapArguments.ZoomLevelScales">
            <summary>
            Gets a collection of double values that determines the zoomlevel scales.
            </summary>
            <value>
            A collection of double values that determines the openlayers' zoomlevel
            scales.
            </value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapArguments.CurrentResolution">
            <summary>Gets or sets a double value that indicates the current resolution of the map.</summary>
            <value>A double value that indicates the current resolution of the map.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapArguments.CurrentScale">
            <summary>Gets or sets a double value that indicates the current scale of the map.</summary>
            <value>A double value that indicates the current scale of the map.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapArguments.MaximumScale">
            <summary>
            This property gets and sets a maximum scale when navigating the map. 
            
            When you keep zooming out, and the target scale is bigger than the maximum scale,
            the zooming operation will be stopped.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapArguments.MinimumScale">
            <summary>
            This property gets and sets a minimum scale when navigating the map. 
            
            When you keep zooming in, and the target scale is smaller than the minimum scale,
            the zooming operation will be stopped.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapArguments.CurrentExtent">
            <summary>
            Gets or sets the extent of current map.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapArguments.MaxExtent">
            <summary>
            Gets or sets the max extent of current map.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.PanZoomBarMapTool">
            <summary>
            Represents the panning and zooming panel in the upper left corner of the
            map.
            </summary>
            <remarks>
            The PanZoomBar map tool consists of a panning control, two zooming buttons and a
            zoomlevel bar. The panning controls have four panning buttons and a globe button that
            zooms the map out to show the whole world. The zoomlevel bar represents the zoomlevels
            of the map (20 zoomlevels altogether). There is a slider on the zoomlevel bar that
            indicates the map's current zoomlevel. By moving the slider, you can change the map to a
            different zoomlevel. This map tool is enabled by default.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.PanZoomBarMapTool.#ctor">
            <summary>
            Constructor of PanZoomBarMapTool class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.PanZoomBarMapTool.OnApplyTemplate">
            <summary>
            Applys the template of the PanZoomBarMapTool class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.PanZoomBarMapTool.EnabledChangedCore(System.Boolean)">
            <summary>
            Occurs when the IsEnable property is changed.
            </summary>
            <param name="newValue">Whether the tool is enabled or not.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.PanZoomBarMapTool.DisplayZoomBarText">
            <summary>
            Gets and sets whether the track level feature is enabled.
            </summary>
            <remarks>
            If it's none, a small zoom level tip won't appear when dragging the zoom bar up and down.
            
            The default value is None.
            </remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseDownInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MapMouseDown">MapMouseDown</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseDownInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of MapMouseDownInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseDownInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>
            Constructor of MapMouseDownInteractiveOverlayEventArgs class.
            </summary>
            <param name="interactionArguments">This parameter specified the interaction auguments to construct the class.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseDownInteractiveOverlayEventArgs.InteractionArguments">
            <summary>
            This property gets the interaction auguments for the event args.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MapDoubleLeftClickMode">
            <summary>
            This enumeration specifies the behavior that occurs when double-left-clicking on the MapControl.
            The default value is ZoomIn.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MapDoubleLeftClickMode.Default">
            <summary>
            Default value (ZoomIn) of the enumeration.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MapDoubleLeftClickMode.ZoomIn">
            <summary>
            This enumeration item means that the map will ZoomIn when a double-left-click occurs.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MapDoubleLeftClickMode.Disabled">
            <summary>
            This enumeration item means that the ZoomIn functionality for double-left-clicks will be disabled.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.OverlayDrawnWpfMapEventArgs">
            <summary>
            This is the event arguments for the OverlayDrawn event on the MapEngine class. It
            is raised after the overlays are drawn.
            </summary>
            <remarks>
            This is the event arguments for the OverlayDrawn event on the MapEngine class. It
            is raised after the overlays are drawn. This event allows you draw something
            with the canvas after the Layer draws.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.OverlayDrawnWpfMapEventArgs.#ctor">
            <summary>Constructor of OverlayDrawnWpfMapEventArgs class.</summary>
            <overloads>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </overloads>
            <returns>None</returns>
            <remarks>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.OverlayDrawnWpfMapEventArgs.#ctor(ThinkGeo.MapSuite.WpfDesktopEdition.Overlay,ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>Constructor of OverlayDrawnWpfMapEventArgs class.</summary>
            <overloads>
            This constructor allows you to set the overlay drawn, the world extent and
            the image you have drawn on.
            </overloads>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="overlay">This parameter is the overlay that has been drawn.</param>
            <param name="targetExtent">This parameter is the world extent that has been drawn.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.OverlayDrawnWpfMapEventArgs.Overlay">
            <summary>Gets or sets the overlay you have drawn.</summary>
            <value>This property gets the overlay you have drawn.</value>
            <remarks>None</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.OverlayDrawnWpfMapEventArgs.TargetExtent">
            <summary>
            The property gets or sets the drawing extent of current overlay.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentExtentChangedWpfMapEventArgs">
            <summary>
            Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.CurrentExtentChanged">CurrentExtentChanged</see>
            event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentExtentChangedWpfMapEventArgs.#ctor">
            <summary>Initialize an instance of the CurrentExtentChangedEventArgs class.</summary>
            <overloads>Initialize an instance of the CurrentExtentChangedEventArgs class.</overloads>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentExtentChangedWpfMapEventArgs.#ctor(ThinkGeo.MapSuite.Core.RectangleShape,ThinkGeo.MapSuite.Core.GeographyUnit,System.Single,System.Single)">
            <overloads>Initialize an instance of the CurrentExtentChangedEventArgs class.</overloads>
            <summary>
            Initialize an instance of the CurrentExtentChangedEventArgs class by passing 
            the currentExtent, mapUnit, mapWidth and mapHeight.
            </summary>
            <param name="currentExtent">A RectangleShape indicates current map extent.</param>
            <param name="mapUnit">A GeographyUnit indicates current map unit.</param>
            <param name="mapWidth">A float value indicates the screen with of current map.</param>
            <param name="mapHeight">A float value indicates the screen height of current map.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentExtentChangedWpfMapEventArgs.CurrentExtent">
            <summary>
            This property specifies the CurrentExtent of the CurrentExtentChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentExtentChangedWpfMapEventArgs.MapUnit">
            <summary>
            This property specifies the MapUnit of the CurrentExtentChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentExtentChangedWpfMapEventArgs.MapWidth">
            <summary>
            This property specifies the MapWidth of the CurrentExtentChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentExtentChangedWpfMapEventArgs.MapHeight">
            <summary>
            This property specifies the MapHeight of the CurrentExtentChangedEventArgs.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.ControlPointSelectedEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.ControlPointSelected">ControlPointSelected</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.ControlPointSelectedEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of ControlPointSelectedEditInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.ControlPointSelectedEditInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Feature)">
            <summary>
            Constructor of ControlPointSelectedEditInteractiveOverlayEventArgs class.
            </summary>
            <param name="selectedFeature">This parameter specified the feature selected.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ControlPointSelectedEditInteractiveOverlayEventArgs.SelectedFeature">
            <summary>
            Gets or sets the selected feature.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.LayerTile.#ctor">
            <summary>
            Constructor of LayerTile class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.LayerTile.#ctor(System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.Core.Layer})">
            <summary>
            Constructor of LayerTile class.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.LayerTile.DrawingLayers">
            <summary>
            This property gets a collection that are ready for drawing.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.PopupOverlay">
            <summary>
            This class represents an overlay to place popups on the map.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.PopupOverlay.#ctor">
            <summary>
            This is constructor of PopupOverlay class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.PopupOverlay.#ctor(System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.WpfDesktopEdition.Popup})">
            <summary>
            This is constructor of PopupOverlay class.
            </summary>
            <param name="popups">This parameter indicates a collection of popup that are added into this overlay.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.PopupOverlay.GetBoundingBoxCore">
            <summary>
            This method returns a bounding box to hold all popups.
            </summary>
            <returns>A RectangleShape value that to hold all popups.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.PopupOverlay.DrawCore(ThinkGeo.MapSuite.Core.RectangleShape,ThinkGeo.MapSuite.WpfDesktopEdition.RefreshType)">
            <summary>
            This method draws the popups by the specified targetExtent.
            </summary>
            <param name="targetExtent">This parameter indicates an extent to draw the popups.</param>
            <param name="refreshType">This parameter indicates whether this overlay needs to be refresh or not.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.PopupOverlay.PanToCore(ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            This method pans popups to a specified extent.
            </summary>
            <param name="targetExtent">This parameter indicates an extent to pan the popups.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.PopupOverlay.Popups">
            <summary>
            This property gets a collection of popup that are added into this overlay.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveResult">
            <summary>
            This class specifies the InterativeResult when deal with the Interative method in InterativeOverlay.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveResult.#ctor">
            <summary>
            Constructor of InteractiveResult class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveResult.#ctor(ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlayDrawType,ThinkGeo.MapSuite.WpfDesktopEdition.ProcessOtherOverlaysMode)">
            <summary>
            Constructor of InteractiveResult class.
            </summary>
            <param name="interactiveOverlayDrawType">This parameter specified the interactiveOverlayDrawType to construct the class.</param>
            <param name="processOtherOverlays">This parameter specified the processOtherOverlays to construct the class.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveResult.DrawThisOverlay">
            <summary>
            Gets or sets the DrawThisOverlay type to indicicate to draw this overlay or not.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveResult.ProcessOtherOverlaysMode">
            <summary>
            Gets or sets the DrawThisOverlay type to indicicate how to process other overlays.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveResult.NewCurrentExtent">
            <summary>
            Gets or sets the new current extent if the interative action affect the extent.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MapClickWpfMapEventArgs">
            <summary>This class provides the data for the click event of the map control.</summary>
            <remarks>
            This class passes the location in world coordinates of where a user clicked on the
            map. You can then use event handlers to programmatically respond to the event based on
            the value of the location.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapClickWpfMapEventArgs.#ctor">
            <summary>
            Constructor of MapClickWpfMapEventArgs class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapClickWpfMapEventArgs.#ctor(System.Single,System.Single,System.Double,System.Double,ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseButton)">
            <summary>
            Constructor of MapClickWpfMapEventArgs class.
            </summary>
            <param name="screenX">Clicked screen x.</param>
            <param name="screenY">Clicked screen y.</param>
            <param name="worldX">Clicked world x.</param>
            <param name="worldY">Clicked world y.</param>
            <param name="mouseButton">Clicked mouse button.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapClickWpfMapEventArgs.ScreenX">
            <summary>
            Gets and sets clicked screen x.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapClickWpfMapEventArgs.ScreenY">
            <summary>
            Gets and sets clicked screen y.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapClickWpfMapEventArgs.WorldX">
            <summary>
            Gets and sets clicked world x.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapClickWpfMapEventArgs.WorldY">
            <summary>
            Gets and sets clicked world y.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapClickWpfMapEventArgs.MouseButton">
            <summary>
            Gets and sets which button is clicked.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapClickWpfMapEventArgs.WorldLocation">
            <summary>
            Gets the clicked world position. 
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.LogoMapTool">
            <summary>
            This class represents an logo tool displays on the bottom right on the map.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.LogoMapTool.SourceProperty">
            <summary>
            This is a dependency property which maintains the image source of the logo map tool.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.LogoMapTool.#ctor">
            <summary>
            Constructor of LogoMapTool class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.LogoMapTool.SourceChangedCore">
            <summary>
            This method raises when the logo image source changed.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.LogoMapTool.Source">
            <summary>
            This is a wrapper of the dependency property SourceProperty.
            It indicates the logo image source.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.VertexRemovingEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.VertexRemoving">VertexRemoving.</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.VertexRemovingEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of VertexRemovingEditInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.VertexRemovingEditInteractiveOverlayEventArgs.#ctor(System.Boolean,ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.Vertex)">
            <summary>
            Constructor of VertexRemovingEditInteractiveOverlayEventArgs class.
            </summary>
            <param name="cancel">This parameter specified the cancel property.</param>
            <param name="affectedVertexFeature">This parameter specified the affectedVertex feature property.</param>
            <param name="removingVertex">This parameter specified the target vertex to be removed.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.VertexRemovingEditInteractiveOverlayEventArgs.AffectedVertexFeature">
            <summary>
            Gets or sets the Feature to be used to remove vertex.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.VertexRemovingEditInteractiveOverlayEventArgs.RemovingVertex">
            <summary>
            Gets or sets the vertex to be removed.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.VertexRemovingEditInteractiveOverlayEventArgs.Cancel">
            <summary>
            Gets or sets the action to be canceled or not.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureResizingEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.FeatureResizing">FeatureResizing.</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureResizingEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of FeatureResizingEditInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureResizingEditInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Feature,System.Boolean,ThinkGeo.MapSuite.Core.PointShape,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            Constructor of FeatureResizingEditInteractiveOverlayEventArgs class.
            </summary>
            <param name="resizingFeature">This parameter specified the target feature to be resized.</param>
            <param name="cancel">This parameter specified the cancel property.</param>
            <param name="sourceControlPoint">This parameter specified the source control point to be resized.</param>
            <param name="targetControlPoint">This parameter specified the target control point to be resized.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureResizingEditInteractiveOverlayEventArgs.ResizingFeature">
            <summary>
            Gets or sets the Feature to be resized.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureResizingEditInteractiveOverlayEventArgs.SourceControlPoint">
            <summary>
            Gets or sets the source control point to be resized.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureResizingEditInteractiveOverlayEventArgs.TargetControlPoint">
            <summary>
            Gets or sets the target control point to be resized.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureResizingEditInteractiveOverlayEventArgs.Cancel">
            <summary>
            Gets or sets the action to be canceled or not.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureResizedEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.FeatureResized">FeatureResized.</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureResizedEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of FeatureResizedEditInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureResizedEditInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Feature)">
            <summary>
            Constructor of FeatureResizedEditInteractiveOverlayEventArgs class.
            </summary>
            <param name="resizedFeature">This parameter specified the feature resized.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureResizedEditInteractiveOverlayEventArgs.ResizedFeature">
            <summary>
            Gets or sets the Feature resized.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.TileType">
            <summary>
            This enum represents the tile type in the tile overlay.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.TileType.SingleTile">
            <summary>
            This value indicates the tile overlay is formed by one single tile.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.TileType.MultipleTile">
            <summary>
            This value indicates the tile overlay is formed by multiple tiles.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseClickInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MapMouseClick">MapMouseClick</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseClickInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of MapMouseClickInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseClickInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>
            Constructor of MapMouseClickInteractiveOverlayEventArgs class.
            </summary>
            <param name="interactionArguments">This parameter specified the interaction auguments to construct the class.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseClickInteractiveOverlayEventArgs.InteractionArguments">
            <summary>
            This property gets the interation auguments for the mouse click event args.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.KeyEventInteractionArguments">
            <summary>
            Represents key event arguments when interacting with the map object.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.KeyEventInteractionArguments.#ctor">
            <summary>
            Constructor of KeyEventInteractionArguments class.
            </summary>
            <remarks>If you use this constructor, you have to set its properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.KeyEventInteractionArguments.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This is the constructor of this parameter by passing parameters.
            </summary>
            <param name="key">This parameters indicates the key string used in the events.</param>
            <param name="isCtrlKeyPressed">This parameter indicates the CTRIL key is pressed or not.</param>
            <param name="isShiftKeyPressed">This parameter indicates the SHIFT key is pressed or not.</param>
            <param name="isAltKeyPressed">This parameter indicates the ALT key is pressed or not.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.KeyEventInteractionArguments.Key">
            <summary>
            This property gets string indicates the key used in the key events.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.KeyEventInteractionArguments.IsCtrlKeyPressed">
            <summary>
             Gets a value indicating whether the CTRL key was pressed.
             true if the CTRL key was pressed; otherwise, false.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.KeyEventInteractionArguments.IsShiftKeyPressed">
            <summary>
             Gets a value indicating whether the SHIFT key was pressed.
             true if the SHIFT key was pressed; otherwise, false.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.KeyEventInteractionArguments.IsAltKeyPressed">
            <summary>
             Gets a value indicating whether the ALT key was pressed.
             true if the ALT key was pressed; otherwise, false.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.KeyEventInteractionArguments.CurrentExtent">
            <summary>
            Gets or sets the current extent used in the MapControl.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.KeyEventInteractionArguments.CurrentScale">
            <summary>
            Gets or sets the scale in the current status.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseEnterInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MapMouseUp">MapMouseUp</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseEnterInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of MapMouseEnterInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseEnterInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>
            Constructor of MapMouseEnterInteractiveOverlayEventArgs class.
            </summary>
            <param name="interactionArguments">This parameter specified the interaction auguments to construct the class.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseEnterInteractiveOverlayEventArgs.InteractionArguments">
            <summary>
            This property gets the interaction auguments for the event args.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.AdornmentOverlay">
            <summary>
            This class inherits from the Overlay abstract class. This specified overlay stores
            the <strong>AdornmentLayer</strong> used in the MapControl.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.AdornmentOverlay.#ctor">
            <summary>Constructor of AdornmentOverlay class.</summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.AdornmentOverlay.DrawCore(ThinkGeo.MapSuite.Core.RectangleShape,ThinkGeo.MapSuite.WpfDesktopEdition.RefreshType)">
            <summary>
            This method override the DrawCore logic of the Overlay class.
            </summary>
            <param name="targetExtent">This parameter specifies the extent for drawing this overlay.</param>
            <param name="refreshType">This parameter specifies whether this overlay need to be clear and refresh or not.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.AdornmentOverlay.PanToCore(ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            Thid method pans the image of this overlay to the specified extent.
            </summary>
            <param name="targetExtent">A RectangleShape value indicating the world extent that to pan to.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.AdornmentOverlay.SaveStateCore">
            <summary>
            This method saves overlay state to a byte array.
            </summary>
            <returns>A byte array indicates current overlay state.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.AdornmentOverlay.LoadStateCore(System.Byte[])">
            <summary>
            This method restore the overlay state back from the specified state.
            </summary>
            <param name="state">This parameter indicates the state for restore the overlay.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.AdornmentOverlay.Layers">
            <summary>
            This property gets a collection of the <strong>AdornmentLayers</strong> that are added to
            the <strong>AdornmentOverlay.</strong>
            </summary>
            <value>
            A collection of <strong>AdornmentLayers</strong> that are added to the
            <strong>AdornmentOverlay</strong> to be drawn.
            </value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.AdornmentOverlay.ShowLogo">
            <summary>
            This property is a easy way to add the <strong>LogoAdornmentLayer</strong> to
            the AdormentOverlay.
            </summary>
            <value>
            Boolean value that indicates whether the LogoAdornmentLayer will be drawn or
            not.
            </value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.AdornmentOverlay.IsEmpty">
            <summary>
            This property indicates whether this overlay is empty or not.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerStyle">
            <summary>
            This class represents the base class for all classes that defines the styles
            applied to the markers.
            </summary>
            <remarks>
            The <strong>MarkerStyle</strong> class is the base class for all style classed
            that contains the style definition of markers. When dynamicly creating the markers,
            these style classes apply their styles to markers. The <strong>MarkerStyle</strong>
            class has an abstract <strong>GetMarkers</strong> method which accepts a collection of
            features. It creates a collection of markers with the styles specified from these
            features. Inherit from this class and implements the <strong>GetMarkers</strong> method
            if you want to create your own <strong>MarkerStyle</strong>.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerStyle.#ctor">
            <summary>Initialize an instance of the MarkerStyle class.</summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerStyle.GetMarkers(System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.Core.Feature})">
            <summary>
            The abstract method returns a collection of markers from the features that passed
            in.
            </summary>
            <returns>A collection of marker controls that will be overlap on the map control.</returns>
            <param name="features">A collection of features that the markers are created from.</param>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.CustomFormattedMouseCoordinateMapToolEventArgs">
            <summary>
            This class represents the event arguments for customizing mouse coordinates tool.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.CustomFormattedMouseCoordinateMapToolEventArgs.#ctor">
            <summary>
            Constructor of CustomFormattedMouseCoordinateMapToolEventArgs class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.CustomFormattedMouseCoordinateMapToolEventArgs.#ctor(ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            Constructor of CustomFormattedMouseCoordinateMapToolEventArgs class.
            </summary>
            <param name="worldCoordinate">This parameter is current world coordinates.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.CustomFormattedMouseCoordinateMapToolEventArgs.WorldCoordinate">
            <summary>
            Gets or sets current world coordinate.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.CustomFormattedMouseCoordinateMapToolEventArgs.Result">
            <summary>
            Gets or sets the formated result which displays by the custom coordinates type.
            </summary>
            <example>
            private void MouseCoordinate_CustomMouseCoordinateFormat(object sender, CustomMouseCoordinateFormatEventArgs e)
            {
                e.CoordinateLabel.Foreground = new SolidColorBrush(Colors.Red);
                e.Result = string.Format(CultureInfo.InvariantCulture, "{0},{1}", e.WorldCoordinate.X.ToString("N3"), e.WorldCoordinate.Y.ToString("N3"));
            }
            </example>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.VertexRemovedEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.VertexRemoved">VertexRemoved.</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.VertexRemovedEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of VertexRemovedEditInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.VertexRemovedEditInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.Vertex)">
            <summary>
            Constructor of VertexRemovedEditInteractiveOverlayEventArgs class.
            </summary>
            <param name="affectedVertexFeature">This parameter specified the affectedVertex feature property.</param>
            <param name="removedVertex">This parameter specified the target vertex removed.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.VertexRemovedEditInteractiveOverlayEventArgs.AffectedVertexFeature">
            <summary>
            Gets or sets the Feature to be used to remove vertex.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.VertexRemovedEditInteractiveOverlayEventArgs.RemovedVertex">
            <summary>
            Gets or sets the vertex removed.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddingTrackInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.VertexAdding">VertexAdding.</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddingTrackInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of VertexAddingTrackInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddingTrackInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Vertex,ThinkGeo.MapSuite.Core.Feature,System.Boolean)">
            <summary>
            Constructor of VertexAddingTrackInteractiveOverlayEventArgs class.
            </summary>
            <param name="addingVertex">This parameter specified the vertex is going to be added.</param>
            <param name="cancel">This parameter specified the cancel property.</param>
            <param name="affectedFeature">This parameter specified the feature to be used to add vertex on when tracking shape.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddingTrackInteractiveOverlayEventArgs.Cancel">
            <summary>
            Gets or sets the action to be canceled or not.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddingTrackInteractiveOverlayEventArgs.AddingVertex">
            <summary>
            Gets or sets the feature to be used to add vertex on when tracking shape.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddingTrackInteractiveOverlayEventArgs.AffectedFeature">
            <summary>
            Gets or sets the Feature to be used to add vertex to.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.DrawnTileEventArgs">
            <summary>
            This class represents an event argument for Drawn event in Tile class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawnTileEventArgs.#ctor">
            <summary>
            This is the constructor of DrawnTileEventArgs class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawnTileEventArgs.#ctor(System.Object)">
            <summary>
            This is the constructor of DrawnTileEventArgs class.
            </summary>
            <param name="nativeImage">This parameter indicates a nativeImage to draw on the tile.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawnTileEventArgs.#ctor(System.Object,System.Boolean)">
            <summary>
            This is the constructor of DrawnTileEventArgs class.
            </summary>
            <param name="nativeImage">This parameter indicates a nativeImage to draw on the tile.</param>
            <param name="cancel">This parameter indicates whether this operation needs to be canceled.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.DrawnTileEventArgs.NativeImage">
            <summary>
            This property gets and sets a nativeImage to draw on the tile.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.DrawnTileEventArgs.Cancel">
            <summary>
            This property gets and sets whether this operation needs to be canceled.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.TiledWmsOverlay">
            <summary>
            Represents an overlay object that gets map images from the WMS server you
            specify.
            </summary>
            <remarks>
            	<para>The <strong>TiledWmsOverlay</strong> gets images from one or more WMS servers that
                you specify. Usually, you add a WMS server URI to the <strong>ServerUris</strong>
                collection and the <strong>TiledWmsOverlay</strong> will make a request to that WMS server
                to get its tile images.</para>
            	<para>You can also add multiple WMS server URIs to the ServerUris collection. The
                TiledWmsOverlay will randomly send requests to those WMS servers in a concurrent fashion.
                This means that the tile images can come from different WMS servers, thus greatly
                enhancing performance. <strong>Do not</strong> add URIs of differently-configured
                WMS servers to the ServerUris collection.</para>
            </remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.WmsOverlay">
            <summary>
            Represents an overlay object that gets map images from the WMS server you
            specify.
            </summary>
            <remarks>
            	<para>The <strong>WmsOverlay</strong> gets images from one or more WMS servers that
                you specify. Usually, you add a WMS server URI to the <strong>ServerUris</strong>
                collection and the <strong>WmsOverlay</strong> will make a request to that WMS server
                to get its tile images.</para>
            	<para>You can also add multiple WMS server URIs to the ServerUris collection. The
                WmsOverlay will randomly send requests to those WMS servers in a concurrent fashion.
                This means that the tile images can come from different WMS servers, thus greatly
                enhancing performance. <strong>Do not</strong> add URIs of differently-configured
                WMS servers to the ServerUris collection.</para>
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WmsOverlay.#ctor">
            <summary>
            Constructore of WmsOverlay class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WmsOverlay.#ctor(System.Collections.Generic.IEnumerable{System.Uri})">
            <summary>
            Constructore of WmsOverlay class.
            </summary>
            <param name="serverUris">This parameter indicates a collection of uris for the Wms server.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WmsOverlay.GetTileCore">
            <summary>
            This method gets a specific tile object to form an overlay.
            </summary>
            <returns>A Tile object to form an overlay.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WmsOverlay.DrawTileCore(ThinkGeo.MapSuite.WpfDesktopEdition.Tile,ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            This method redraws a tile by an extent and geography unit.
            </summary>
            <param name="tile">A tile which needs to be redrawn.</param>
            <param name="targetExtent">An extent to be redrawn.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WmsOverlay.SaveStateCore">
            <summary>
            This method saves overlay state to a byte array.
            </summary>
            <returns>A byte array indicates current overlay state.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WmsOverlay.LoadStateCore(System.Byte[])">
            <summary>
            This method restore the overlay state back from the specified state.
            </summary>
            <param name="state">This parameter indicates the state for restore the overlay.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WmsOverlay.GetRequestUri(System.Uri,ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            This method merge uri from passed server uri and target world extent.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WmsOverlay.GetRequestUriCore(System.Uri,ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            This method merge uri from passed server uri and target world extent.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WmsOverlay.InitThreadLockObject">
            <summary>
            Initialize thread lock object;
            for if the request count is to big to the server at once,
            the server will send a 503 error back.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WmsOverlay.Parameters">
            <summary>
            Gets a dictionary whose items will be passed to the WMS server as
            parameters.
            </summary>
            <example>
            	<para>As an example, if the WMS address is "wmsserverurl.axd?id=1&amp;type=image/png":</para>
            	<para><font color="maroon">wmsLayer.Parameters.Add("id", "1");<br/>
                wmsLayer.Parameters.Add("type", "image/png");</font></para>
            </example>
            <value>A dictionary whose items will be passed to the WMS server as parameters.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WmsOverlay.ServerUris">
            <summary>Gets a collection of URIs that specifies the locations of the WMS servers.</summary>
            <value>A collection of URIs that specifies the locations of the WMS servers.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WmsOverlay.WebProxy">
            <summary>
            This property gets or sets the proxy used for requesting a Web Response.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WmsOverlay.Projection">
            <summary>
            Gets or sets a string that will be sent to the WMS server to get the images in
            the specific projection.
            </summary>
            <value>A string that represents the projection that the images use.</value>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TiledWmsOverlay.#ctor">
            <summary>
            Constructore of TiledWmsOverlay class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TiledWmsOverlay.#ctor(System.Collections.Generic.IEnumerable{System.Uri})">
            <summary>
            Constructore of TiledWmsOverlay class.
            </summary>
            <param name="serverUris">This parameter indicates a collection of uris for the Wms server.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TiledWmsOverlay.#ctor(System.Collections.Generic.IEnumerable{System.Uri},System.Net.WebProxy)">
            <summary>
            Constructore of TiledWmsOverlay class.
            </summary>
            <param name="serverUris">This parameter indicates a collection of uris for the Wms server.</param>
            <param name="webProxy">The proxy used for requesting a Web Response</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TiledWmsOverlay.#ctor(System.Collections.Generic.IEnumerable{System.Uri},System.String,System.String)">
            <summary>
            Constructore of TiledWmsOverlay class.
            </summary>
            <param name="serverUris">This parameter indicates a collection of uris for the Wms server.</param>
            <param name="clientId">The clientId for the WMS Server.</param>
            <param name="privateKey">The privateKey for the WMS Server.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TiledWmsOverlay.#ctor(System.Collections.Generic.IEnumerable{System.Uri},System.Net.WebProxy,System.String,System.String)">
            <summary>
            Constructore of TiledWmsOverlay class.
            </summary>
            <param name="serverUris">This parameter indicates a collection of uris for the Wms server.</param>
            <param name="webProxy">Proxy to use for the WMS Server.</param>
            <param name="clientId">The clientId for the WMS Server.</param>
            <param name="privateKey">The privateKey for the WMS Server.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TiledWmsOverlay.GetRequestUriCore(System.Uri,ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            This method merge uri from passed server uri and target world extent.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TiledWmsOverlay.InitThreadLockObject">
            <summary>
            Initialize thread lock object;
            for if the request count is to big to the server at once,
            the server will send a 503 error back.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.TiledWmsOverlay.ClientId">
            <summary>
            Gets or sets a value that is your Client Id.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.TiledWmsOverlay.PrivateKey">
            <summary>
            Gets or sets a value that is unique to your client ID, please keep your key secure.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments">
            <summary>
            This class encapsulates the information and simple method for interative actions.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments.#ctor">
            <summary>
            Constructor of InteractionArguments class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments.ToString">
            <summary>
            Override the ToString API for object.
            </summary>
            <returns>Returns a string to mark this instance and easy to read its properties.</returns>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments.ScreenX">
            <summary>
            Gets or sets the screen X position.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments.ScreenY">
            <summary>
            Gets or sets the screen Y position.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments.WorldX">
            <summary>
            Gets or sets the world X position.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments.WorldY">
            <summary>
            Gets or sets the world Y position.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments.MouseButton">
            <summary>
            Gets and sets which button is clicked on the map canvas.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments.CurrentExtent">
            <summary>
            Gets or sets the current extent used in the MapControl.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments.SearchingTolerance">
            <summary>
            Gets or sets the searching tolearance for tracking and editing.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments.MapWidth">
            <summary>
            Gets or sets the with for the Map Control.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments.MapHeight">
            <summary>
            Gets or sets the height for the Map Control.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments.MapUnit">
            <summary>
            Gets or sets the unit for the Map Control.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments.ZoomLevelSet">
            <summary>
            Gets or sets the ZoomLevelSet used in the Map Control.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments.MouseWheelDelta">
            <summary>
            Gets or sets the Mouse wheel delta used in the MouseWheel method in InterativeOverlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments.Scale">
            <summary>
            Gets or sets the scale in current status.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseLeaveInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MapMouseUp">MapMouseUp</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseLeaveInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of MapMouseLeaveInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseLeaveInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>
            Constructor of MapMouseLeaveInteractiveOverlayEventArgs class.
            </summary>
            <param name="interactionArguments">This parameter specified the interaction auguments to construct the class.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseLeaveInteractiveOverlayEventArgs.InteractionArguments">
            <summary>
            This property gets the interaction auguments for the event args.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureSourceMarkerOverlay">
            <summary>
            Represents a MarkerOverlay that dynamically creates markers from the feature source
            specified.
            </summary>
            <remarks>
            The <strong>FeatureSourceMarkerOverlay</strong> generates markers from the
            features retrieved from its <strong>FeatureSource</strong>. Thus, you need to set the
            <strong>FeatureSource</strong> property before the marker overlay can create the
            markers. The <strong>ZoomLevelSet</strong> property is an entrance for you to define
            the marker styles on zoomlevels.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureSourceMarkerOverlay.#ctor">
            <summary>Initialize an instance of the FeatureSourceMarkerOverlay class.</summary>
            <overloads>Initialize an instance of the FeatureSourceMarkerOverlay class.</overloads>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureSourceMarkerOverlay.#ctor(ThinkGeo.MapSuite.Core.FeatureSource)">
            <summary>Initialize an instance of the FeatureSourceMarkerOverlay class.</summary>
            <overloads>Initialize an instance of the FeatureSourceMarkerOverlay class.</overloads>
            <param name="featureSource">
            The feature source object that provides the features from which the markers are
            created.
            </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureSourceMarkerOverlay.GetMarkersToDrawCore(ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            Returns a collection of markers based on the extent and zoomlevel that you passed in.
            </summary>
            <param name="targetExtent">The extent that includes the markers you want to serialize.</param>
            <returns>A collection of marker objects that will be placed on the map.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureSourceMarkerOverlay.GetBoundingBoxCore">
            <summary>
            This method gets a bounding box that maintains all the features which are added in this overlay.
            </summary>
            <returns>Returns a RectangleShape that maintains all the features which are added in this overlay.</returns>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureSourceMarkerOverlay.FeatureSource">
            <summary>
            Gets or sets a feature source object that provides the features from which the
            markers are created.
            </summary>
            <value>
            A feature source object that provides the features from which the markers are
            created.
            </value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureSourceMarkerOverlay.ZoomLevelSet">
            <summary>Gets the ZoomLevelSet object that controls the markers' generation.</summary>
            <value>A ZoomLevelSet object that controls the markers' generation.</value>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.OpenStreetMapOverlay.SaveStateCore">
            <summary>
            This method saves overlay state to a byte array.
            </summary>
            <returns>A byte array indicates current overlay state.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.OpenStreetMapOverlay.LoadStateCore(System.Byte[])">
            <summary>
            This method restore the overlay state back from the specified state.
            </summary>
            <param name="state">This parameter indicates the state for restore the overlay.</param>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevel">
            <summary>
            This class defines styles of markers and a zoomlevel range. When the current
            zoomlevel is in that range, the styles will be applied to the markers.
            </summary>
            <remarks>
            This class defines how features will be marked based on its scale. Inside of the
            ZoomLevelSet there are a number of marker zoomlevels. We will determine which
            MarkerZoomLevel to use based on which one has the Scale property closest to the current
            scale. The matching one will define the styles that will be used to mark the features
            on the map.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevel.#ctor">
            <summary>Constructor of <strong>MarkerZoomLevel</strong> class.</summary>
            <remarks>This is the constructor of <strong>MarkerZoomLevel</strong> class.</remarks>
            <returns>An instance of the <strong>MarkerZoomLevel</strong> class.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevel.GetMarkers(System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.Core.Feature})">
            <summary>
            This method returns a collection of markers that is applied with the styles when
            the current zoomlevel falls into the ranges that defined.
            </summary>
            <returns>A Collection of markers that created from the feature collection.</returns>
            <remarks>
            This method returns a collection of markers that is applied with the styles when
            the current zoomlevel falls into the ranges that defined.
            </remarks>
            <param name="features">
            A collection of features that is applied with the styles when the current
            zoomlevel falls into the ranges that defined.
            </param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevel.IsStyleDefined">
            <summary>
            Gets whether the style is defined.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevel.ApplyUntilZoomLevel">
            <summary>Gets or sets the zoomlevel to which the styles will be applied.</summary>
            <value>A zoomlevel to which the styles will be applied.</value>
            <remarks>Gets or sets the zoomlevel to which the styles will be applied.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevel.DefaultPointMarkerStyle">
            <summary>
            Gets default style that is applied to the markers if the
            CustomMarkerStyle is not defined.
            </summary>
            <remarks>
            Gets the style that is applied to the markers if the CustomMarkerStyle is
            not defined.
            </remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevel.CustomMarkerStyle">
            <summary>Gets or sets a custom style that can be any type of MarkerStyle.</summary>
            <value>
            MarkerStyle object that will be applied to the markers with higher
            priority.
            </value>
            <remarks>
            The CustomMarkerStyle has a higher priority than the DefaultMarkerStyle. When you
            define both styles, the CustomMarkerStyle will be applied. The CustomMarkerStyle can be
            any kind of MarkStyle while DefaultMarkerStyle can not.
            </remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureRotatedEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.FeatureRotated">FeatureRotated.</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureRotatedEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of FeatureRotatedEditInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureRotatedEditInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Feature)">
            <summary>
            Constructor of FeatureRotatedEditInteractiveOverlayEventArgs class.
            </summary>
            <param name="rotatedFeature">This parameter specified the feature rotated.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureRotatedEditInteractiveOverlayEventArgs.RotatedFeature">
            <summary>
            Gets or sets the Feature rotated.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.ControlPointSelectingEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.ControlPointSelecting">ControlPointSelecting</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.ControlPointSelectingEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of ControlPointSelectingEditInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.ControlPointSelectingEditInteractiveOverlayEventArgs.#ctor(System.Boolean,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            Constructor of ControlPointSelectingEditInteractiveOverlayEventArgs class.
            </summary>
            <param name="cancel">This parameter specified the cancel property.</param>
            <param name="targetPointShape">This parameter specified the target control point to be selected.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ControlPointSelectingEditInteractiveOverlayEventArgs.TargetPointShape">
            <summary>
            Gets or sets the target control point to be selected.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ControlPointSelectingEditInteractiveOverlayEventArgs.Cancel">
            <summary>
            Gets or sets the action to be canceled or not.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.Cell">
            <summary>
            This structure represents all information for a tile.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Cell.#ctor(System.Int64,System.Int64,ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            This is constructor of the Cell class.
            </summary>
            <param name="row">This parameter indicates which row the tile is placed in the world tiling system.</param>
            <param name="column">This parameter indicates which column the tile is placed in the world tiling system.</param>
            <param name="boundingBox">This parameter indicates the bounding box of current tile.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Cell.ToString">
            <summary>This method is an override of the ToString functionality.</summary>
            <remarks>None</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Cell.GetHashCode">
            <summary>This method is an override of the GetHashCode functionality.</summary>
            <remarks>None</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Cell.Equals(System.Object)">
            <summary>This method is an override of the Equals functionality.</summary>
            <remarks>None</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Cell.op_Equality(ThinkGeo.MapSuite.WpfDesktopEdition.Cell,ThinkGeo.MapSuite.WpfDesktopEdition.Cell)">
            <summary>
            This method is an override of the == operator.
            </summary>
            <param name="cell1">This parameter is the source cell to be compared.</param>
            <param name="cell2">This parameter is the target cell to be compared.</param>
            <returns>A boolean value indicats whether the two cells are equal.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.Cell.op_Inequality(ThinkGeo.MapSuite.WpfDesktopEdition.Cell,ThinkGeo.MapSuite.WpfDesktopEdition.Cell)">
            <summary>
            This method is an override of the != operator.
            </summary>
            <param name="cell1">This parameter is the source cell to be compared.</param>
            <param name="cell2">This parameter is the source cell to be compared.</param>
            <returns>A boolean value indicats whether the two cells are not equal.</returns>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Cell.Row">
            <summary>
            Gets or sets which row the tile is placed in the world tiling system.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Cell.Column">
            <summary>
            Gets or sets which column the tile is placed in the world tiling system.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Cell.BoundingBox">
            <summary>
            Gets or sets the bounding box of current tile.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.Cell.Index">
            <summary>
            Gets or sets the index of the tile in the world tiling system.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingTileEventArgs">
            <summary>
            This class represents an event argument for drawing event in Tile class. 
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingTileEventArgs.#ctor">
            <summary>
            This is the constructor of DrawingTileEventArgs.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingTileEventArgs.#ctor(ThinkGeo.MapSuite.Core.GeoCanvas)">
            <summary>
            This is the constructor of DrawingTileEventArgs.
            </summary>
            <param name="geoCanvas">This parameter indicates a GeoCanvas object to draw the tile.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingTileEventArgs.GeoCanvas">
            <summary>
            This property gets and sets a GeoCanvas object to draw the tile.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseDoubleClickInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MapMouseDoubleClick">MapMouseDoubleClick</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseDoubleClickInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of MapMouseDoubleClickInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseDoubleClickInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>
            Constructor of MapMouseDoubleClickInteractiveOverlayEventArgs class.
            </summary>
            <param name="interactionArguments">This parameter specified the interaction auguments to construct the class.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseDoubleClickInteractiveOverlayEventArgs.InteractionArguments">
            <summary>
            This property gets the interaction auguments for the event args.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.ControlPointType">
            <summary>
            This enumeration specified the control point type when editing a shape.
            The deafault value is None
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.ControlPointType.None">
            <summary>
            Default value of this enumeration.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.ControlPointType.Drag">
            <summary>
            This enumeration item means that the control point is for Drag.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.ControlPointType.Rotate">
            <summary>
            This enumeration item means that the control point is for Rotate.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.ControlPointType.Resize">
            <summary>
            This enumeration item means that the control point is for Resize.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.ControlPointType.Vertex">
            <summary>
            This enumeration item means that the control point is for change the vertex postion.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.TrackMode">
            <summary>TrackMode enumeration sets how the map will react to user interaction.</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.TrackMode.None">
            <summary>Default mode.</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.TrackMode.Point">
            <summary>Draw point mode.</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.TrackMode.Line">
            <summary>Draw line mode.</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.TrackMode.Polygon">
            <summary>Draw polygon mode.</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.TrackMode.Rectangle">
            <summary>Draw rectangle mode.</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.TrackMode.Square">
            <summary>Draw square mode.</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.TrackMode.Circle">
            <summary>Draw circle mode.</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.TrackMode.Ellipse">
            <summary>Draw ellipse mode.</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.TrackMode.StraightLine">
            <summary>Allows user to draw a simple line with only 2 points on the map.</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.TrackMode.Freehand">
            <summary>Allows user to draw freehand on the map</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.TrackMode.Custom">
            <summary>Allows user to draw custom trackshape on the map</summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.LayerOverlay">
            <summary>This class represents a group of layers; each layer can be of any layer type.</summary>
            <remarks>This class represents a group of layers; each layer can be of any layer type.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.LayerOverlay.#ctor">
            <summary>
            Constructor of LayerOverlay class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.LayerOverlay.#ctor(System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.Core.Layer})">
            <summary>
            Constructor of LayerOverlay class.
            </summary>
            <param name="layers">This parameter indicates a layer collection which needs to be drawn.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.LayerOverlay.SaveStateCore">
            <summary>
            This method saves overlay state to a byte array.
            </summary>
            <returns>A byte array indicates current overlay state.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.LayerOverlay.LoadStateCore(System.Byte[])">
            <summary>
            This method restore the overlay state back from the specified state.
            </summary>
            <param name="state">This parameter indicates the state for restore the overlay.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.LayerOverlay.GetTileCore">
            <summary>
            This method gets a specific tile object to form an overlay.
            </summary>
            <returns>A Tile object to form an overlay.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.LayerOverlay.DrawTileCore(ThinkGeo.MapSuite.WpfDesktopEdition.Tile,ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            This method redraws a tile by an extent and geography unit.
            </summary>
            <param name="tile">A tile which needs to be redrawn.</param>
            <param name="targetExtent">An extent to be redrawn.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.LayerOverlay.GetBoundingBoxCore">
            <summary>
            This method gets a bounding box that holds all the layers which are added in this overlay.
            </summary>
            <returns>A RectangleShape value that holds all the layers which are added in this overlay.</returns>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.LayerOverlay.RenderMode">
            <summary>
            This property gets and sets the render mode for drawing this overlay.
            </summary>
            <remarks>
            Set GdiPlus to render map image with Gdi+. 
            We recommend use this value with large data.
            
            Set DrawingVisual to render map image with DrawingVisual feature in WPF.
            Use it when the spatial data is small to get better responding.
            </remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.LayerOverlay.IsEmpty">
            <summary>This property indicates whether this overlay is empty or not.</summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.LayerOverlay.Layers">
            <summary>
            Gets a GeoCollection that contains the layers that will draw on the image.
            </summary>
            <value>A GeoCollection of layers.</value>
            <remarks>
            The <strong>Layers</strong> property holds all of the layers that are used by the
            <strong>Draw</strong> method. The Draw method loops through all layers to filter
            out features and draw on the image with the specified styles. 
            </remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.LayerOverlay.LockLayerMode">
            <summary>
            This property gets and sets the lock mode while drawing layers.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentInteractiveOverlay">
            <summary>
            This class inherits from InterativeOverlay abstract class. This specified overlay describle the
            Extent Changing interative process with MapControl using Mouse or Keyborad.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay">
            <summary>
            This class inherits from Overlay abstract class. This specified overlay describle the interative
            process with MapControl using Mouse or Keyborad.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.#ctor">
            <summary>
            Default constructor of this abstract class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MouseDown(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This method will simulate the MouseDown interaction.</summary>
            <returns>Interaction results of this method.</returns>
            <remarks>
            	<para>This method is the concrete wrapper for its virtual Core method. <br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MouseDownCore(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This protected virtual method is the Core method of MouseDown API.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MouseMove(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This method will simulate the MouseMove interaction.</summary>
            <returns>Interaction results of this method.</returns>
            <remarks>
            	<para>This method is the concrete wrapper for its virtual Core method. <br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MouseMoveCore(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This protected virtual method is the Core method of MouseMove API.</summary>
            <returns>Interaction results of this method.</returns>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MouseUp(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This method will simulate the MouseUp interaction.</summary>
            <returns>Interaction results of this method.</returns>
            <remarks>
            	<para>This method is the concrete wrapper for its virtual Core method. <br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MouseUpCore(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This protected virtual method is the Core method of MouseUp API.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MouseClick(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This method will simulate the MouseClick interaction.</summary>
            <returns>Interaction results of this method.</returns>
            <remarks>
            	<para>This method is the concrete wrapper for its virtual Core method. <br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MouseClickCore(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This protected virtual method is the Core method of MouseClick API.</summary>
            <returns>Interaction results of this method.</returns>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MouseDoubleClick(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This method will simulate the MouseDoubleClick interaction.</summary>
            <returns>Interaction results of this method.</returns>
            <remarks>
            	<para>This method is the concrete wrapper for its virtual Core method. <br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MouseDoubleClickCore(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This protected virtual method is the Core method of MouseDoubleClick API.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MouseWheel(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This method will simulate the MouseWheel interaction.</summary>
            <returns>Interaction results of this method.</returns>
            <remarks>
            	<para>This method is the concrete wrapper for its virtual Core method. <br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MouseWheelCore(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This protected virtual method is the Core method of MouseWheel API.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MouseLeave(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>
            Occurs when the mouse leave the map. 
            </summary>
            <param name="interactionArguments">Interaction arguments for mouse leave the map.</param>
            <returns>A interactive result for mouse leave the map.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MouseLeaveCore(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>
            Occurs when the mouse leave the map. 
            </summary>
            <param name="interactionArguments">Interaction arguments for mouse leaving the map.</param>
            <returns>A interactive result for mouse leaving the map.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MouseEnter(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>
            Occurs when the mouse enter the map.
            </summary>
            <param name="interactionArguments">Interaction arguments for mouse entering the map.</param>
            <returns>A interactive result for mouse entering the map.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MouseEnterCore(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>
            Occurs when the mouse enter the map.
            </summary>
            <param name="interactionArguments">Interaction arguments for mouse entering the map.</param>
            <returns>A interactive result for mouse entering the map.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.KeyUp(ThinkGeo.MapSuite.WpfDesktopEdition.KeyEventInteractionArguments)">
            <summary>
            Occurs when key up on the map. 
            </summary>
            <param name="interactionArguments">Interaction arguments for key up on the map.</param>
            <returns>A interactive result for key up on the map.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.KeyUpCore(ThinkGeo.MapSuite.WpfDesktopEdition.KeyEventInteractionArguments)">
            <summary>
            Occurs when key up on the map. 
            </summary>
            <param name="interactionArguments">Interaction arguments for key up on the map.</param>
            <returns>A interactive result for key up on the map.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.KeyDown(ThinkGeo.MapSuite.WpfDesktopEdition.KeyEventInteractionArguments)">
            <summary>
            Occurs when key down on the map. 
            </summary>
            <param name="interactionArguments">Interaction arguments for key down on the map.</param>
            <returns>A interactive result for key down on the map.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.KeyDownCore(ThinkGeo.MapSuite.WpfDesktopEdition.KeyEventInteractionArguments)">
            <summary>
            Occurs when key down on the map. 
            </summary>
            <param name="interactionArguments">Interaction arguments for key down on the map.</param>
            <returns>A interactive result for key down on the map.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.OnMapMouseDown(ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseDownInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired when <strong>MapMouseDown</strong> is called.
            </summary>
            <param name="e">The MapMouseDownInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.OnMapMouseMove(ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseMoveInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired when <strong>MapMouseMove</strong> is called.
            </summary>
            <param name="e">The MapMouseMoveInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.OnMapMouseUp(ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseUpInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired when <strong>MapMouseUp</strong> is called.
            </summary>
            <param name="e">The MapMouseUpInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.OnMapMouseClick(ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseClickInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired when <strong>MapMouseClick</strong> is called.
            </summary>
            <param name="e">The MapMouseClickInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.OnMapMouseDoubleClick(ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseDoubleClickInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired when <strong>MapMouseDoubleClick</strong> is called.
            </summary>
            <param name="e">The MapMouseDoubleClickInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.OnMapMouseWheel(ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseWheelInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired when <strong>MapMouseWheel</strong> is called.
            </summary>
            <param name="e">The MapMouseWheelInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.OnMapMouseLeave(ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseLeaveInteractiveOverlayEventArgs)">
            <summary>
            Occurs when mouse leave from the map object.
            </summary>
            <param name="e">Event argument for the MapMouseLeave event.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.OnMapMouseEnter(ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseEnterInteractiveOverlayEventArgs)">
            <summary>
            Occurs when mouse enter on the map object.
            </summary>
            <param name="e">Event argument for the MapMouseEnter event.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.OnMapKeyUp(ThinkGeo.MapSuite.WpfDesktopEdition.MapKeyUpInteractiveOverlayEventArgs)">
            <summary>
            Occurs when key up on the map object.
            </summary>
            <param name="e">Event argument for the MapKeyUp event.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.OnMapKeyDown(ThinkGeo.MapSuite.WpfDesktopEdition.MapKeyDownInteractiveOverlayEventArgs)">
            <summary>
            Occurs when key down on the map object.
            </summary>
            <param name="e">Event argument for the MapKeyDown event.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.DrawCore(ThinkGeo.MapSuite.Core.RectangleShape,ThinkGeo.MapSuite.WpfDesktopEdition.RefreshType)">
            <summary>
            This method draws the InterativeInterativeOverlay abstract class.
            You have to override this API in its sub concrete classes, or it will throw
            NotImplementedException.
            </summary>
            <returns>None</returns>
            <param name="targetExtent">This parameter is the canvas object or a GeoImage to draw on.</param>
            <param name="refreshType">This parameter indicates whether the overlay needs to be refreshed.</param>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MapMouseDown">
            <summary>This event will be fired when Mouse pressed Down on the Map.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MapMouseMove">
            <summary>This event will be fired when Mouse moved on the Map.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MapMouseUp">
            <summary>This event will be fired when Mouse released up on the Map.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MapMouseClick">
            <summary>This event will be fired when Mouse clicked(mouse up and mouse down in the same postion) on the Map.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MapMouseDoubleClick">
            <summary>This event will be fired when Mouse double clicked on the Map.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MapMouseWheel">
            <summary>This event will be fired when Mouse wheel on the Map.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MapMouseLeave">
            <summary>
            Occurs when mouse leave the map canvas.
            </summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MapMouseEnter">
            <summary>
            Occurs when mouse enter the map canvas.
            </summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MapKeyDown">
            <summary>
            Occurs when key down on the map canvas.
            </summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MapKeyUp">
            <summary>
            Occurs when key up on the map canvas.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.InteractiveClickInterval">
            <summary>
            Gets and sets click interval. 
            
            It's a special mouse event that fixes the conflict between mouse click and mouse double click.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentInteractiveOverlay.#ctor">
            <summary>
            Default constructor of the class.
            
            If you use thi constructor, please set the properties correctly or it will
            use their default values.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentInteractiveOverlay.MouseDownCore(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseDown logic in its base class InterativeOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentInteractiveOverlay.MouseMoveCore(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseMove logic in its base class InterativeOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentInteractiveOverlay.MouseUpCore(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseUp logic in its base class InterativeOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentInteractiveOverlay.MouseWheelCore(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseWheel logic in its base class InterativeOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentInteractiveOverlay.MouseDoubleClickCore(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseDoubleClick logic in its base class InterativeOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentInteractiveOverlay.MouseEnterCore(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>
            This overrides the MouseEnter logic in its base class InterativeOverlay.
            </summary>
            <param name="interactionArguments"></param>
            <returns></returns>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentInteractiveOverlay.PanMode">
            <summary>
            Gets or sets the <strong>PanMode</strong> used for the
            ExtentInteractiveOverlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentInteractiveOverlay.MouseWheelMode">
            <summary>
            Gets or sets the <strong>MouseWheelMode</strong> used for the
            ExtentInteractiveOverlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentInteractiveOverlay.DoubleLeftClickMode">
            <summary>
            Gets or sets the <strong>DoubleLeftClickMode</strong> used for the
            ExtentInteractiveOverlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentInteractiveOverlay.DoubleRightClickMode">
            <summary>
            Gets or sets the <strong>DoubleRightClickMode</strong> used for the
            ExtentInteractiveOverlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentInteractiveOverlay.LeftClickDragMode">
            <summary>
            Gets or sets the <strong>LeftClickDragMode</strong> used for the
            ExtentInteractiveOverlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentInteractiveOverlay.LeftClickDragKey">
            <summary>
            Gets or sets the Keys used in LeftClickDrag for the
            ExtentInteractiveOverlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentInteractiveOverlay.RightClickDragMode">
            <summary>
            Gets or sets the <strong>RightClickDragMode</strong> used for the
            ExtentInteractiveOverlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentInteractiveOverlay.RightClickDragKey">
            <summary>
            Gets or sets the Keys used in RightClickDrag for the
            ExtentInteractiveOverlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentInteractiveOverlay.ExtentChangedType">
            <summary>
            Gets or sets the ExtentChangedType for the
            ExtentInteractiveOverlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentInteractiveOverlay.ZoomPercentage">
            <summary>
            Gets or sets the zoom percentage when using the mouse wheel or double-clicking to zoom the MapControl.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MapPanMode">
            <summary>
            This enumeration specifies the behavior type for panning.
            The default value is StandardPanning.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MapPanMode.Default">
            <summary>
            Default value (StandardPanning) of the enumeration.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MapPanMode.StandardPanning">
            <summary>
            This enumeration item means that the map will behave as standard with respect to panning.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MapPanMode.Disabled">
            <summary>
            This enumeration item means that panning will be disabled.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseButton">
            <summary>
            This enumeration defines a MouseButton for MapControl.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseButton.None">
            <summary>
            No mouse button was pressed.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseButton.Left">
            <summary>
            The left mouse button was pressed.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseButton.Right">
            <summary>
            The right mouse button was pressed.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseButton.Middle">
            <summary>
            The middle mouse button was pressed.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseButton.XButton1">
            <summary>
            The first XButton was pressed.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseButton.XButton2">
            <summary>
            The second XButton was pressed.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.RefreshType">
            <summary>
            Represents how the map refreshes.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.RefreshType.Default">
            <summary>
            Default refresh type of overlay. It equals to None.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.RefreshType.None">
            <summary>
            None indicates redraw map for panning. It only translate map's position.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.RefreshType.Redraw">
            <summary>
            Redraw indicates redraw all the map including translate map's position and regenerate images.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentScaleChangingWpfMapEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.CurrentScaleChanging">CurrentScaleChanging</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentScaleChangingWpfMapEventArgs.#ctor">
            <summary>Initialize an instance of the CurrentScaleChangingEventArgs class.</summary>
            <overloads>Initialize an instance of the CurrentScaleChangingEventArgs class.</overloads>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentScaleChangingWpfMapEventArgs.#ctor(ThinkGeo.MapSuite.Core.RectangleShape,System.Double,System.Double,ThinkGeo.MapSuite.Core.GeographyUnit,System.Single,System.Single,System.Boolean)">
            <overloads>Initialize an instance of the CurrentScaleChangingEventArgs class.</overloads>
            <summary>
            Initialize an instance of the CurrentScaleChangingEventArgs class by passing 
            the currentScale, mapUnit, mapWidth and mapHeight.
            </summary>
            <param name="currentExtent">A RectangleShape indicates current map extent.</param>
            <param name="currentScale">A double value indicates current map scale.</param>
            <param name="newScale">A double value indicates the new scale needs to zoom to.</param>
            <param name="mapUnit">A GeographyUnit indicates current map unit.</param>
            <param name="mapWidth">A float value indicates current map scrren width.</param>
            <param name="mapHeight">A float value indicates current map scrren height.</param>
            <param name="cancel">A boolean value indicates whether needs to cancel current operation.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentScaleChangingWpfMapEventArgs.CurrentScale">
            <summary>
            This property specifies the CurrentScale of the CurrentScaleChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentScaleChangingWpfMapEventArgs.NewScale">
            <summary>
            This property specifies the NewScale of the CurrentScaleChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentScaleChangingWpfMapEventArgs.MapUnit">
            <summary>
            This property specifies the MapUnit of the CurrentScaleChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentScaleChangingWpfMapEventArgs.MapWidth">
            <summary>
            This property specifies the MapWidth of the CurrentScaleChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentScaleChangingWpfMapEventArgs.MapHeight">
            <summary>
            This property specifies the MapHeight of the CurrentExtentChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentScaleChangingWpfMapEventArgs.CurrentExtent">
            <summary>
            This property specifies the CurrentExtent of the CurrentExtentChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentScaleChangingWpfMapEventArgs.Cancel">
            <summary>
            Gets or sets whether the action will be canceled or not.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddedTrackInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.VertexAdded">VertexAdded.</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddedTrackInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of VertexAddedTrackInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddedTrackInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Vertex,ThinkGeo.MapSuite.Core.Feature)">
            <summary>
            Constructor of VertexAddedTrackInteractiveOverlayEventArgs class.
            </summary>
            <param name="addedVertex">This parameter specified the vertex is added.</param>
            <param name="affectedFeature">This parameter specified the feature to be used to add vertex on when tracking shape.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddedTrackInteractiveOverlayEventArgs.AddedVertex">
            <summary>
            Gets or sets the vertex added.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddedTrackInteractiveOverlayEventArgs.AffectedFeature">
            <summary>
            Gets or sets the Feature with vertex added.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.TrackStartingTrackInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.TrackStarting">TrackStarting.</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackStartingTrackInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of TrackStartingTrackInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackStartingTrackInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Vertex,System.Boolean)">
            <summary>
            Constructor of TrackStartingTrackInteractiveOverlayEventArgs class.
            </summary>
            <param name="startingVertex">This parameter specified the started vertex when tracking shape action is being to start.</param>
            <param name="cancel">This parameter specified the cancel property.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.TrackStartingTrackInteractiveOverlayEventArgs.Cancel">
            <summary>
            Gets or sets the action to be canceled or not.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.TrackStartingTrackInteractiveOverlayEventArgs.StartingVertex">
            <summary>
            Gets or sets the started vertex when tracking shape action is being to start.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.WorldMapKitWmsWpfOverlay">
            <summary>
            This class represents an WmsOverlay which has MapSuite world map kit server integrated.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WorldMapKitWmsWpfOverlay.#ctor">
            <summary>
            Constructor of WorldMapKitWmsWpfOverlay class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WorldMapKitWmsWpfOverlay.#ctor(System.Net.WebProxy)">
            <summary>
            Constructor of WorldMapKitWmsWpfOverlay class.
            </summary>
            <param name="webProxy">The proxy used for requesting a Web Response</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WorldMapKitWmsWpfOverlay.#ctor(System.String,System.String)">
            <summary>
            Constructor of WorldMapKitWmsWpfOverlay class.
            </summary>
            <param name="clientId">The clientId for the WMS Server.</param>
            <param name="privateKey">The privateKey for the WMS Server.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WorldMapKitWmsWpfOverlay.#ctor(System.Net.WebProxy,System.String,System.String)">
            <summary>
            Constructor of WorldMapKitWmsWpfOverlay class.
            </summary>
            <param name="webProxy">Proxy to use for the WMS Server.</param>
            <param name="clientId">The clientId for the WMS Server.</param>
            <param name="privateKey">The privateKey for the WMS Server.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WorldMapKitWmsWpfOverlay.GetTileCore">
            <summary>
            This method overrides GetTile method. 
            </summary>
            <remarks>
            When implementing this method, consider what tile to create here.
            This class uses for extenting the overlay in the future.
            We will have more tile type to create.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WorldMapKitWmsWpfOverlay.DrawTileCore(ThinkGeo.MapSuite.WpfDesktopEdition.Tile,ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            This method redraws one tile with the provided extent and map unit.
            </summary>
            <param name="tile">This parameter indicates a tile which is ready to draw.</param>
            <param name="targetExtent">This parameter is the world extent to draw the tile.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WorldMapKitWmsWpfOverlay.GetBoundingBoxCore">
            <summary>
            This method gets an entire boundingbox to ThinkGeo World Map Kit WMS service.
            </summary>
            <returns>Returns a RectangleShape indicating the world extent of ThinkGeo World Map Kik WMS service.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WorldMapKitWmsWpfOverlay.InitializeCore(ThinkGeo.MapSuite.WpfDesktopEdition.MapArguments)">
            <summary>
            This method initializes overlay object.
            </summary>
            <remarks>
            When implementing this method, consider initializing the overlay canvas such as setting its z-index,
            setting current map reference to the CurrentMap property.
            </remarks>
            <param name="mapArguments">This parameter maintains current map information for calculating mechanism.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WorldMapKitWmsWpfOverlay.SaveStateCore">
            <summary>
            This method saves overlay state to a byte array.
            </summary>
            <returns>A byte array indicates current overlay state.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WorldMapKitWmsWpfOverlay.LoadStateCore(System.Byte[])">
            <summary>
            This method restore the overlay state back from the specified state.
            </summary>
            <param name="state">This parameter indicates the state for restore the overlay.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WorldMapKitWmsWpfOverlay.InitThreadLockObject">
            <summary>
            Initialize thread lock object;
            for if the request count is to big to the server at once,
            the server will send a 503 error back.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WorldMapKitWmsWpfOverlay.Projection">
            <summary>
            Gets or sets the projection for the this overlay.
            </summary>
            <remarks>
            This property needs work with map unit setting on the map object. 
            All overlay adding to the map must keep the same unit or else the map won't display properly.
            </remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WorldMapKitWmsWpfOverlay.ClientId">
            <summary>
            Gets or sets a value that is your Client Id.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WorldMapKitWmsWpfOverlay.PrivateKey">
            <summary>
            Gets or sets a value that is unique to your client ID, please keep your key secure.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.WorldMapKitWmsWpfOverlay.WebProxy">
            <summary>
            This property gets or sets the proxy used for requesting a Web Response.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.RenderMode">
            <summary>This enumeration represents the drawing mode for rendering map.</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.RenderMode.Default">
            <summary>
            Use Gdi+ to render map. It is the default value to render the map images.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.RenderMode.GdiPlus">
            <summary>
            Use Gdi+ to render map.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.RenderMode.DrawingVisual">
            <summary>
            Use DrawingVisual to render map.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureDraggedEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.FeatureDragged">FeatureDragged</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureDraggedEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of FeatureDraggedEditInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureDraggedEditInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Feature)">
            <summary>
            Constructor of FeatureDraggedEditInteractiveOverlayEventArgs class.
            </summary>
            <param name="draggedFeature">This parameter specified the feature dragged.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.FeatureDraggedEditInteractiveOverlayEventArgs.DraggedFeature">
            <summary>
            Gets or sets the Feature dragged.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.SimpleMarkerOverlay">
            <summary>
            Represents a <strong>MarkerOverlay</strong> object to which you can add markers
            directly.
            </summary>
            <remarks>
            The <strong>SimpleMarkerOverlay</strong> class has a <strong>Markers</strong>
            collection to which you can add markers directly. 
            All of these markers will be placed on the map loading. 
            You can also specify whether the markers can be
            dragged by setting the <strong>DragMode</strong> property.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.SimpleMarkerOverlay.#ctor">
            <summary>
            Constructor of SimpleMarkerOverlay class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.SimpleMarkerOverlay.#ctor(System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.WpfDesktopEdition.Marker})">
            <summary>
            Constructor of SimpleMarkerOver
            </summary>
            <param name="markers"></param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.SimpleMarkerOverlay.GetMarkersToDrawCore(ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            Gets all the markers that are containing in the provided world extent.
            </summary>
            <param name="targetExtent">A world extent of current viewport.</param>
            <returns>A collection of marker objects that are in the provided world extent.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.SimpleMarkerOverlay.OnMarkerDragging(ThinkGeo.MapSuite.WpfDesktopEdition.MarkerDraggingSimpleMarkerOverlayEventArgs)">
            <summary>
            This method raises before the marker is dragging.
            </summary>
            <param name="args">This parameter is the event args for the MarkerDragging event.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.SimpleMarkerOverlay.OnMarkerDragged(ThinkGeo.MapSuite.WpfDesktopEdition.MarkerDraggedSimpleMarkerOverlayEventArgs)">
            <summary>
            This method raises after the marker is dragged.
            </summary>
            <param name="args">This parameter is the event args for the MarkerDragged event.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.SimpleMarkerOverlay.GetBoundingBoxCore">
            <summary>
            This method gets a bounding box that maintains all the markers which are added in this overlay.
            </summary>
            <returns>Returns a RectangleShape that maintains all the markers which are added in this overlay.</returns>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.SimpleMarkerOverlay.MarkerDragging">
            <summary>
            This is an event raises before the marker is dragging.
            </summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.SimpleMarkerOverlay.MarkerDragged">
            <summary>
            This is an event raises after the marker is dragged.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.SimpleMarkerOverlay.DragMode">
            <summary>Gets a value that specifies how the markers can be dragged.</summary>
            <value>An enum value that specifies how the markers can be dragged.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.SimpleMarkerOverlay.Markers">
            <summary>
            A collection that holds all the marker objects adding in the overlay.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet">
            <summary>
            This class represents a collection of MarkerZoomLevel that determines the
            appearance of markers at different zoomlevels.
            </summary>
            <remarks>
            	<para>This class represents a collection of <strong>MarkerZoomLevel</strong>. Each
                <strong>MarkerZoomLevel</strong> has a different scale and style definition which
                will be applied to markers when it is the current zoomlevel.</para>
            	<para>The MarkerZoomLevelSet decides which zoomlevel applys its styles to the
                markers base on the current zoomlevel.</para>
            	<para>If current zoomlevel is level 03 and we defined the styles on zoomlevel as
                below:</para>
            	<para>markerOverlay.ZoomLevelSet.ZoomLevel04.DefaultMarkerStyle.WebImage = ...;
                markerOverlay.ZoomLevelSet.ZoomLevel04.DefaultMarkerStyle.Popup = ...;
                markerOverlay.ZoomLevelSet.ZoomLevel04.ApplyUntilZoomLevel =
                ApplyUntilZoomLevel.Level10;</para>
            	<para>then no zoomlevel will apply styles to the markers. There will be no markers
                display on the screen.</para>
            	<para>When we change the current zoomlevel to level 04, now current zoomlevel falls
                into the zoomlevel range (04-10) that defines styles. The ZoomlevelSet will apply
                the styles on the zoomlevel 04 to the markers.</para>
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet.#ctor">
            <summary>Initialize a new instance of the MarkerZoomLevelSet class.</summary>
            <returns>A new instance of the WebZoomLevelSet class.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet.SelectZoomLevelById(System.Int32)">
            <summary>Select MarkerZoomLevel instance by its id.</summary>
            <param name="id">parameter can be 1 - 20.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet.GetZoomLevelForDrawing(System.Int32)">
            <summary>
            Returns the MarkerZoomLevel object whose styles will be applies to the markers
            base on the current zoomlevel that passed in.
            </summary>
            <param name="currentZoomLevelId">
            An int value that indicates which zoomlevel is the current zoomlevel. The int
            value can only be in 1-20.
            </param>
            <returns>
            The MarkerZoomLevel object whose styles will be applies to the markers
            base on the current zoomlevel that passed in.
            </returns>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet.ZoomLevel01">
            <summary>Gets the MarkerZoomLevel for Level01.</summary>
            <value>A MarkerZoomLevel object which represents the Level01.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet.ZoomLevel02">
            <summary>Gets the MarkerZoomLevel for Level02.</summary>
            <value>A MarkerZoomLevel object which represents the Level02.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet.ZoomLevel03">
            <summary>Gets the MarkerZoomLevel for Level03.</summary>
            <value>A MarkerZoomLevel object which represents the Level03.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet.ZoomLevel04">
            <summary>Gets the MarkerZoomLevel for Level04.</summary>
            <value>A MarkerZoomLevel object which represents the Level04.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet.ZoomLevel05">
            <summary>Gets the MarkerZoomLevel for Level05.</summary>
            <value>A MarkerZoomLevel object which represents the Level05.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet.ZoomLevel06">
            <summary>Gets the MarkerZoomLevel for Level06.</summary>
            <value>A MarkerZoomLevel object which represents the Level06.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet.ZoomLevel07">
            <summary>Gets the MarkerZoomLevel for Level07.</summary>
            <value>A MarkerZoomLevel object which represents the Level07.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet.ZoomLevel08">
            <summary>Gets the MarkerZoomLevel for Level08.</summary>
            <value>A MarkerZoomLevel object which represents the Level08.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet.ZoomLevel09">
            <summary>Gets the MarkerZoomLevel for Level09.</summary>
            <value>A MarkerZoomLevel object which represents the Level09.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet.ZoomLevel10">
            <summary>Gets the MarkerZoomLevel for Level10.</summary>
            <value>A MarkerZoomLevel object which represents the Level10.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet.ZoomLevel11">
            <summary>Gets the MarkerZoomLevel for Level11.</summary>
            <value>A MarkerZoomLevel object which represents the Level11.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet.ZoomLevel12">
            <summary>Gets the MarkerZoomLevel for Level12.</summary>
            <value>A MarkerZoomLevel object which represents the Level12.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet.ZoomLevel13">
            <summary>Gets the MarkerZoomLevel for Level13.</summary>
            <value>A MarkerZoomLevel object which represents the Level13.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet.ZoomLevel14">
            <summary>Gets the MarkerZoomLevel for Level14.</summary>
            <value>A MarkerZoomLevel object which represents the Level14.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet.ZoomLevel15">
            <summary>Gets the MarkerZoomLevel for Level15.</summary>
            <value>A MarkerZoomLevel object which represents the Level15.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet.ZoomLevel16">
            <summary>Gets the MarkerZoomLevel for Level16.</summary>
            <value>A MarkerZoomLevel object which represents the Level16.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet.ZoomLevel17">
            <summary>Gets the MarkerZoomLevel for Level17.</summary>
            <value>A MarkerZoomLevel object which represents the Level17.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet.ZoomLevel18">
            <summary>Gets the MarkerZoomLevel for Level18.</summary>
            <value>A MarkerZoomLevel object which represents the Level18.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet.ZoomLevel19">
            <summary>Gets the MarkerZoomLevel for Level19.</summary>
            <value>A MarkerZoomLevel object which represents the Level19.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet.ZoomLevel20">
            <summary>Gets the MarkerZoomLevel for Level20.</summary>
            <value>A MarkerZoomLevel object which represents the Level20.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MarkerZoomLevelSet.CustomZoomLevels">
            <summary>
            Gets a MarkerZoomLevel collection that is used for you to define your own custom
            zoomlevels.
            </summary>
            <remarks>
            	<para>When you add custom zoomlevels to the CustomZoomLevels collection, the
                default ZoomLevel01-20 will be disabled. The zoomLevels in the CustomZoomLevels are
                matched with the scales defined in the Map.ZoomLevelScales. For
                example,</para>
            	<para>CustomZoomLevels[0] has the scale that equals to
                Map.ClientZoomLevelScales[0].</para>
            </remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentExtentChangingWpfMapEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.CurrentExtentChanging">CurrentExtentChanging</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentExtentChangingWpfMapEventArgs.#ctor">
            <summary>Initialize an instance of the CurrentExtentChangingEventArgs class.</summary>
            <overloads>Initialize an instance of the CurrentExtentChangingEventArgs class.</overloads>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentExtentChangingWpfMapEventArgs.#ctor(ThinkGeo.MapSuite.Core.RectangleShape,ThinkGeo.MapSuite.Core.RectangleShape,ThinkGeo.MapSuite.Core.GeographyUnit,System.Single,System.Single,System.Boolean)">
            <overloads>Initialize an instance of the CurrentExtentChangingEventArgs class.</overloads>
            <summary>
            Initialize an instance of the CurrentExtentChangingEventArgs class by passing 
            the currentExtent, mapUnit, mapWidth and mapHeight.
            </summary>
            <param name="currentExtent">A RectangleShape indicates current map extent.</param>
            <param name="newExtent">A RecangleShape indicates the target extent for map.</param>
            <param name="mapUnit">A GeographyUnit value indicates current map unit.</param>
            <param name="mapWidth">A float value indicates screen width of current map.</param>
            <param name="mapHeight">A float value indicates screen height of current map.</param>
            <param name="cancel">A boolean value indicates whether current operation needs cancel.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentExtentChangingWpfMapEventArgs.CurrentExtent">
            <summary>
            This property specifies the CurrentExtent of the CurrentExtentChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentExtentChangingWpfMapEventArgs.NewExtent">
            <summary>
            This property specifies the NewExtent of the CurrentExtentChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentExtentChangingWpfMapEventArgs.MapUnit">
            <summary>
            This property specifies the MapUnit of the CurrentExtentChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentExtentChangingWpfMapEventArgs.MapWidth">
            <summary>
            This property specifies the MapWidth of the CurrentExtentChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentExtentChangingWpfMapEventArgs.MapHeight">
            <summary>
            This property specifies the MapHeight of the CurrentExtentChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentExtentChangingWpfMapEventArgs.Cancel">
            <summary>
            Gets or sets whether the action will be canceled or not.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.VertexMovedEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.VertexMoved">VertexMoved.</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.VertexMovedEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of VertexMovedEditInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.VertexMovedEditInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.Vertex)">
            <summary>
            Constructor of VertexMovedEditInteractiveOverlayEventArgs class.
            </summary>
            <param name="affectedVertexFeature">This parameter specified the affectedVertex feature property.</param>
            <param name="movedVertex">This parameter specified the target vertex moved.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.VertexMovedEditInteractiveOverlayEventArgs.AffectedVertexFeature">
            <summary>
            Gets or sets the Feature to be used to remove vertex.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.VertexMovedEditInteractiveOverlayEventArgs.MovedVertex">
            <summary>
            Gets or sets the vertex moved.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.TrackStartedTrackInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.TrackStarted">TrackStarted.</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackStartedTrackInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of TrackStartedTrackInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackStartedTrackInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Vertex)">
            <summary>
            Constructor of TrackStartedTrackInteractiveOverlayEventArgs class.
            </summary>
            <param name="startedVertex">This parameter specified the started vertex when tracking shape action is  started.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.TrackStartedTrackInteractiveOverlayEventArgs.StartedVertex">
            <summary>
            Gets or sets the started vertex when tracking shape action is  started.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.TrackEndingTrackInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.TrackEnding">TrackEnding.</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackEndingTrackInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of TrackEndingTrackInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackEndingTrackInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.BaseShape,System.Boolean)">
            <summary>
            Constructor of TrackEndingTrackInteractiveOverlayEventArgs class.
            </summary>
            <param name="shape">This parameter specified the shape to be tracking out.</param>
            <param name="cancel">This parameter specified the cancel property.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.TrackEndingTrackInteractiveOverlayEventArgs.TrackShape">
            <summary>
            Gets or sets the shape to be tracking out.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.TrackEndingTrackInteractiveOverlayEventArgs.Cancel">
            <summary>
            Gets or sets the action to be canceled or not.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay">
            <summary>
            This class inherits from InterativeOverlay abstract class. This specified overlay describle the
            EditShape interative process with MapControl using Mouse or Keyborad.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.#ctor">
            <summary>
            Default constructor of the class.
            
            If you use thi constructor, please set the properties correctly or it will
            use their default values.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.DrawCore(ThinkGeo.MapSuite.Core.RectangleShape,ThinkGeo.MapSuite.WpfDesktopEdition.RefreshType)">
            <summary>This method draws the EditInterativeOverlay.</summary>
            <remarks>
             This method draws the representation of the overlay based on the extent you provided.<br/>
            	<br/>
            When implementing this abstract method, consider each feature and its column data
            values. You can use the full power of the GeoCanvas to do the drawing. If you need
            column data for a feature, be sure to override the GetRequiredColumnNamesCore and add
            the columns you need to the collection. In many of the styles, we add properties that
            allow the user to specify which field they need; then, in the GetRequiredColumnNamesCore,
            we read that property and add it to the collection.
            </remarks>
            <returns>None</returns>
            <param name="targetExtent">This parameter is current world extent in the viewport.</param>
            <param name="refreshType">This parameter indicats whether this overlay needs to be refreshed.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.PanToCore(ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            Pans to the target world extent. Occurs when panning the map only.
            </summary>
            <param name="targetExtent">The target world extent to pan.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.SetSelectedControlPoint(ThinkGeo.MapSuite.Core.PointShape,System.Double)">
             <summary>This protected method is to set the control point.</summary>
             <returns>Returns true if control point are found and set correct, other wise, returns false.</returns>
             <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetPointShape, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">If you pass a minus value for the tolerance, we will throw an ArgumentOutOfRangeException.</exception>
             <param name="targetPointShape">This parameter is target point shape we determine to edit.</param>
             <param name="searchingTolerance">This parameter is the searchinig tolerance to seach the control point.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.SetSelectedControlPointCore(ThinkGeo.MapSuite.Core.PointShape,System.Double)">
             <summary>This protected virtual method is the Core method of SetSelectedControlPoint API.</summary>
             <returns>A feature stands for the selected control point.</returns>
             <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetPointShape, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">If you pass a minus value for the tolerance, we will throw an ArgumentOutOfRangeException.</exception>
             <param name="targetPointShape">This parameter is target point shape we determine to edit.</param>
             <param name="searchingTolerance">This parameter is the searchinig tolerance to seach the control point.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.EndEditing(ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
             This method End the editing for the interative editing on the feature in the EditShapesLayer.
             You can override its logic by rewrite its core method.
             </summary>
             <param name="targetPointShape">This is the targetPointShape possible be used when overriding.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.EndEditingCore(ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            This is the core method of EndEditing method.
            This method End the editing for the interative editing on the feature in the EditShapesLayer.
            </summary>
            <param name="targetPointShape">This is the targetPointShape possible be used when overriding.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.ClearAllControlPoints">
            <summary>
            This method clears all control points in corresponding layer.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.CalculateAllControlPoints">
            <summary>
            This method calculates all control points.
            </summary>
            <remarks>First, it will clear all control points. Then it will calculate each control points according to their settings.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.CalculateDragControlPoints">
            <summary>
            This method caculates the Drag control points for all the features in the EditShapesLayer.
            You can override its logic by rewrite its core method.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.CalculateDragControlPointsCore(ThinkGeo.MapSuite.Core.Feature)">
            <summary>
            This is the core API for the CalculateDragControlPoints, you can override this method 
            if you want to change its logic.
            </summary>
            <param name="feature">The target feature to caculate the control point.</param>
            <returns>A collection of features stands for the Drag control points.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.CalculateRotateControlPoints">
            <summary>
            This method caculates the Rotate control points for all the features in the EditShapesLayer.
            You can override its logic by rewrite its core method.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.CalculateRotateControlPointsCore(ThinkGeo.MapSuite.Core.Feature)">
            <summary>
            This is the core API for the CalculateRotateControlPoints, you can override this method 
            if you want to change its logic.
            </summary>
            <param name="feature">The target feature to caculate the control point.</param>
            <returns>A collection of features stands for the Rotate control points.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.CalculateResizeControlPoints">
            <summary>
            This method caculates the Resize control points for all the features in the EditShapesLayer.
            You can override its logic by rewrite its core method.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.CalculateResizeControlPointsCore(ThinkGeo.MapSuite.Core.Feature)">
            <summary>
            This is the core API for the CalculateResizeControlPoints, you can override this method 
            if you want to change its logic.
            </summary>
            <param name="feature">The target feature to caculate the control point.</param>
            <returns>A collection of features stands for the Resize control points.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.CalculateVertexControlPoints">
            <summary>
            This method caculates the vertex control points for all the features in the EditShapesLayer.
            You can override its logic by rewrite its core method.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.CalculateVertexControlPointsCore(ThinkGeo.MapSuite.Core.Feature)">
            <summary>
            This is the core API for the CalculateVertexControlPoints, you can override this method 
            if you want to change its logic.
            </summary>
            <param name="feature">The target feature to caculate the control point.</param>
            <returns>A collection of features stands for the Vertex control points.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.MouseDownCore(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseDown logic in its base class InterativeOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.MouseMoveCore(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseMove logic in its base class InterativeOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.MouseUpCore(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseUp logic in its base class InterativeOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.MouseClickCore(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseClick logic in its base class.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.MouseDoubleClickCore(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseDoubleClick logic in its base class InterativeOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.DragFeature(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.PointShape,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            This is the method to Drag a feature.
            </summary>
            /// <remarks>
            	<para>This method is the concrete wrapper for the abstract method DragFeatureCore.<br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the sourceControlPoint, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetControlPoint, we will throw an ArgumentNullException.</exception>
            <param name="sourceFeature">This parameter specifies the source feature to be dragged.</param>
            <param name="sourceControlPoint">This parameter specifes the source control point to drag the feature.</param>
            <param name="targetControlPoint">This parameter specifes the target control point to drag the feature.</param>
            <returns>Returns a dragged feature.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.DragFeatureCore(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.PointShape,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            This is the Core method of DragFeature which encapsulate the logic.
            </summary>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the sourceControlPoint, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetControlPoint, we will throw an ArgumentNullException.</exception>
            <param name="sourceFeature">This parameter specifies the source feature to be dragged.</param>
            <param name="sourceControlPoint">This parameter specifes the source control point to drag the feature.</param>
            <param name="targetControlPoint">This parameter specifes the target control point to drag the feature.</param>
            <returns>Returns a dragged feature.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.ResizeFeature(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.PointShape,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            This is the method to Resize a feature.
            </summary>
            /// <remarks>
            	<para>This method is the concrete wrapper for the abstract method ResizeFeatureCore.<br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the sourceControlPoint, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetControlPoint, we will throw an ArgumentNullException.</exception>
            <param name="sourceFeature">This parameter specifies the source feature to be resized.</param>
            <param name="sourceControlPoint">This parameter specifes the source control point to resize the feature.</param>
            <param name="targetControlPoint">This parameter specifes the target control point to resize the feature.</param>
            <returns>Returns a resized feature.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.ResizeFeatureCore(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.PointShape,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            This is the Core method of ResizeFeature which encapsulate the logic.
            </summary>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the sourceControlPoint, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetControlPoint, we will throw an ArgumentNullException.</exception>
            <param name="sourceFeature">This parameter specifies the source feature to be resized.</param>
            <param name="sourceControlPoint">This parameter specifes the source control point to resize the feature.</param>
            <param name="targetControlPoint">This parameter specifes the target control point to resize the feature.</param>
            <returns>Returns a resized feature.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.RotateFeature(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.PointShape,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            This is the method to Rotate a feature.
            </summary>
            /// <remarks>
            	<para>This method is the concrete wrapper for the abstract method RotateFeatureCore.<br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the sourceControlPoint, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetControlPoint, we will throw an ArgumentNullException.</exception>
            <param name="sourceFeature">This parameter specifies the source feature to be rotated.</param>
            <param name="sourceControlPoint">This parameter specifes the source control point to rotate the feature.</param>
            <param name="targetControlPoint">This parameter specifes the target control point to rotate the feature.</param>
            <returns>Returns a rotated feature.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.RotateFeatureCore(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.PointShape,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            This is the Core method of RotateFeature which encapsulate the logic.
            </summary>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the sourceControlPoint, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetControlPoint, we will throw an ArgumentNullException.</exception>
            <param name="sourceFeature">This parameter specifies the source feature to be rotated.</param>
            <param name="sourceControlPoint">This parameter specifes the source control point to rotate the feature.</param>
            <param name="targetControlPoint">This parameter specifes the target control point to rotate the feature.</param>
            <returns>Returns a resized feature.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.AddVertex(ThinkGeo.MapSuite.Core.PointShape,System.Double)">
            <summary>
            This is the method to add vertex from a feature.
            </summary>
            /// <remarks>
            	<para>This method is the concrete wrapper for the abstract method AddVertexCore.<br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetPointShape, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">If you pass a searchingTolerance negative value, we will throw an ArgumentOutOfRangeException.</exception>
            <param name="targetPointShape">This parameter specifies the point shape to search the vertex.</param>
            <param name="searchingTolerance">This parameter specifes the searching tolerance to search the vetex.</param>
            <returns>True if add vertex succeed , other wise return false.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.AddVertexCore(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.PointShape,System.Double)">
            <summary>
            This is the Core method of AddVertex which encapsulate the logic.
            </summary>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetPointShape, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">If you pass a searchingTolerance negative value, we will throw an ArgumentOutOfRangeException.</exception>
            <param name="targetPointShape">This parameter specifies the target vertex to be added.</param>
            <param name="searchingTolerance">This parameter specifes the searching tolerance to search the vetex.</param>
            <param name="targetFeature">This parameter specifies the target feature to be add vertex from.</param>
            <returns>Returns a vertex added feature.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.MoveVertex(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.PointShape,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            This is the method to move vertex from a feature.
            </summary>
            /// <remarks>
            	<para>This method is the concrete wrapper for the abstract method MoveVertexCore.<br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the sourceControlPoint, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetControlPoint, we will throw an ArgumentNullException.</exception>
            <param name="sourceFeature">This parameter specifies the source feature to be move vertex from.</param>
            <param name="sourceControlPoint">This parameter specifes the source control point to move vertex from the feature.</param>
            <param name="targetControlPoint">This parameter specifes the target control point to move vertex from the feature.</param>
            <returns>Returns a rotated feature.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.MoveVertexCore(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.PointShape,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            This is the Core method of MoveVertex which encapsulate the logic.
            </summary>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the sourceControlPoint, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetControlPoint, we will throw an ArgumentNullException.</exception>
            <param name="sourceFeature">This parameter specifies the source feature to be move vertex from.</param>
            <param name="sourceControlPoint">This parameter specifes the source control point to move vertex from the feature.</param>
            <param name="targetControlPoint">This parameter specifes the target control point to move vertex from the feature.</param>
            <returns>Returns a vertex moved feature.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.RemoveVertex(ThinkGeo.MapSuite.Core.PointShape,System.Double)">
            <summary>
            This is the method to remove vertex from a feature.
            </summary>
            /// <remarks>
            	<para>This method is the concrete wrapper for the abstract method RemoveVertexCore.<br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetPointShape, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">If you pass a searchingTolerance negative value, we will throw an ArgumentOutOfRangeException.</exception>
            <param name="targetPointShape">This parameter specifies the point shape to search the vertex.</param>
            <param name="searchingTolerance">This parameter specifes the searching tolerance to search the vetex.</param>
            <returns>True if remove vertex succeed , other wise return false.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.RemoveVertexCore(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.Vertex,System.Double)">
            <summary>
            This is the Core method of RemoveVertex which encapsulate the logic.
            </summary>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetPointShape, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">If you pass a searchingTolerance negative value, we will throw an ArgumentOutOfRangeException.</exception>
            <param name="selectedVertex">This parameter specifies the selected vertex to search the vertex.</param>
            <param name="searchingTolerance">This parameter specifes the searching tolerance to search the vetex.</param>
            <param name="editShapeFeature">This parameter specifies the target feature to be remove vertex from.</param>
            <returns>Returns a vertex removed feature.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.OnFeatureDragging(ThinkGeo.MapSuite.WpfDesktopEdition.FeatureDraggingEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired before dragging the feature.
            </summary>
            <param name="e">The FeatureDraggingEditInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.OnFeatureDragged(ThinkGeo.MapSuite.WpfDesktopEdition.FeatureDraggedEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired after dragging the feature.
            </summary>
            <param name="e">The FeatureDraggedEditInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.OnFeatureResizing(ThinkGeo.MapSuite.WpfDesktopEdition.FeatureResizingEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired before resizing the feature.
            </summary>
            <param name="e">The FeatureResizingEditInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.OnFeatureResized(ThinkGeo.MapSuite.WpfDesktopEdition.FeatureResizedEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired after resizing the feature.
            </summary>
            <param name="e">The FeatureResizedEditInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.OnFeatureRotating(ThinkGeo.MapSuite.WpfDesktopEdition.FeatureRotatingEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired before rotating the feature.
            </summary>
            <param name="e">The FeatureRotatingEditInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.OnFeatureRotated(ThinkGeo.MapSuite.WpfDesktopEdition.FeatureRotatedEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired after rotating the feature.
            </summary>
            <param name="e">The FeatureRotatedEditInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.OnControlPointSelecting(ThinkGeo.MapSuite.WpfDesktopEdition.ControlPointSelectingEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired before control point selected.
            </summary>
            <param name="e">The ControlPointSelectingEditInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.OnControlPointSelected(ThinkGeo.MapSuite.WpfDesktopEdition.ControlPointSelectedEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired after control point selected.
            </summary>
            <param name="e">The ControlPointSelectedEditInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.OnVertexAdding(ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddingEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired before vertex added to the edit feature.
            </summary>
            <param name="e">The VertexAddingEditInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.OnVertexAdded(ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddedEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired after vertex added to the edit feature.
            </summary>
            <param name="e">The VertexAddedEditInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.OnVertexMoving(ThinkGeo.MapSuite.WpfDesktopEdition.VertexMovingEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired before moving the feature.
            </summary>
            <param name="e">The VertexMovingEditInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.OnVertexMoved(ThinkGeo.MapSuite.WpfDesktopEdition.VertexMovedEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired after moving the feature.
            </summary>
            <param name="e">The VertexMovedEditInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.OnVertexRemoving(ThinkGeo.MapSuite.WpfDesktopEdition.VertexRemovingEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired before vertex removed from the edit feature.
            </summary>
            <param name="e">The VertexRemovingEditInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.OnVertexRemoved(ThinkGeo.MapSuite.WpfDesktopEdition.VertexRemovedEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired after vertex removed from the edit feature.
            </summary>
            <param name="e">The VertexRemovedEditInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.SaveStateCore">
            <summary>
            This method saves overlay state to a byte array.
            </summary>
            <returns>A byte array indicates current overlay state.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.LoadStateCore(System.Byte[])">
            <summary>
            This method restore the overlay state back from the specified state.
            </summary>
            <param name="state">This parameter indicates the state for restore the overlay.</param>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.FeatureDragged">
            <summary>This event will be fired after drag the feature.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.FeatureDragging">
            <summary>This event will be fired before drag the feature.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.FeatureResized">
            <summary>This event will be fired after resize the feature.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.FeatureResizing">
            <summary>This event will be fired before resize the feature.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.FeatureRotated">
            <summary>This event will be fired after rotate the feature.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.FeatureRotating">
            <summary>This event will be fired before rotate the feature.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.VertexAdded">
            <summary>This event will be fired after add the vertex.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.VertexAdding">
            <summary>This event will be fired before add the vertex.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.VertexMoved">
            <summary>This event will be fired after move the vertex.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.VertexMoving">
            <summary>This event will be fired before move the vertex.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.VertexRemoved">
            <summary>This event will be fired after remove the vertex.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.VertexRemoving">
            <summary>This event will be fired before remove the vertex.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.ControlPointSelected">
            <summary>This event will be fired after select the control point.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.ControlPointSelecting">
            <summary>This event will be fired before select the control point.</summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.EditShapesLayer">
            <summary>
            This property gets the InMemoryFeatureLayer which holds the edit shapes.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.DragControlPointsLayer">
            <summary>
            This property gets the InMemoryFeatureLayer which holds the control points for drag.
            </summary>
            <remarks>Every control points for drag are not the existing vertex of the edit shapes.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.RotateControlPointsLayer">
            <summary>
            This property gets the InMemoryFeatureLayer which holds the control points for rotate.
            </summary>
            <remarks>Every control points for rotate are not the existing vertex of the edit shapes.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.ResizeControlPointsLayer">
            <summary>
            This property gets the InMemoryFeatureLayer which holds the control points for resize.
            </summary>
            <remarks>Every control points for resize are not the existing vertex of the edit shapes.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.ExistingControlPointsLayer">
            <summary>
            This property gets the InMemoryFeatureLayer which holds the control points which represents the existing vertices of the edit shapes.
            </summary>
            <remarks>Every control points in this layer are the existing vertices of the edit shapes.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.ControlPointType">
            <summary>
            Gets or sets the ControlPointType for the control points of the edit shapes.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.SelectControlPointFeature">
            <summary>
            This property gets the feature represents the select control points of the edit shapes.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.OriginalEditingFeature">
            <summary>
            This property gets the feature represents the original editing feature.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.CanDrag">
            <summary>Gets a value which indicates whether the shape can be dragged.</summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.CanReshape">
            <summary>Gets a value which indicates whether the shape can be reshaped.</summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.CanResize">
            <summary>Gets a value which indicates whether the shape can be resized.</summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.CanRotate">
            <summary>Gets a value which indicates whether the shape can be rotated.</summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.CanAddVertex">
            <summary>Gets a value which indicates whether the shape can Add new vertex.</summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.CanRemoveVertex">
            <summary>Gets a value which indicates whether the shape can remove a existing vertex.</summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.IsEmpty">
            <summary>This property indicates whether this overlay is empty or not.</summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.RenderMode">
            <summary>This property gets or sets the render mode for this overlay.</summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingOverlayEventArgs">
            <summary>
            This is the event arguments for the OverlayDrawing event on the MapEngine class. It
            is raised before the Overlay is drawn.
            </summary>
            <remarks>
            This is the event arguments for the OverlayDrawing event on the MapEngine class. It
            is raised before the Overlay is drawn. This event allows you to cancel, manipulate the
            Layer, or draw something with the canvas before the Layer draws.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingOverlayEventArgs.#ctor">
            <summary>Constructor of DrawingOverlayEventArgs class.</summary>
            <overloads>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </overloads>
            <returns>None</returns>
            <remarks>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.RectangleShape,System.Boolean)">
            <summary>Constructor of DrawingOverlayEventArgs class.</summary>
            <overloads>
            This constructor allows you to set the Overlay to be drawn, the world extent and
            the image you are drawing on.
            </overloads>
            <param name="worldExtent">This parameter is the extent for drawing an overlay.</param>
            <param name="cancel">This parameter indicates whether cancel current drawing process.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingOverlayEventArgs.WorldExtent">
            <summary>
            Gets or sets an extent to draw the overlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingOverlayEventArgs.Cancel">
            <summary>
            Gets or sets a value that determines whether you want to cancel the Overlay from
            drawing.
            </summary>
            <value>This property gets a value that determines whether you want to cancel the Overlay from drawing.</value>
            <remarks>None</remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.OverlaysDrawingWpfMapEventArgs">
            <summary>
            This is the event arguments for the OverlaysDrawing event on the MapEngine class. It
            is raised before any of the overlays are drawn.
            </summary>
            <remarks>
            This is the event arguments for the OverlaysDrawing event on the MapEngine class. It
            is raised before any of the overlays are drawn. This event allows you to cancel, manipulate the
            Layer, or draw something with the canvas before the Layer draws.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.OverlaysDrawingWpfMapEventArgs.#ctor">
            <summary>Constructor of OverlaysDrawingWpfMapEventArgs class.</summary>
            <overloads>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </overloads>
            <returns>None</returns>
            <remarks>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.OverlaysDrawingWpfMapEventArgs.#ctor(System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.WpfDesktopEdition.Overlay},ThinkGeo.MapSuite.Core.RectangleShape,System.Boolean)">
            <summary>Constructor of OverlaysDrawingWpfMapEventArgs class.</summary>
            <overloads>
            This constructor allows you to set the overlays to be drawn, the world extent and
            the image you are drawing on.
            </overloads>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="overlays">This parameter is the overlays that will be drawing.</param>
            <param name="worldExtent">This parameter is the wold extent you are drawing.</param>
            <param name="cancel">This parameter specifies whether we need to cancel drawing the overlays or not.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.OverlaysDrawingWpfMapEventArgs.Cancel">
            <summary>
            Gets or sets whether the action will be canceled or not.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.OverlaysDrawingWpfMapEventArgs.WorldExtent">
            <summary>Gets or sets the world extent to draw.</summary>
            <value>This property gets the world extent to draw.</value>
            <remarks>None</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.OverlaysDrawingWpfMapEventArgs.Overlays">
            <summary>This property gets the overlays you will be drawing.</summary>
            <value>This property gets the overlays you will be drawing.</value>
            <remarks>None</remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentScaleChangedWpfMapEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.WpfMap.CurrentScaleChanged">CurrentScaleChanged</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentScaleChangedWpfMapEventArgs.#ctor">
            <summary>Initialize an instance of the CurrentScaleChangedEventArgs class.</summary>
            <overloads>Initialize an instance of the CurrentScaleChangedEventArgs class.</overloads>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentScaleChangedWpfMapEventArgs.#ctor(ThinkGeo.MapSuite.Core.RectangleShape,System.Double,ThinkGeo.MapSuite.Core.GeographyUnit,System.Single,System.Single)">
            <overloads>Initialize an instance of the CurrentScaleChangedEventArgs class.</overloads>
            <summary>
            Initialize an instance of the CurrentScaleChangedEventArgs class by passing 
            the currentScale, mapUnit and mapWidth.
            </summary>
            <param name="currentExtent">A RectangleShape indicates current map extent.</param>
            <param name="currentScale">A double value indicates current map scale.</param>
            <param name="mapUnit">A GeographyUnit value indicates current map unit.</param>
            <param name="mapWidth">A float value indicates current map screen width.</param>
            <param name="mapHeight">A float value indicates current map screen height.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentScaleChangedWpfMapEventArgs.CurrentScale">
            <summary>
            This property specifies the CurrentScale of the CurrentScaleChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentScaleChangedWpfMapEventArgs.MapUnit">
            <summary>
            This property specifies the MapUnit of the CurrentScaleChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentScaleChangedWpfMapEventArgs.MapWidth">
            <summary>
            This property specifies the MapWidth of the CurrentScaleChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentScaleChangedWpfMapEventArgs.MapHeight">
            <summary>
            This property specifies the MapHeight of the CurrentExtentChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.CurrentScaleChangedWpfMapEventArgs.CurrentExtent">
            <summary>
            This property specifies the CurrentExtent of the CurrentExtentChangedEventArgs.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay">
            <summary>
            This class inherits from InterativeOverlay abstract class. This specified overlay describle the
            TrackShape interative process with MapControl using Mouse or Keyborad.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.#ctor">
            <summary>
            Default constructor of the class.
            
            If you use this constructor, please set the properties correctly or it will
            use their default values.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.EndTracking">
            <summary>
            This method ends the tracking shape by initialize some variables.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.MouseDownCore(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseDown logic in its base class InterativeOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.MouseMoveCore(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseMove logic in its base class InterativeOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.MouseUpCore(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseUp logic in its base class InterativeOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.MouseClickCore(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseClick logic in its base class.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.MouseDoubleClickCore(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseDoubleClick logic in its base class InterativeOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter is the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.GetTrackingShape">
            <summary>
            This method gets the current Tracking shape.
            </summary>
            <returns>Returns a shape represents the current status of tracking shape.</returns>
            <remarks>
            	<para>This method is the concrete wrapper for the abstract method GetTrackingShapeCore. This
                method draws the representation of the overlay based on the extent you provided.<br/>
            		<br/></para>
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.GetTrackingShapeCore">
            <summary>
            This is the Core method of GetTrackingShape.You could overrides this method to have your own logic.
            This method gets the current Tracking shape.
            </summary>
            <returns>Returns a shape represents the current status of tracking shape.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.OnTrackEnded(ThinkGeo.MapSuite.WpfDesktopEdition.TrackEndedTrackInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired after the end of Tracking a shape.
            </summary>
            <param name="e">The TrackEndedTrackInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.OnTrackEnding(ThinkGeo.MapSuite.WpfDesktopEdition.TrackEndingTrackInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired before the end of Tracking a shape.
            </summary>
            <param name="e">The TrackEndingTrackInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.OnTrackStarting(ThinkGeo.MapSuite.WpfDesktopEdition.TrackStartingTrackInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired before the start of Tracking a shape.
            </summary>
            <param name="e">The TrackStartingTrackInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.OnTrackStarted(ThinkGeo.MapSuite.WpfDesktopEdition.TrackStartedTrackInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired after the start of Tracking a shape.
            </summary>
            <param name="e">The TrackStartedTrackInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.OnVertexAdding(ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddingTrackInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired before adding a vertex to the Tracking shape.
            </summary>
            <param name="e">The VertexAddingTrackInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.OnVertexAdded(ThinkGeo.MapSuite.WpfDesktopEdition.VertexAddedTrackInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired after adding a vertex to the Tracking shape.
            </summary>
            <param name="e">The VertexAddedTrackInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.OnMouseMoved(ThinkGeo.MapSuite.WpfDesktopEdition.MouseMovedTrackInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired when mouse moved a vertex to the Tracking shape.
            </summary>
            <param name="e">The MouseMovedTrackInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.DrawCore(ThinkGeo.MapSuite.Core.RectangleShape,ThinkGeo.MapSuite.WpfDesktopEdition.RefreshType)">
            <summary>This method draws the TrackInterativeOverlay.</summary>
            <remarks>
             This method draws the representation of the overlay based on the extent you provided.<br/>
            	<br/>
            When implementing this abstract method, consider each feature and its column data
            values. You can use the full power of the GeoCanvas to do the drawing. If you need
            column data for a feature, be sure to override the GetRequiredColumnNamesCore and add
            the columns you need to the collection. In many of the styles, we add properties that
            allow the user to specify which field they need; then, in the GetRequiredColumnNamesCore,
            we read that property and add it to the collection.
            </remarks>
            <returns>None</returns>
            <param name="targetExtent">The new world extent of the map.</param>
            <param name="refreshType">Indicates whether this overlay needs to be refreshed.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.PanToCore(ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            Pans this overlay to the provided world extent.
            </summary>
            <param name="targetExtent">A world extent that needs to be paned.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.SaveStateCore">
            <summary>
            This method saves overlay state to a byte array.
            </summary>
            <returns>A byte array indicates current overlay state.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.LoadStateCore(System.Byte[])">
            <summary>
            This method restore the overlay state back from the specified state.
            </summary>
            <param name="state">This parameter indicates the state for restore the overlay.</param>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.TrackEnded">
            <summary>This event will be fired after the end of tracking shape.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.TrackEnding">
            <summary>This event will be fired before the end of tracking shape.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.TrackStarted">
            <summary>This event will be fired after the start of tracking shape.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.TrackStarting">
            <summary>This event will be fired before the start of tracking shape.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.VertexAdded">
            <summary>This event will be fired after a vertex added to the tracking shape.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.VertexAdding">
            <summary>This event will be fired before a vertex added to the tracking shape.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.MouseMoved">
            <summary>This event will be fired when mouse moved on the vertex of tracking shape.</summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.IsEmpty">
            <summary>
            This property override the logic in its base class by watching the feature count 
            in trackShapeLayer.
            
            If it is empty ,we can skip drawing it for better performance.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.RenderMode">
            <summary>
            This property gets and sets the render mode for drawing this overlay.
            </summary>
            <remarks>
            Set GdiPlus to render map image with Gdi+. 
            We recommend use this value with large data.
            
            Set DrawingVisual to render map image with DrawingVisual feature in WPF.
            Use it when the spatial data is small to get better responding.
            </remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.Vertices">
            <summary>
            This property gets the vertices to make up the track shape.
            This is a protected property which probablly need to be used in its sub classes.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.TrackShapeLayer">
            <summary>
            This property gets the TrackShape layers which holds the track shapes.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.TrackMode">
            <summary>Gets a mode of TrackOverlay.</summary>
            <remarks>
            The default mode is TrackMode.None which means you cannot draw or edit features.
            By setting the mode to TrackMode.Point, TrackMode.Line, TrackMode.Polygon
            etc., you could add point, line or polygon to the FeatureOverlay. Setting the mode to
            TrackMode.Edit, you could edit the shapes.
            </remarks>
            <value>A mode of TrackOverlay.</value>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseUpInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.InteractiveOverlay.MapMouseUp">MapMouseUp</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseUpInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of MapMouseUpInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseUpInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.WpfDesktopEdition.InteractionArguments)">
            <summary>
            Constructor of MapMouseUpInteractiveOverlayEventArgs class.
            </summary>
            <param name="interactionArguments">This parameter specified the interaction auguments to construct the class.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MapMouseUpInteractiveOverlayEventArgs.InteractionArguments">
            <summary>
            This property gets the interaction auguments for the event args.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.PointMarkerStyle">
            <summary>This class represents the ordinary point marker style.</summary>
            <remarks>
            The <strong>PointMarkerStyle</strong> contains the basic style for creating a
            marker such as web image, popup and context menu. Use this style to create a batch of
            markers with the same appearance.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.PointMarkerStyle.#ctor">
            <summary>Constructor of the <strong>PointMarkerStyle</strong> class.</summary>
            <overloads>This is constructor of the <strong>PointMarkerStyle</strong> class.</overloads>
            <remarks>This is constructor of the <strong>PointMarkerStyle</strong> class.</remarks>
            <returns>An instance of <strong>PointMarkerStyle</strong> class.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.PointMarkerStyle.#ctor(System.Windows.Media.ImageSource)">
            <summary>Constructor of the <strong>PointMarkerStyle</strong> class.</summary>
            <overloads>This is constructor of the <strong>PointMarkerStyle</strong> class.</overloads>
            <remarks>This is constructor of the <strong>PointMarkerStyle</strong> class.</remarks>
            <returns>An instance of <strong>PointMarkerStyle</strong> class.</returns>
            <param name="imageSource">An ImageSource value indicating the icon source for the marker.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.PointMarkerStyle.GetMarkers(System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.Core.Feature})">
            <summary>
            This method returns a collection of markers that created with specific styles
            from the features passed in.
            </summary>
            <returns>A collection of markers that create from the features.</returns>
            <remarks>
            This method returns a collection of markers that created with specific styles
            from the features passed in.
            </remarks>
            <param name="features">A collection of features that the markers are created from.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.PointMarkerStyle.ImageSource">
            <summary>Gets or sets the small image that the marker displays.</summary>
            <value>A small image that the marker displays.</value>
            <remarks>Gets or sets the small image that the marker displays.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.PointMarkerStyle.Width">
            <summary>Gets or sets the width in pixel of the web image.</summary>
            <value>A double value indicating the width in pixel of the image file.</value>
            <remarks>Gets or sets the width in pixel of the web image.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.PointMarkerStyle.Height">
            <summary>Gets or sets the height in pixel of the web image.</summary>
            <value>A double value indicating the height in pixel of the image file.</value>
            <remarks>Gets or sets the height in pixel of the web image.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.PointMarkerStyle.XScreenOffset">
            <summary>Gets or sets the image's X offset in pixel.</summary>
            <value>A double value indicating the image's X offset in pixel.</value>
            <remarks>Gets or sets the image's X offset in pixel.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.PointMarkerStyle.YScreenOffset">
            <summary>Gets or sets the image's Y offset in pixel.</summary>
            <value>A double value indicating the image's Y offset in pixel.</value>
            <remarks>Gets or sets the image's Y offset in pixel.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.PointMarkerStyle.ToolTip">
            <summary>
            Gets or sets a tooltip for marker.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.PointMarkerStyle.ToolTipDelay">
            <summary>
            Gets or sets an interval in milliseconds.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoCanvas">
            <summary>
            This class represents a GeoCanvas to draw by Wpf Shape objects.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoCanvas.#ctor">
            <summary>
            Constructor of the WpfGeoCanvas class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoCanvas.BeginDrawingCore(System.Object,ThinkGeo.MapSuite.Core.RectangleShape,ThinkGeo.MapSuite.Core.GeographyUnit)">
            <summary>
            Prepare parameters for drawing with Shape objects.
            </summary>
            <param name="nativeImage">A canvas object that holds the drawing shape objects.</param>
            <param name="worldExtent">An area to draw shapes on the canvas.</param>
            <param name="drawingMapUnit">A geography unit for drawing.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoCanvas.DrawAreaCore(System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.Core.ScreenPointF[]},ThinkGeo.MapSuite.Core.GeoPen,ThinkGeo.MapSuite.Core.GeoBrush,ThinkGeo.MapSuite.Core.DrawingLevel,System.Single,System.Single,ThinkGeo.MapSuite.Core.PenBrushDrawingOrder)">
            <summary>
            Draws an area with GeoCanvas.
            </summary>
            <param name="screenPoints">A collection of screen points for the area.</param>
            <param name="outlinePen">Outline for drawing the area.</param>
            <param name="fillBrush">Fill brush for drawing the area.</param>
            <param name="drawingLevel">Drawing level.</param>
            <param name="xOffset">Screen offset x for drawing.</param>
            <param name="yOffset">Screen offset y for drawing.</param>
            <param name="penBrushDrawingOrder">An order that draws by pen and brush.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoCanvas.DrawLineCore(System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.Core.ScreenPointF},ThinkGeo.MapSuite.Core.GeoPen,ThinkGeo.MapSuite.Core.DrawingLevel,System.Single,System.Single)">
            <summary>
            Draws a line with GeoCanvas.
            </summary>
            <param name="screenPoints">Screen points for the line.</param>
            <param name="linePen">Pen for drawing lines.</param>
            <param name="drawingLevel">Drawing level.</param>
            <param name="xOffset">Screen offset x for drawing line.</param>
            <param name="yOffset">Screen offset y for drawing line.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoCanvas.DrawEllipseCore(ThinkGeo.MapSuite.Core.ScreenPointF,System.Single,System.Single,ThinkGeo.MapSuite.Core.GeoPen,ThinkGeo.MapSuite.Core.GeoBrush,ThinkGeo.MapSuite.Core.DrawingLevel,System.Single,System.Single,ThinkGeo.MapSuite.Core.PenBrushDrawingOrder)">
            <summary>
            Draws an ellipse with GeoCanvas.
            </summary>
            <param name="screenPoint">Screen points of the ellipse.</param>
            <param name="width">Width in screen coordinate of the ellipse.</param>
            <param name="height">Height in screen coordinate of the ellipse.</param>
            <param name="outlinePen">A pen for drawing the outline of the ellipse.</param>
            <param name="fillBrush">A brush for filling the ellipse.</param>
            <param name="drawingLevel">Drawing level.</param>
            <param name="xOffset">Screen offset x for drawing ellipse.</param>
            <param name="yOffset">Screen offset y for drawing ellipse.</param>
            <param name="penBrushDrawingOrder">An order that draws by pen and brush.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoCanvas.DrawScreenImageWithoutScalingCore(ThinkGeo.MapSuite.Core.GeoImage,System.Single,System.Single,ThinkGeo.MapSuite.Core.DrawingLevel,System.Single,System.Single,System.Single)">
            <summary>
            Draws an image without scaling.
            </summary>
            <param name="image">An image source for drawing.</param>
            <param name="centerXInScreen">Screen center x of the image.</param>
            <param name="centerYInScreen">Screen center y of the image.</param>
            <param name="drawingLevel">Drawing level.</param>
            <param name="xOffset">Screen offset x for drawing image.</param>
            <param name="yOffset">Screen offset y for drawing image.</param>
            <param name="rotateAngle">Rotate angle for drawing image.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoCanvas.DrawScreenImageCore(ThinkGeo.MapSuite.Core.GeoImage,System.Single,System.Single,System.Single,System.Single,ThinkGeo.MapSuite.Core.DrawingLevel,System.Single,System.Single,System.Single)">
            <summary>
            Draws an image with specified screen with and height.
            </summary>
            <param name="image">An image source for drawing.</param>
            <param name="centerXInScreen">Screen center x of the image.</param>
            <param name="centerYInScreen">Screen center y of the image.</param>
            <param name="widthInScreen">Screen width of the image.</param>
            <param name="heightInScreen">Screen height of the image.</param>
            <param name="drawingLevel">Drawing level.</param>
            <param name="xOffset">Screen offset x for drawing image.</param>
            <param name="yOffset">Screen offset y for drawing image.</param>
            <param name="rotateAngle">Rotate angle for drawing image.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoCanvas.DrawTextCore(System.String,ThinkGeo.MapSuite.Core.GeoFont,ThinkGeo.MapSuite.Core.GeoBrush,ThinkGeo.MapSuite.Core.GeoPen,System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.Core.ScreenPointF},ThinkGeo.MapSuite.Core.DrawingLevel,System.Single,System.Single,System.Single)">
            <summary>
            Draws text with GeoCanvas.
            </summary>
            <param name="text">This parameter specifies the text you wish to draw.</param>
            <param name="font">This parameter represents the font you wish to use to draw the text.</param>
            <param name="fillBrush"> This parameter specifies the kind of fill you want to use to draw the text.</param>
            <param name="haloPen"> This parameter specifies the HaloPen that will be used to draw the text, when the HaloPen effect is needed.</param>
            <param name="textPathInScreen">This parameter specifies the path on which to draw the text.</param>
            <param name="drawingLevel">
            This parameter specifies the drawing level you wish to draw the text on. Higher
            levels overwrite lower levels.
            </param>
            <param name="xOffset"> This parameter determines the X offset for the text to be drawn.</param>
            <param name="yOffset"> This parameter determines the Y offset for the text to be drawn.</param>
            <param name="rotateAngle"> This parameter determines the rotation angle for the text to be drawn.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoCanvas.MeasureTextCore(System.String,ThinkGeo.MapSuite.Core.GeoFont)">
            <summary>
            This method returns the rectangle that contains the specified text, when that text is drawn
            with the specified font.
            </summary>
            <param name="text">This parameter represents the text to be measured.</param>
            <param name="font">This parameter represents the font for drawing text.</param>
            <returns>
            This method returns the rectangle that contains the specified text, when that text is drawn
            with the specified font.
            </returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoCanvas.ToNativeImageCore(ThinkGeo.MapSuite.Core.GeoImage)">
            <summary>
            This method will throw NotImplementedException.
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoCanvas.ToGeoImageCore(System.Object)">
            <summary>
            This method will throw NotImplementedException.
            </summary>
            <param name="nativeImage"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoCanvas.GetCanvasWidthCore(System.Object)">
            <summary>
            This method gets the canvas width of the passed-in native image object.
            </summary>
            <param name="nativeImage">The native image that will be used to get the image width.</param>
            <returns>The returning canvas width.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoCanvas.GetCanvasHeightCore(System.Object)">
            <summary>
            This method gets the canvas height of the passed-in native image object.
            </summary>
            <param name="nativeImage">The native image will be used to get the image height.</param>
            <returns>The returning canvas height.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoCanvas.GetStreamFromGeoImage(ThinkGeo.MapSuite.Core.GeoImage)">
            <summary>
            Get the stream from the passed-in GeoImage.  This API is an abstract API and will be implemented in each concrete sub-class.
            </summary>
            <param name="image">The parameter specifies the image to get the stream from.</param>
            <returns>The returning stream retrieved from the passed-in image.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.WpfGeoCanvas.FlushCore">
            <summary>This method flush drawing and commits the drawing on the GeoCanvas.</summary>
            <remarks>
            This method should be called when you are finished drawing. It will commit the
            image changes to the image you passed in on BeginDrawing. It will also set
            IsDrawing to false. After you call this method it will put the GeoCanvas into an
            invalid state, so if you then call any drawing methods it will raise an
            exception.
            </remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.VertexMovingEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.EditInteractiveOverlay.VertexMoving">VertexMoving.</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.VertexMovingEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of VertexMovingEditInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.VertexMovingEditInteractiveOverlayEventArgs.#ctor(System.Boolean,ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.Vertex)">
            <summary>
            Constructor of VertexMovingEditInteractiveOverlayEventArgs class.
            </summary>
            <param name="cancel">Indicates whether the operation is canceled or not.</param>
            <param name="affectedVertexFeature">Indicates a feature which is affected.</param>
            <param name="movingVertex">Indicates a vertex which is moving.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.VertexMovingEditInteractiveOverlayEventArgs.#ctor(System.Boolean,ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.Vertex,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            Constructor of VertexMovedEditInteractiveOverlayEventArgs class.
            </summary>
            <param name="cancel">This parameter specified the cancel property.</param>
            <param name="affectedVertexFeature">This parameter specified the affectedVertex feature property.</param>
            <param name="movingVertex">This parameter specified the moving vertex.</param>
            <param name="targetVertex">This parameter specified the target vertex.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.VertexMovingEditInteractiveOverlayEventArgs.TargetVertex">
            <summary>
            Gets or sets the target vertex to be moved
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.VertexMovingEditInteractiveOverlayEventArgs.AffectedVertexFeature">
            <summary>
            Gets or sets the Feature to be used to move vertex.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.VertexMovingEditInteractiveOverlayEventArgs.MovingVertex">
            <summary>
            Gets or sets the vertex to be moved.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.VertexMovingEditInteractiveOverlayEventArgs.Cancel">
            <summary>
            Gets or sets the action to be canceled or not.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.MouseMovedTrackInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.WpfDesktopEdition.TrackInteractiveOverlay.MouseMoved">MouseMoved.</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MouseMovedTrackInteractiveOverlayEventArgs.#ctor">
            <summary>
            Constructor of MouseMovedTrackInteractiveOverlayEventArgs class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.MouseMovedTrackInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Vertex,ThinkGeo.MapSuite.Core.Feature)">
            <summary>
            Constructor of MouseMovedTrackInteractiveOverlayEventArgs class.
            </summary>
            <param name="affectedFeature">This parameter specified the affected feature.</param>
            <param name="movedVertex">This parameter specified the target vertex to be moved.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MouseMovedTrackInteractiveOverlayEventArgs.MovedVertex">
            <summary>
            Gets or sets the vertex to be moved.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.MouseMovedTrackInteractiveOverlayEventArgs.AffectedFeature">
            <summary>
            Gets or sets the Feature to be affected.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.InMemoryMarkerOverlay">
            <summary>
            Represents a MarkerOverlay object that dynamically creates markers from the InMemory
            features.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InMemoryMarkerOverlay.#ctor">
            <summary>Constructor of the InMemoryMarkerOverlay class.</summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InMemoryMarkerOverlay.#ctor(System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.Core.FeatureSourceColumn})">
            <summary>Constructor of the InMemoryMarkerOverlay class.</summary>
            <param name="featureColumns">This parameter indicates the feature source columns for InMemoryMarkerOverlay.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InMemoryMarkerOverlay.GetMarkersToDrawCore(ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            Returns a collection of markers based on the extent and zoomlevel that you passed in.
            </summary>
            <param name="targetExtent">The extent that includes the markers you want to serialize.</param>
            <returns>A collection of marker objects that will be placed on the map.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.InMemoryMarkerOverlay.GetBoundingBoxCore">
            <summary>
            This method gets an entire boundingbox to maintain all the markers which are added in this overlay.
            </summary>
            <returns>Returns a RectangleShape that maintains all the markers which are added in this overlay.</returns>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.InMemoryMarkerOverlay.Columns">
            <summary>
            Gets the collection of FeatureSourceColumns that is the column definition of the
            feature data.
            </summary>
            <value>A collection of FeatureSourceColumn.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.InMemoryMarkerOverlay.FeatureSource">
            <summary>
            Gets a FeatureSource object by which you can perform queries on the features in the
            overlay.
            </summary>
            <value>
            A FeatureSource object by which you can perform queries on the features in the
            overlay.
            </value>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.InMemoryMarkerOverlay.ZoomLevelSet">
            <summary>
            This property gets the ZoomLevelSet object that controls the markers' generation.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentChangedType">
            <summary>
            This enumeration specifies the type of extent change that has occurred
            when doing interactive actions with InterativeOverlay.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentChangedType.None">
            <summary>
            Default value for enumeration.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentChangedType.Pan">
            <summary>
            This enumeration item represents panning action for the extent interativeOverlay.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentChangedType.TrackZoomIn">
            <summary>
            This enumeration item represents track zoom in action for the extent interativeOverlay.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentChangedType.TrackZoomOut">
            <summary>
            This enumeration item represents track zoom out action for the extent interativeOverlay.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentChangedType.DoubleClickZoomIn">
            <summary>
            This enumeration item represents double-click zoom in action for the extent interativeOverlay.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentChangedType.DoubleClickZoomOut">
            <summary>
            This enumeration item represents double-click zoom out action for the extent interativeOverlay.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentChangedType.MouseWheelZoomIn">
            <summary>
            This enumeration item represents mouse wheel zoom in action for the extent interativeOverlay.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.ExtentChangedType.MouseWheelZoomOut">
            <summary>
            This enumeration item represents mouse wheel zoom out action for the extent interativeOverlay.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.DrawnOverlayEventArgs">
            <summary>
            This is the event arguments for the OverlayDrawn event on the MapEngine class. It
            is raised after the Overlay has been drawn.
            </summary>
            <remarks>
            This is the event arguments for the OverlayDrawn event on the MapEngine class. It
            is raised after the Overlay has been drawn. This event allows you draw something
            with the canvas after the Layer draws.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawnOverlayEventArgs.#ctor">
            <summary>Constructor of DrawnOverlayEventArgs class.</summary>
            <overloads>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </overloads>
            <returns>An instance of DrawnOverlayEventArgs class.</returns>
            <remarks>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawnOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>Constructor of DrawnOverlayEventArgs class.</summary>
            <overloads>
            This constructor allows you to set the Overlay drawn, the world extent and
            the image you are drawing on.
            </overloads>
            <param name="worldExtent">
            This parameter is an extent for drawing an overlay.
            </param>
        </member>
        <member name="P:ThinkGeo.MapSuite.WpfDesktopEdition.DrawnOverlayEventArgs.WorldExtent">
            <summary>
            Gets or sets an extent for drawing an overlay.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.DisplayZoomBarText">
            <summary>
            This enum indicates whether a zoom bar text is displayed when dragging the slider.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.DisplayZoomBarText.Default">
            <summary>This value indicates hide the display zoom bar text during dragging the slider.</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.DisplayZoomBarText.None">
            <summary>This value indicates hide the display zoom bar text during dragging the slider.</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.WpfDesktopEdition.DisplayZoomBarText.Display">
            <summary>This value indicates the zoom bar text shows up during dragging the slider.</summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingVisualGeoCanvas">
            <summary>
            This class represents a canvas that is used to draw geographic shapes. It is
            intended to be inherited for the implementation of drawing visual systems.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingVisualGeoCanvas.#ctor">
            <summary>
            Constructor of DrawingVisualGeoCanvas.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingVisualGeoCanvas.BeginDrawingCore(System.Object,ThinkGeo.MapSuite.Core.RectangleShape,ThinkGeo.MapSuite.Core.GeographyUnit)">
            <summary>
            This method converts a GeoImage to a commonly-used object. In GdiPlus, this object is often an Image control in Wpf.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingVisualGeoCanvas.EndDrawingCore">
            <summary>
            This method ends drawing and commits the drawing on the GeoCanvas.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingVisualGeoCanvas.DrawAreaCore(System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.Core.ScreenPointF[]},ThinkGeo.MapSuite.Core.GeoPen,ThinkGeo.MapSuite.Core.GeoBrush,ThinkGeo.MapSuite.Core.DrawingLevel,System.Single,System.Single,ThinkGeo.MapSuite.Core.PenBrushDrawingOrder)">
            <summary>This method draws the area on the GeoCanvas.</summary>
            <overloads>
            This overload allows you to pass in the GeoPen and the DrawingLevel you want to
            draw on.
            </overloads>
            <remarks>
            	<para>This method is used to draw on the GeoCanvas. It provides you with a number of
                overloads that allow you to control how things are drawn. Specify the GeoBrush to
                fill in an area. Specify the GeoPen to outline an area using that
                GeoPen. You can also call an overload that will allow you to specify both a GeoPen
                and a GeoBrush.</para>
            	<para>The DrawingLevel allows you to specify the level you will draw on when you are
                drawing multiple areas. This is very useful when you want to draw a drop shadow, for
                example. In that case, you could draw the black backdrop on the lowest level with an offset, then
                draw the normal shape on a higher level without an offset.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">In the event you attempt to call this method when the GeoCanvas' IsDrawing mode is false, it will throw an InvalidOperationException.</exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">Passing invalid well-known binary in the areaShapeWkb parameter will throw an ArgumentException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the areaShapeWkb, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the outlinePen and a null as the fillBrush, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">If you pass in a drawingLevel that is not defined in the enumeration, it will throw an ArgumentOutOfRangeException.</exception>
            <param name="screenPoints">This parameter is the area point in screen coordinates.</param>
            <param name="outlinePen">This parameter describes the outline GeoPen that will be used to draw the area.</param>
            <param name="fillBrush">This parameter describes the GeoBrush that will be used to draw the area.</param>
            <param name="drawingLevel"> This parameter determines the level for drawing.</param>
            <param name="xOffset"> This parameter determines the X offset for the area to be drawn.</param>
            <param name="yOffset"> This parameter determines the Y offset for the area to be drawn.</param>
            <param name="penBrushDrawingOrder">This parameter determines pen and brush drawing order.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingVisualGeoCanvas.DrawLineCore(System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.Core.ScreenPointF},ThinkGeo.MapSuite.Core.GeoPen,ThinkGeo.MapSuite.Core.DrawingLevel,System.Single,System.Single)">
            <remarks>
            	<para>This method is used to draw a line on the GeoCanvas using the specified GeoPen.</para>
            	<para>The DrawingLevel allows you to specify the level you will draw on when
                drawing multiple lines. This is very useful when you want to draw a road, for example. You can
                draw the black background on the lowest level, then draw a slightly thinner white line on a higher
                level. This will result in a great effect for a road.</para>
            </remarks>
            <summary>Draws a LineShape on the GeoCanvas.</summary>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">In the event you attempt to call this method when the GeoCanvas' IsDrawing mode is false, it will throw an InvalidOperationException.</exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">Passing invalid well-known binary in the lineShapeWkb parameter will throw an ArgumentException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the lineShapeWkb, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the linePen, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">If you pass in a drawingLevel that is not defined in the enumeration, it will throw an ArgumentOutOfRangeException.</exception>
            <param name="screenPoints">This parameter represents the line points in screen coordinates.</param>
            <param name="linePen">This parameter describes the GeoPen that will be used to draw the LineShape.</param>
            <param name="drawingLevel">This parameter determines the DrawingLevel that the GeoPen will draw on.</param>
            <param name="xOffset"> This parameter determines the X offset for the line to be drawn.</param>
            <param name="yOffset"> This parameter determines the Y offset for the line to be drawn.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingVisualGeoCanvas.DrawEllipseCore(ThinkGeo.MapSuite.Core.ScreenPointF,System.Single,System.Single,ThinkGeo.MapSuite.Core.GeoPen,ThinkGeo.MapSuite.Core.GeoBrush,ThinkGeo.MapSuite.Core.DrawingLevel,System.Single,System.Single,ThinkGeo.MapSuite.Core.PenBrushDrawingOrder)">
            <summary>Draws the point on the GeoCanvas.</summary>
            <remarks>
            	<para>This method is used to draw a point on the GeoCanvas. It provides you with a number of
                overloads that allow you to control how it is drawn. Specify the GeoBrush to fill in the
                area of the point. Specify the GeoPen to outline the point using that GeoPen.
                You can also call a overload that will allow you to specify
                both a GeoPen and a GeoBrush.</para>
            	<para>The DrawingLevel allows you to specify the level you will draw on when
                drawing many points.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">In the event you attempt to call this method when the GeoCanvas' IsDrawing mode is false, it will throw an InvalidOperationException.</exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">Passing invalid well-known binary in the pointShapeWkb parameter will throw an ArgumentException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the pointShapeWkb, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the outlinePen and a null as the fillBrush, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">If you pass in a drawingLevel that is not defined in the enumeration, it will throw an ArgumentOutOfRangeException.</exception>
            <param name="screenPoint">This parameter is the point in screen coordinates.</param>
            <param name="width">This parameter describes the width of the ellipse to be drawn.</param>
            <param name="height">This parameter describes the height of the ellipse to be drawn.</param>
            <param name="outlinePen">This parameter describes the outline GeoPen that will be used to draw the point.</param>
            <param name="fillBrush">This parameter describes the fill GeoBrush that will be used to draw the point. </param>
            <param name="drawingLevel"> This parameter determines the DrawingLevel that the GeoPen or GeoBrush will draw on.</param>
            <param name="xOffset"> This parameter determines the X offset of the ellipse to be drawn.</param>
            <param name="yOffset"> This parameter determines the Y offset of the ellipse to be drawn.</param>
            <param name="penBrushDrawingOrder">This parameter determines pen and brush drawing order.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingVisualGeoCanvas.DrawScreenImageWithoutScalingCore(ThinkGeo.MapSuite.Core.GeoImage,System.Single,System.Single,ThinkGeo.MapSuite.Core.DrawingLevel,System.Single,System.Single,System.Single)">
            <summary>Draws an unscaled image on the GeoCanvas.</summary>
            <remarks>Drawing an image unscaled is faster than using the API that scales it.</remarks>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">In the event you attempt to call this method when the GeoCanvas' IsDrawing mode is false, it will throw an InvalidOperationException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the image, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">If you pass in a drawingLevel that is not defined in the enumeration, it will throw an ArgumentOutOfRangeException.</exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">Passing an invalid image parameter will throw an ArgumentException.</exception>
            <param name="image">The image you want to draw unscaled.</param>
            <param name="centerXInScreen">The X coordinate of the center point (in screen coordinates) of where you want to draw the image.</param>
            <param name="centerYInScreen">The Y coordinate of the center point (in screen coordinates) of where you want to draw the image.</param>
            <param name="drawingLevel">This parameter determines the DrawingLevel the image will draw on.</param>
            <param name="xOffset"> This parameter determines the X offset for the image to be drawn.</param>
            <param name="yOffset"> This parameter determines the Y offset for the image to be drawn.</param>
            <param name="rotateAngle"> This parameter determines the rotation angle for the image to be drawn.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingVisualGeoCanvas.DrawScreenImageCore(ThinkGeo.MapSuite.Core.GeoImage,System.Single,System.Single,System.Single,System.Single,ThinkGeo.MapSuite.Core.DrawingLevel,System.Single,System.Single,System.Single)">
            <summary>Draws a scaled image on the GeoCanvas.</summary>
            <remarks>
            Drawing an image scaled is slower than using the API that draws it
            unscaled.
            </remarks>
            <param name="image">The image you want to draw.</param>
            <param name="centerXInScreen">The X coordinate of the center point (in screen coordinates) of where you want to draw the image.</param>
            <param name="centerYInScreen">The Y coordinate of the center point (in screen coordinates) of where you want to draw the image.</param>
            <param name="widthInScreen">
            The width you want to scale the image to. This is the width at which the image will be
            drawn.
            </param>
            <param name="heightInScreen">
            The height you want to scale the image to. This is the height at which the image will be
            drawn.
            </param>
            <param name="drawingLevel">This parameter determines the DrawingLevel the image will draw on.</param>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">In the event you attempt to call this method when the GeoCanvas' IsDrawing mode is false, it will throw an InvalidOperationException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the image, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">If you pass in a drawingLevel that is not defined in the enumeration, it will throw an ArgumentOutOfRangeException.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">If you pass in a widthInScreen that is not greater than 0, it will throw a ArgumentOutOfRangeException.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">If you pass in a heightInScreen that is not greater than 0, it will throw a ArgumentOutOfRangeException.</exception>
            <param name="xOffset"> This parameter determines the X offset for the image to be drawn.</param>
            <param name="yOffset"> This parameter determines the Y offset for the image to be drawn.</param>
            <param name="rotateAngle"> This parameter determines the rotation angle for the image to be drawn.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingVisualGeoCanvas.DrawTextCore(System.String,ThinkGeo.MapSuite.Core.GeoFont,ThinkGeo.MapSuite.Core.GeoBrush,ThinkGeo.MapSuite.Core.GeoPen,System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.Core.ScreenPointF},ThinkGeo.MapSuite.Core.DrawingLevel,System.Single,System.Single,System.Single)">
            <summary>
            	<para>This method allows you to draw text at the specified location, using the
                specified brush and font parameters.</para>
            </summary>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">In the event you attempt to call this method when the GeoCanvas' IsDrawing mode is false, it will throw an InvalidOperationException.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">If you pass in a drawingLevel that is not defined in the enumeration, it will throw an ArgumentOutOfRangeException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the fillBrush, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the text, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the font, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">If you pass a blank string as the text parameter, we will throw an ArgumentException.</exception>        
            <remarks>
            	<para>This method is used to draw text on the GeoCanvas.</para>
            	<para>The DrawingLevel allows you to specify the level you will draw on when
                drawing multiple text items. This is very useful when you want to draw a drop shadow,
                for example. You can draw the black backdrop on the lowest level with an offset, then
                draw the normal text on a higher level without an offset.</para>
            </remarks>
            <param name="text">This parameter specifies the text you wish to draw.</param>
            <param name="font">This parameter represents the font you wish to use to draw the text.</param>
            <param name="fillBrush">
            This parameter specifies the kind of fill you want to use to draw the
            text.
            </param>
            <param name="haloPen"> This parameter specifies the HaloPen that will be used to draw the text, when the HaloPen effect is needed.</param>
            <param name="textPathInScreen">This parameter specifies the path on which to draw the text.</param>
            <param name="drawingLevel">
            This parameter specifies the drawing level you wish to draw the text on. Higher
            levels overwrite lower levels.
            </param>
            <param name="xOffset"> This parameter determines the X offset for the text to be drawn.</param>
            <param name="yOffset"> This parameter determines the Y offset for the text to be drawn.</param>
            <param name="rotateAngle"> This parameter determines the rotation angle for the text to be drawn.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingVisualGeoCanvas.MeasureTextCore(System.String,ThinkGeo.MapSuite.Core.GeoFont)">
            <summary>
            This method returns the rectangle that contains the specified text, when that text is drawn
            with the specified font.
            </summary>
            <remarks>This method is typically used for labeling, to determine whether labels overlap.</remarks>
            <returns>
            This method returns the rectangle that contains the specified text, when that text is drawn
            with the specified font.
            </returns>
            <param name="text">This parameter represents the text you want to measure.</param>
            <param name="font">This parameter represents the font of the text you want to measure.</param>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the text, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the font, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">If you pass a blank string as the text parameter, we will throw an ArgumentException.</exception>  
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingVisualGeoCanvas.ToNativeImageCore(ThinkGeo.MapSuite.Core.GeoImage)">
            <summary>This method returns a native image object from the specified GeoCanvas.</summary>
            <returns>This method returns a native image object from the specified GeoCanvas.</returns>
            <remarks>
            It is not implemented.
            </remarks>
            <param name="image">This parameter is the GeoCanvas you want to convert to a native image.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingVisualGeoCanvas.ToGeoImageCore(System.Object)">
            <summary>This method returns a GeoImage from a native image object.</summary>
            <returns>This method returns a GeoImage from a native image object.</returns>
            <remarks>
            It is not implemented.
            </remarks>
            <param name="nativeImage">
            This parameter is the native image object you want to convert to a
            GeoImage.
            </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingVisualGeoCanvas.GetCanvasWidthCore(System.Object)">
            <summary>
            This method gets the canvas width of the specified native image object.
            </summary>
            <param name="nativeImage">The native image will be used to get the canvas width.</param>
            <returns>The returning canvas width.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingVisualGeoCanvas.GetCanvasHeightCore(System.Object)">
            <summary>
            This method gets the canvas height of the specified native image object.
            </summary>
            <param name="nativeImage">The native image will be used to get the canvas height.</param>
            <returns>The returning canvas height.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingVisualGeoCanvas.GetStreamFromGeoImage(ThinkGeo.MapSuite.Core.GeoImage)">
            <summary>This method returns a stream that represents the GeoImage in TIFF format.</summary>
            <returns>This method returns a stream that represents the GeoImage in TIFF format.</returns>
            <remarks>
            This method allows you to get the stream out of a GeoImage. The stream is a
            memory stream and the bytes are in TIFF format. Once you have the stream, you can then save it to
            whatever format you need.
            </remarks>
            <param name="image">This parameter is the GeoImage you want to convert to a stream.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.WpfDesktopEdition.DrawingVisualGeoCanvas.FlushCore">
            <summary>This method flush drawing and commits the drawing on the GeoCanvas.</summary>
            <remarks>
            This method should be called when you are finished drawing. It will commit the
            image changes to the image you passed in on BeginDrawing. It will also set
            IsDrawing to false. After you call this method it will put the GeoCanvas into an
            invalid state, so if you then call any drawing methods it will raise an
            exception.
            </remarks>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
